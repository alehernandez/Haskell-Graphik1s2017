
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Mar 22 08:32:53 CST 2017
//----------------------------------------------------

package org.alejandrohernandez.analizadorHaskell;

import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import java.lang.*;
import javax.swing.JOptionPane;
import java.io.*;
import org.alejandrohernandez.beans.Nodo;
import java.util.ArrayList;
import org.alejandrohernandez.beans.Errores;
import org.alejandrohernandez.manejadores.ManejadorErrores;
import org.alejandrohernandez.manejadores.TablaSimbolosHaskell;

/** CUP v0.10k generated parser.
  * @version Wed Mar 22 08:32:53 CST 2017
  */
public class ParserV2 extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserV2() {super();}

  /** Constructor which sets the default scanner. */
  public ParserV2(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\172\000\002\002\004\000\002\003\003\000\002\004" +
    "\004\000\002\004\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\010\000\002\005\003\000" +
    "\002\006\007\000\002\013\005\000\002\013\003\000\002" +
    "\014\004\000\002\014\003\000\002\015\005\000\002\015" +
    "\003\000\002\015\003\000\002\015\010\000\002\015\005" +
    "\000\002\015\005\000\002\016\007\000\002\016\011\000" +
    "\002\017\006\000\002\023\004\000\002\023\003\000\002" +
    "\024\006\000\002\024\006\000\002\027\005\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\005" +
    "\000\002\027\005\000\002\027\003\000\002\027\005\000" +
    "\002\036\007\000\002\036\005\000\002\025\005\000\002" +
    "\025\003\000\002\031\003\000\002\031\006\000\002\031" +
    "\006\000\002\031\006\000\002\031\005\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\030\004\000\002\030\004\000\002\030\004\000\002" +
    "\030\004\000\002\030\004\000\002\030\004\000\002\030" +
    "\004\000\002\030\004\000\002\007\003\000\002\007\003" +
    "\000\002\035\004\000\002\035\004\000\002\035\004\000" +
    "\002\035\004\000\002\035\004\000\002\034\005\000\002" +
    "\034\006\000\002\026\005\000\002\026\003\000\002\011" +
    "\005\000\002\011\007\000\002\011\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\004\000\002\020\005\000\002\020" +
    "\005\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\003\000\002\022\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\003\000\002\037\005\000\002" +
    "\037\005\000\002\037\005\000\002\037\005\000\002\037" +
    "\005\000\002\037\005\000\002\037\005\000\002\037\005" +
    "\000\002\037\004\000\002\037\005\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\005\000\002\037" +
    "\005\000\002\037\005\000\002\037\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\363\000\046\004\011\012\023\040\021\041\033\042" +
    "\016\043\017\044\030\045\031\046\007\047\006\050\010" +
    "\051\025\052\022\053\027\054\034\055\014\067\024\071" +
    "\005\001\002\000\050\002\ufffc\004\ufffc\012\ufffc\040\ufffc" +
    "\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047" +
    "\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc\055\ufffc" +
    "\067\ufffc\071\ufffc\001\002\000\054\002\uffe4\004\uffe4\012" +
    "\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4" +
    "\044\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052" +
    "\uffe4\053\uffe4\054\uffe4\055\uffe4\067\uffe4\071\uffe4\001\002" +
    "\000\014\004\064\012\023\042\016\067\066\071\005\001" +
    "\002\000\014\004\064\012\023\042\016\067\066\071\005" +
    "\001\002\000\014\004\064\012\023\042\016\067\066\071" +
    "\005\001\002\000\040\035\356\040\021\041\033\043\017" +
    "\044\030\045\031\046\007\047\006\050\010\051\025\052" +
    "\022\053\027\054\034\055\014\067\057\001\002\000\006" +
    "\036\351\037\350\001\002\000\050\002\ufffd\004\ufffd\012" +
    "\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd" +
    "\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054" +
    "\ufffd\055\ufffd\067\ufffd\071\ufffd\001\002\000\014\004\064" +
    "\012\023\042\016\067\066\071\005\001\002\000\050\002" +
    "\ufffe\004\ufffe\012\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe" +
    "\044\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe\052" +
    "\ufffe\053\ufffe\054\ufffe\055\ufffe\067\ufffe\071\ufffe\001\002" +
    "\000\054\002\uffe0\004\uffe0\012\uffe0\036\uffe0\037\uffe0\040" +
    "\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0" +
    "\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055" +
    "\uffe0\067\uffe0\071\uffe0\001\002\000\026\004\115\010\116" +
    "\012\107\017\112\042\106\066\114\067\104\070\111\071" +
    "\110\072\113\001\002\000\050\002\000\004\011\012\023" +
    "\040\021\041\033\042\016\043\017\044\030\045\031\046" +
    "\007\047\006\050\010\051\025\052\022\053\027\054\034" +
    "\055\014\067\024\071\005\001\002\000\026\004\115\010" +
    "\116\012\107\017\112\042\106\066\114\067\104\070\111" +
    "\071\110\072\113\001\002\000\014\004\064\012\023\042" +
    "\016\067\066\071\005\001\002\000\020\004\046\012\156" +
    "\066\047\067\053\070\045\071\050\072\052\001\002\000" +
    "\012\014\103\036\uffe3\037\uffe3\067\174\001\002\000\014" +
    "\004\064\012\023\042\016\067\066\071\005\001\002\000" +
    "\050\002\ufff9\004\ufff9\012\ufff9\040\ufff9\041\ufff9\042\ufff9" +
    "\043\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9\051" +
    "\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9\067\ufff9\071\ufff9" +
    "\001\002\000\014\004\064\012\023\042\016\067\066\071" +
    "\005\001\002\000\026\004\115\010\116\012\107\017\112" +
    "\042\106\066\114\067\104\070\111\071\110\072\113\001" +
    "\002\000\026\004\115\010\116\012\107\017\112\042\106" +
    "\066\114\067\104\070\111\071\110\072\113\001\002\000" +
    "\050\002\ufffb\004\ufffb\012\ufffb\040\ufffb\041\ufffb\042\ufffb" +
    "\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051" +
    "\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb\067\ufffb\071\ufffb" +
    "\001\002\000\026\004\115\010\116\012\107\017\112\042" +
    "\106\066\114\067\104\070\111\071\110\072\113\001\002" +
    "\000\014\004\064\012\023\042\016\067\066\071\005\001" +
    "\002\000\056\002\uffe5\004\uffe5\006\042\012\uffe5\036\uffe5" +
    "\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045" +
    "\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5" +
    "\054\uffe5\055\uffe5\067\uffe5\071\uffe5\001\002\000\050\002" +
    "\uffc8\004\uffc8\012\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8" +
    "\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052" +
    "\uffc8\053\uffc8\054\uffc8\055\uffc8\067\uffc8\071\uffc8\001\002" +
    "\000\050\002\uffc9\004\uffc9\012\uffc9\040\uffc9\041\uffc9\042" +
    "\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9" +
    "\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9\067\uffc9\071" +
    "\uffc9\001\002\000\004\002\041\001\002\000\004\002\001" +
    "\001\002\000\004\012\043\001\002\000\016\004\046\066" +
    "\047\067\053\070\045\071\050\072\052\001\002\000\006" +
    "\006\uffdb\013\uffdb\001\002\000\006\006\uffd2\013\uffd2\001" +
    "\002\000\024\040\021\041\033\043\017\044\030\045\031" +
    "\046\062\047\063\055\061\067\057\001\002\000\006\006" +
    "\uffd3\013\uffd3\001\002\000\006\006\uffd4\013\uffd4\001\002" +
    "\000\006\006\054\013\055\001\002\000\006\006\uffd5\013" +
    "\uffd5\001\002\000\006\006\uffda\013\uffda\001\002\000\016" +
    "\004\046\066\047\067\053\070\045\071\050\072\052\001" +
    "\002\000\060\002\uffde\004\uffde\006\uffde\012\uffde\013\uffde" +
    "\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044" +
    "\uffde\045\uffde\046\uffde\047\uffde\050\uffde\051\uffde\052\uffde" +
    "\053\uffde\054\uffde\055\uffde\067\uffde\071\uffde\001\002\000" +
    "\006\006\uffdc\013\uffdc\001\002\000\004\014\103\001\002" +
    "\000\004\004\102\001\002\000\014\004\064\012\023\042" +
    "\016\067\066\071\005\001\002\000\014\004\064\012\023" +
    "\042\016\067\066\071\005\001\002\000\014\004\064\012" +
    "\023\042\016\067\066\071\005\001\002\000\036\040\021" +
    "\041\033\043\017\044\030\045\031\046\007\047\006\050" +
    "\010\051\025\052\022\053\027\054\034\055\014\067\057" +
    "\001\002\000\006\004\067\036\070\001\002\000\054\002" +
    "\uffe3\004\uffe3\012\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3" +
    "\042\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050" +
    "\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\067\uffe3" +
    "\071\uffe3\001\002\000\006\006\uffd8\013\uffd8\001\002\000" +
    "\014\004\064\012\023\042\016\067\066\071\005\001\002" +
    "\000\054\002\uffdf\004\uffdf\012\uffdf\036\uffdf\037\uffdf\040" +
    "\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf" +
    "\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055" +
    "\uffdf\067\uffdf\071\uffdf\001\002\000\004\004\075\001\002" +
    "\000\004\004\074\001\002\000\054\002\uffe2\004\uffe2\012" +
    "\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2" +
    "\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\052" +
    "\uffe2\053\uffe2\054\uffe2\055\uffe2\067\uffe2\071\uffe2\001\002" +
    "\000\054\002\uffe1\004\uffe1\012\uffe1\036\uffe1\037\uffe1\040" +
    "\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1" +
    "\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055" +
    "\uffe1\067\uffe1\071\uffe1\001\002\000\006\004\077\036\070" +
    "\001\002\000\006\006\uffd9\013\uffd9\001\002\000\006\004" +
    "\101\036\070\001\002\000\006\006\uffd7\013\uffd7\001\002" +
    "\000\006\006\uffd6\013\uffd6\001\002\000\030\004\115\010" +
    "\116\012\107\015\105\017\112\042\106\066\114\067\104" +
    "\070\111\071\110\072\113\001\002\000\100\002\uffab\004" +
    "\uffab\006\uffab\011\uffab\012\uffab\015\uffab\016\uffab\017\uffab" +
    "\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab\036\uffab\037" +
    "\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab" +
    "\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab\053\uffab\054" +
    "\uffab\055\uffab\067\uffab\071\uffab\001\002\000\050\002\uffc2" +
    "\004\uffc2\012\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044" +
    "\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2" +
    "\053\uffc2\054\uffc2\055\uffc2\067\uffc2\071\uffc2\001\002\000" +
    "\100\002\uffb0\004\uffb0\006\uffb0\011\uffb0\012\uffb0\015\uffb0" +
    "\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024" +
    "\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0" +
    "\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052" +
    "\uffb0\053\uffb0\054\uffb0\055\uffb0\067\uffb0\071\uffb0\001\002" +
    "\000\020\004\046\012\156\066\047\067\053\070\045\071" +
    "\050\072\052\001\002\000\100\002\uffac\004\uffac\006\uffac" +
    "\011\uffac\012\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021" +
    "\uffac\022\uffac\023\uffac\024\uffac\036\uffac\037\uffac\040\uffac" +
    "\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047" +
    "\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac" +
    "\067\uffac\071\uffac\001\002\000\100\002\uffae\004\uffae\006" +
    "\uffae\011\uffae\012\uffae\015\uffae\016\uffae\017\uffae\020\uffae" +
    "\021\uffae\022\uffae\023\uffae\024\uffae\036\uffae\037\uffae\040" +
    "\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae" +
    "\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055" +
    "\uffae\067\uffae\071\uffae\001\002\000\026\004\115\010\116" +
    "\012\107\017\112\042\106\066\114\067\104\070\111\071" +
    "\110\072\113\001\002\000\100\002\uffad\004\uffad\006\uffad" +
    "\011\uffad\012\uffad\015\uffad\016\uffad\017\uffad\020\uffad\021" +
    "\uffad\022\uffad\023\uffad\024\uffad\036\uffad\037\uffad\040\uffad" +
    "\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047" +
    "\uffad\050\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad" +
    "\067\uffad\071\uffad\001\002\000\100\002\uffaf\004\uffaf\006" +
    "\uffaf\011\uffaf\012\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf" +
    "\021\uffaf\022\uffaf\023\uffaf\024\uffaf\036\uffaf\037\uffaf\040" +
    "\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf" +
    "\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055" +
    "\uffaf\067\uffaf\071\uffaf\001\002\000\046\004\064\012\023" +
    "\040\021\041\033\042\016\043\017\044\030\045\031\046" +
    "\007\047\006\050\010\051\025\052\022\053\027\054\034" +
    "\055\014\067\147\071\005\001\002\000\026\004\115\010" +
    "\116\012\107\017\112\042\106\066\114\067\104\070\111" +
    "\071\110\072\113\001\002\000\026\006\uffbf\015\uffbf\016" +
    "\126\017\127\020\124\021\132\022\125\023\130\024\131" +
    "\036\133\001\002\000\006\006\122\015\121\001\002\000" +
    "\050\002\uffc1\004\uffc1\012\uffc1\040\uffc1\041\uffc1\042\uffc1" +
    "\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051" +
    "\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\067\uffc1\071\uffc1" +
    "\001\002\000\026\004\115\010\116\012\107\017\112\042" +
    "\106\066\114\067\104\070\111\071\110\072\113\001\002" +
    "\000\026\006\uffc0\015\uffc0\016\126\017\127\020\124\021" +
    "\132\022\125\023\130\024\131\036\133\001\002\000\026" +
    "\004\115\010\116\012\107\017\112\042\106\066\114\067" +
    "\104\070\111\071\110\072\113\001\002\000\026\004\115" +
    "\010\116\012\107\017\112\042\106\066\114\067\104\070" +
    "\111\071\110\072\113\001\002\000\026\004\115\010\116" +
    "\012\107\017\112\042\106\066\114\067\104\070\111\071" +
    "\110\072\113\001\002\000\026\004\115\010\116\012\107" +
    "\017\112\042\106\066\114\067\104\070\111\071\110\072" +
    "\113\001\002\000\026\004\115\010\116\012\107\017\112" +
    "\042\106\066\114\067\104\070\111\071\110\072\113\001" +
    "\002\000\026\004\115\010\116\012\107\017\112\042\106" +
    "\066\114\067\104\070\111\071\110\072\113\001\002\000" +
    "\026\004\115\010\116\012\107\017\112\042\106\066\114" +
    "\067\104\070\111\071\110\072\113\001\002\000\026\004" +
    "\115\010\116\012\107\017\112\042\106\066\114\067\104" +
    "\070\111\071\110\072\113\001\002\000\100\002\uffb4\004" +
    "\uffb4\006\uffb4\011\uffb4\012\uffb4\015\uffb4\016\126\017\127" +
    "\020\124\021\132\022\125\023\130\024\131\036\uffb4\037" +
    "\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4" +
    "\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054" +
    "\uffb4\055\uffb4\067\uffb4\071\uffb4\001\002\000\100\002\uffb8" +
    "\004\uffb8\006\uffb8\011\uffb8\012\uffb8\015\uffb8\016\uffb8\017" +
    "\uffb8\020\uffb8\021\uffb8\022\uffb8\023\130\024\131\036\uffb8" +
    "\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045" +
    "\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8" +
    "\054\uffb8\055\uffb8\067\uffb8\071\uffb8\001\002\000\100\002" +
    "\uffb7\004\uffb7\006\uffb7\011\uffb7\012\uffb7\015\uffb7\016\uffb7" +
    "\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\130\024\131\036" +
    "\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7" +
    "\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053" +
    "\uffb7\054\uffb7\055\uffb7\067\uffb7\071\uffb7\001\002\000\100" +
    "\002\uffb5\004\uffb5\006\uffb5\011\uffb5\012\uffb5\015\uffb5\016" +
    "\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\130\024\131" +
    "\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044" +
    "\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5" +
    "\053\uffb5\054\uffb5\055\uffb5\067\uffb5\071\uffb5\001\002\000" +
    "\100\002\uffba\004\uffba\006\uffba\011\uffba\012\uffba\015\uffba" +
    "\016\uffba\017\uffba\020\124\021\132\022\125\023\130\024" +
    "\131\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043\uffba" +
    "\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba\052" +
    "\uffba\053\uffba\054\uffba\055\uffba\067\uffba\071\uffba\001\002" +
    "\000\100\002\uffbb\004\uffbb\006\uffbb\011\uffbb\012\uffbb\015" +
    "\uffbb\016\uffbb\017\uffbb\020\124\021\132\022\125\023\130" +
    "\024\131\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043" +
    "\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb" +
    "\052\uffbb\053\uffbb\054\uffbb\055\uffbb\067\uffbb\071\uffbb\001" +
    "\002\000\100\002\uffb6\004\uffb6\006\uffb6\011\uffb6\012\uffb6" +
    "\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023" +
    "\130\024\131\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6" +
    "\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051" +
    "\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\067\uffb6\071\uffb6" +
    "\001\002\000\100\002\uffb9\004\uffb9\006\uffb9\011\uffb9\012" +
    "\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9" +
    "\023\130\024\131\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042" +
    "\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9" +
    "\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\067\uffb9\071" +
    "\uffb9\001\002\000\024\011\145\016\126\017\127\020\124" +
    "\021\132\022\125\023\130\024\131\036\133\001\002\000" +
    "\100\002\uffb2\004\uffb2\006\uffb2\011\uffb2\012\uffb2\015\uffb2" +
    "\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024" +
    "\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2" +
    "\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052" +
    "\uffb2\053\uffb2\054\uffb2\055\uffb2\067\uffb2\071\uffb2\001\002" +
    "\000\004\004\154\001\002\000\010\014\103\036\uffe3\037" +
    "\uffe3\001\002\000\004\004\153\001\002\000\004\004\152" +
    "\001\002\000\100\002\uffa9\004\uffa9\006\uffa9\011\uffa9\012" +
    "\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9" +
    "\023\uffa9\024\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042" +
    "\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9" +
    "\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\067\uffa9\071" +
    "\uffa9\001\002\000\100\002\uffaa\004\uffaa\006\uffaa\011\uffaa" +
    "\012\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022" +
    "\uffaa\023\uffaa\024\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa" +
    "\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050" +
    "\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa\067\uffaa" +
    "\071\uffaa\001\002\000\100\002\uffb1\004\uffb1\006\uffb1\011" +
    "\uffb1\012\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1" +
    "\022\uffb1\023\uffb1\024\uffb1\036\uffb1\037\uffb1\040\uffb1\041" +
    "\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1" +
    "\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\067" +
    "\uffb1\071\uffb1\001\002\000\100\002\uffb3\004\uffb3\006\uffb3" +
    "\011\uffb3\012\uffb3\015\uffb3\016\uffb3\017\uffb3\020\124\021" +
    "\132\022\125\023\130\024\131\036\uffb3\037\uffb3\040\uffb3" +
    "\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047" +
    "\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3" +
    "\067\uffb3\071\uffb3\001\002\000\016\004\046\066\047\067" +
    "\053\070\045\071\050\072\052\001\002\000\006\006\054" +
    "\013\162\001\002\000\006\006\042\013\161\001\002\000" +
    "\100\002\uffa7\004\uffa7\006\uffa7\011\uffa7\012\uffa7\015\uffa7" +
    "\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024" +
    "\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7" +
    "\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052" +
    "\uffa7\053\uffa7\054\uffa7\055\uffa7\067\uffa7\071\uffa7\001\002" +
    "\000\100\002\uffa8\004\uffa8\006\uffa8\011\uffa8\012\uffa8\015" +
    "\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8" +
    "\024\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043" +
    "\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8" +
    "\052\uffa8\053\uffa8\054\uffa8\055\uffa8\067\uffa8\071\uffa8\001" +
    "\002\000\006\006\054\013\164\001\002\000\060\002\uffdd" +
    "\004\uffdd\006\uffdd\012\uffdd\013\uffdd\036\uffdd\037\uffdd\040" +
    "\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd" +
    "\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055" +
    "\uffdd\067\uffdd\071\uffdd\001\002\000\052\002\uffcb\004\uffcb" +
    "\012\uffcb\036\070\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044" +
    "\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb" +
    "\053\uffcb\054\uffcb\055\uffcb\067\uffcb\071\uffcb\001\002\000" +
    "\070\002\uffc7\004\uffc7\012\uffc7\016\126\017\127\020\124" +
    "\021\132\022\125\023\130\024\131\036\133\040\uffc7\041" +
    "\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7" +
    "\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\067" +
    "\uffc7\071\uffc7\001\002\000\070\002\uffc3\004\uffc3\012\uffc3" +
    "\016\126\017\127\020\124\021\132\022\125\023\130\024" +
    "\131\036\133\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3" +
    "\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053" +
    "\uffc3\054\uffc3\055\uffc3\067\uffc3\071\uffc3\001\002\000\070" +
    "\002\uffc4\004\uffc4\012\uffc4\016\126\017\127\020\124\021" +
    "\132\022\125\023\130\024\131\036\133\040\uffc4\041\uffc4" +
    "\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050" +
    "\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\067\uffc4" +
    "\071\uffc4\001\002\000\052\002\uffcc\004\uffcc\012\uffcc\036" +
    "\070\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc" +
    "\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054" +
    "\uffcc\055\uffcc\067\uffcc\071\uffcc\001\002\000\052\002\uffce" +
    "\004\uffce\012\uffce\036\070\040\uffce\041\uffce\042\uffce\043" +
    "\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce" +
    "\052\uffce\053\uffce\054\uffce\055\uffce\067\uffce\071\uffce\001" +
    "\002\000\006\006\175\007\176\001\002\000\006\006\ufff6" +
    "\007\ufff6\001\002\000\004\067\340\001\002\000\010\004" +
    "\200\056\202\061\203\001\002\000\012\004\200\056\202" +
    "\061\203\063\337\001\002\000\050\004\064\012\023\035" +
    "\325\040\021\041\033\042\016\043\017\044\030\045\031" +
    "\046\007\047\006\050\010\051\025\052\022\053\027\054" +
    "\034\055\014\067\147\071\005\001\002\000\016\004\ufff4" +
    "\005\ufff4\056\ufff4\060\ufff4\061\ufff4\063\ufff4\001\002\000" +
    "\026\004\217\010\221\012\211\017\214\042\212\066\216" +
    "\067\206\070\213\071\210\072\215\001\002\000\026\004" +
    "\217\010\221\012\211\017\214\042\212\066\216\067\206" +
    "\070\213\071\210\072\215\001\002\000\016\004\ufff2\005" +
    "\ufff2\056\ufff2\060\ufff2\061\ufff2\063\ufff2\001\002\000\016" +
    "\004\ufff1\005\ufff1\056\ufff1\060\ufff1\061\ufff1\063\ufff1\001" +
    "\002\000\052\011\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c" +
    "\022\uff8c\023\uff8c\024\uff8c\025\uff8c\026\uff8c\027\uff8c\030" +
    "\uff8c\031\uff8c\032\uff8c\033\uff8c\034\uff8c\036\uff8c\057\uff8c" +
    "\066\uff8c\072\uff8c\001\002\000\052\011\uff9c\016\273\017" +
    "\274\020\271\021\277\022\272\023\275\024\276\025\uff9c" +
    "\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c\034" +
    "\uff9c\036\300\057\uff9c\066\uff9c\072\uff9c\001\002\000\052" +
    "\011\uff8d\016\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d\023" +
    "\uff8d\024\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d" +
    "\032\uff8d\033\uff8d\034\uff8d\036\uff8d\057\uff8d\066\uff8d\072" +
    "\uff8d\001\002\000\020\004\046\012\156\066\047\067\053" +
    "\070\045\071\050\072\052\001\002\000\052\011\uff91\016" +
    "\uff91\017\uff91\020\uff91\021\uff91\022\uff91\023\uff91\024\uff91" +
    "\025\uff91\026\uff91\027\uff91\030\uff91\031\uff91\032\uff91\033" +
    "\uff91\034\uff91\036\uff91\057\uff91\066\uff91\072\uff91\001\002" +
    "\000\052\011\uff8f\016\uff8f\017\uff8f\020\uff8f\021\uff8f\022" +
    "\uff8f\023\uff8f\024\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f" +
    "\031\uff8f\032\uff8f\033\uff8f\034\uff8f\036\uff8f\057\uff8f\066" +
    "\uff8f\072\uff8f\001\002\000\024\004\217\012\211\017\214" +
    "\042\212\066\216\067\206\070\213\071\210\072\215\001" +
    "\002\000\052\011\uff8e\016\uff8e\017\uff8e\020\uff8e\021\uff8e" +
    "\022\uff8e\023\uff8e\024\uff8e\025\uff8e\026\uff8e\027\uff8e\030" +
    "\uff8e\031\uff8e\032\uff8e\033\uff8e\034\uff8e\036\uff8e\057\uff8e" +
    "\066\uff8e\072\uff8e\001\002\000\052\011\uff90\016\uff90\017" +
    "\uff90\020\uff90\021\uff90\022\uff90\023\uff90\024\uff90\025\uff90" +
    "\026\uff90\027\uff90\030\uff90\031\uff90\032\uff90\033\uff90\034" +
    "\uff90\036\uff90\057\uff90\066\uff90\072\uff90\001\002\000\046" +
    "\004\064\012\023\040\021\041\033\042\016\043\017\044" +
    "\030\045\031\046\007\047\006\050\010\051\025\052\022" +
    "\053\027\054\034\055\014\067\147\071\005\001\002\000" +
    "\032\011\uffa4\025\uffa4\026\uffa4\027\250\030\251\031\252" +
    "\032\246\033\247\034\253\057\uffa4\066\uffa4\072\uffa4\001" +
    "\002\000\026\004\217\010\221\012\211\017\214\042\212" +
    "\066\216\067\206\070\213\071\210\072\215\001\002\000" +
    "\012\025\226\026\227\066\223\072\230\001\002\000\004" +
    "\062\241\001\002\000\010\063\240\066\223\072\230\001" +
    "\002\000\010\063\uffe9\066\uffe9\072\uffe9\001\002\000\026" +
    "\004\217\010\221\012\211\017\214\042\212\066\216\067" +
    "\206\070\213\071\210\072\215\001\002\000\026\004\217" +
    "\010\221\012\211\017\214\042\212\066\216\067\206\070" +
    "\213\071\210\072\215\001\002\000\004\062\231\001\002" +
    "\000\010\004\200\056\202\061\203\001\002\000\012\004" +
    "\200\005\233\056\202\061\203\001\002\000\010\063\uffe7" +
    "\066\uffe7\072\uffe7\001\002\000\016\004\ufff5\005\ufff5\056" +
    "\ufff5\060\ufff5\061\ufff5\063\ufff5\001\002\000\016\011\uffa6" +
    "\025\226\026\uffa6\057\uffa6\066\uffa6\072\uffa6\001\002\000" +
    "\016\011\uffa5\025\uffa5\026\uffa5\057\uffa5\066\uffa5\072\uffa5" +
    "\001\002\000\010\063\uffea\066\uffea\072\uffea\001\002\000" +
    "\016\004\uffeb\005\uffeb\056\uffeb\060\uffeb\061\uffeb\063\uffeb" +
    "\001\002\000\010\004\200\056\202\061\203\001\002\000" +
    "\012\004\200\005\243\056\202\061\203\001\002\000\010" +
    "\063\uffe8\066\uffe8\072\uffe8\001\002\000\010\011\245\025" +
    "\226\026\227\001\002\000\016\011\uffa3\025\uffa3\026\uffa3" +
    "\057\uffa3\066\uffa3\072\uffa3\001\002\000\024\004\217\012" +
    "\211\017\214\042\212\066\216\067\206\070\213\071\210" +
    "\072\215\001\002\000\024\004\217\012\211\017\214\042" +
    "\212\066\216\067\206\070\213\071\210\072\215\001\002" +
    "\000\024\004\217\012\211\017\214\042\212\066\216\067" +
    "\206\070\213\071\210\072\215\001\002\000\024\004\217" +
    "\012\211\017\214\042\212\066\216\067\206\070\213\071" +
    "\210\072\215\001\002\000\024\004\217\012\211\017\214" +
    "\042\212\066\216\067\206\070\213\071\210\072\215\001" +
    "\002\000\024\004\217\012\211\017\214\042\212\066\216" +
    "\067\206\070\213\071\210\072\215\001\002\000\032\011" +
    "\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d" +
    "\033\uff9d\034\uff9d\057\uff9d\066\uff9d\072\uff9d\001\002\000" +
    "\032\011\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1" +
    "\032\uffa1\033\uffa1\034\uffa1\057\uffa1\066\uffa1\072\uffa1\001" +
    "\002\000\032\011\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2" +
    "\031\uffa2\032\uffa2\033\uffa2\034\uffa2\057\uffa2\066\uffa2\072" +
    "\uffa2\001\002\000\032\011\uff9e\025\uff9e\026\uff9e\027\uff9e" +
    "\030\uff9e\031\uff9e\032\uff9e\033\uff9e\034\uff9e\057\uff9e\066" +
    "\uff9e\072\uff9e\001\002\000\032\011\uff9f\025\uff9f\026\uff9f" +
    "\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f\057" +
    "\uff9f\066\uff9f\072\uff9f\001\002\000\032\011\uffa0\025\uffa0" +
    "\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\034" +
    "\uffa0\057\uffa0\066\uffa0\072\uffa0\001\002\000\004\004\267" +
    "\001\002\000\004\004\266\001\002\000\004\004\265\001" +
    "\002\000\052\011\uff8a\016\uff8a\017\uff8a\020\uff8a\021\uff8a" +
    "\022\uff8a\023\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a\030" +
    "\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a\036\uff8a\057\uff8a" +
    "\066\uff8a\072\uff8a\001\002\000\052\011\uff8b\016\uff8b\017" +
    "\uff8b\020\uff8b\021\uff8b\022\uff8b\023\uff8b\024\uff8b\025\uff8b" +
    "\026\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b\033\uff8b\034" +
    "\uff8b\036\uff8b\057\uff8b\066\uff8b\072\uff8b\001\002\000\052" +
    "\011\uff92\016\uff92\017\uff92\020\uff92\021\uff92\022\uff92\023" +
    "\uff92\024\uff92\025\uff92\026\uff92\027\uff92\030\uff92\031\uff92" +
    "\032\uff92\033\uff92\034\uff92\036\uff92\057\uff92\066\uff92\072" +
    "\uff92\001\002\000\052\011\uff93\016\uff93\017\uff93\020\271" +
    "\021\277\022\272\023\275\024\276\025\uff93\026\uff93\027" +
    "\uff93\030\uff93\031\uff93\032\uff93\033\uff93\034\uff93\036\uff93" +
    "\057\uff93\066\uff93\072\uff93\001\002\000\024\004\217\012" +
    "\211\017\214\042\212\066\216\067\206\070\213\071\210" +
    "\072\215\001\002\000\024\004\217\012\211\017\214\042" +
    "\212\066\216\067\206\070\213\071\210\072\215\001\002" +
    "\000\024\004\217\012\211\017\214\042\212\066\216\067" +
    "\206\070\213\071\210\072\215\001\002\000\024\004\217" +
    "\012\211\017\214\042\212\066\216\067\206\070\213\071" +
    "\210\072\215\001\002\000\024\004\217\012\211\017\214" +
    "\042\212\066\216\067\206\070\213\071\210\072\215\001" +
    "\002\000\024\004\217\012\211\017\214\042\212\066\216" +
    "\067\206\070\213\071\210\072\215\001\002\000\024\004" +
    "\217\012\211\017\214\042\212\066\216\067\206\070\213" +
    "\071\210\072\215\001\002\000\024\004\217\012\211\017" +
    "\214\042\212\066\216\067\206\070\213\071\210\072\215" +
    "\001\002\000\052\011\uff94\016\273\017\274\020\271\021" +
    "\277\022\272\023\275\024\276\025\uff94\026\uff94\027\uff94" +
    "\030\uff94\031\uff94\032\uff94\033\uff94\034\uff94\036\uff94\057" +
    "\uff94\066\uff94\072\uff94\001\002\000\052\011\uff98\016\uff98" +
    "\017\uff98\020\uff98\021\uff98\022\uff98\023\275\024\276\025" +
    "\uff98\026\uff98\027\uff98\030\uff98\031\uff98\032\uff98\033\uff98" +
    "\034\uff98\036\uff98\057\uff98\066\uff98\072\uff98\001\002\000" +
    "\052\011\uff97\016\uff97\017\uff97\020\uff97\021\uff97\022\uff97" +
    "\023\275\024\276\025\uff97\026\uff97\027\uff97\030\uff97\031" +
    "\uff97\032\uff97\033\uff97\034\uff97\036\uff97\057\uff97\066\uff97" +
    "\072\uff97\001\002\000\052\011\uff95\016\uff95\017\uff95\020" +
    "\uff95\021\uff95\022\uff95\023\275\024\276\025\uff95\026\uff95" +
    "\027\uff95\030\uff95\031\uff95\032\uff95\033\uff95\034\uff95\036" +
    "\uff95\057\uff95\066\uff95\072\uff95\001\002\000\052\011\uff9a" +
    "\016\uff9a\017\uff9a\020\271\021\277\022\272\023\275\024" +
    "\276\025\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a" +
    "\033\uff9a\034\uff9a\036\uff9a\057\uff9a\066\uff9a\072\uff9a\001" +
    "\002\000\052\011\uff9b\016\uff9b\017\uff9b\020\271\021\277" +
    "\022\272\023\275\024\276\025\uff9b\026\uff9b\027\uff9b\030" +
    "\uff9b\031\uff9b\032\uff9b\033\uff9b\034\uff9b\036\uff9b\057\uff9b" +
    "\066\uff9b\072\uff9b\001\002\000\052\011\uff96\016\uff96\017" +
    "\uff96\020\uff96\021\uff96\022\uff96\023\275\024\276\025\uff96" +
    "\026\uff96\027\uff96\030\uff96\031\uff96\032\uff96\033\uff96\034" +
    "\uff96\036\uff96\057\uff96\066\uff96\072\uff96\001\002\000\052" +
    "\011\uff99\016\uff99\017\uff99\020\uff99\021\uff99\022\uff99\023" +
    "\275\024\276\025\uff99\026\uff99\027\uff99\030\uff99\031\uff99" +
    "\032\uff99\033\uff99\034\uff99\036\uff99\057\uff99\066\uff99\072" +
    "\uff99\001\002\000\006\006\054\013\314\001\002\000\006" +
    "\006\042\013\313\001\002\000\052\011\uff88\016\uff88\017" +
    "\uff88\020\uff88\021\uff88\022\uff88\023\uff88\024\uff88\025\uff88" +
    "\026\uff88\027\uff88\030\uff88\031\uff88\032\uff88\033\uff88\034" +
    "\uff88\036\uff88\057\uff88\066\uff88\072\uff88\001\002\000\052" +
    "\011\uff89\016\uff89\017\uff89\020\uff89\021\uff89\022\uff89\023" +
    "\uff89\024\uff89\025\uff89\026\uff89\027\uff89\030\uff89\031\uff89" +
    "\032\uff89\033\uff89\034\uff89\036\uff89\057\uff89\066\uff89\072" +
    "\uff89\001\002\000\010\025\226\026\227\057\316\001\002" +
    "\000\010\004\200\056\202\061\203\001\002\000\014\004" +
    "\200\056\202\060\320\061\203\063\321\001\002\000\010" +
    "\004\200\056\202\061\203\001\002\000\016\004\uffed\005" +
    "\uffed\056\uffed\060\uffed\061\uffed\063\uffed\001\002\000\012" +
    "\004\200\056\202\061\203\063\323\001\002\000\016\004" +
    "\uffec\005\uffec\056\uffec\060\uffec\061\uffec\063\uffec\001\002" +
    "\000\004\004\336\001\002\000\004\067\332\001\002\000" +
    "\004\004\331\001\002\000\004\004\330\001\002\000\016" +
    "\004\uffee\005\uffee\056\uffee\060\uffee\061\uffee\063\uffee\001" +
    "\002\000\016\004\uffef\005\uffef\056\uffef\060\uffef\061\uffef" +
    "\063\uffef\001\002\000\004\007\333\001\002\000\014\004" +
    "\064\012\023\042\016\067\066\071\005\001\002\000\006" +
    "\004\335\036\070\001\002\000\016\004\ufff0\005\ufff0\056" +
    "\ufff0\060\ufff0\061\ufff0\063\ufff0\001\002\000\016\004\ufff3" +
    "\005\ufff3\056\ufff3\060\ufff3\061\ufff3\063\ufff3\001\002\000" +
    "\050\002\ufff8\004\ufff8\012\ufff8\040\ufff8\041\ufff8\042\ufff8" +
    "\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8\051" +
    "\ufff8\052\ufff8\053\ufff8\054\ufff8\055\ufff8\067\ufff8\071\ufff8" +
    "\001\002\000\006\006\ufff7\007\ufff7\001\002\000\006\006" +
    "\042\013\342\001\002\000\054\002\uffe6\004\uffe6\012\uffe6" +
    "\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044" +
    "\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6" +
    "\053\uffe6\054\uffe6\055\uffe6\067\uffe6\071\uffe6\001\002\000" +
    "\052\002\uffcd\004\uffcd\012\uffcd\036\070\040\uffcd\041\uffcd" +
    "\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050" +
    "\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\067\uffcd" +
    "\071\uffcd\001\002\000\070\002\uffc6\004\uffc6\012\uffc6\016" +
    "\126\017\127\020\124\021\132\022\125\023\130\024\131" +
    "\036\133\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045" +
    "\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6" +
    "\054\uffc6\055\uffc6\067\uffc6\071\uffc6\001\002\000\050\002" +
    "\uffff\004\uffff\012\uffff\040\uffff\041\uffff\042\uffff\043\uffff" +
    "\044\uffff\045\uffff\046\uffff\047\uffff\050\uffff\051\uffff\052" +
    "\uffff\053\uffff\054\uffff\055\uffff\067\uffff\071\uffff\001\002" +
    "\000\070\002\uffc5\004\uffc5\012\uffc5\016\126\017\127\020" +
    "\124\021\132\022\125\023\130\024\131\036\133\040\uffc5" +
    "\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047" +
    "\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5" +
    "\067\uffc5\071\uffc5\001\002\000\052\002\uffca\004\uffca\012" +
    "\uffca\036\070\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca" +
    "\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052\uffca\053" +
    "\uffca\054\uffca\055\uffca\067\uffca\071\uffca\001\002\000\026" +
    "\004\115\010\116\012\107\017\112\042\106\066\114\067" +
    "\104\070\111\071\110\072\113\001\002\000\014\004\064" +
    "\012\023\042\016\067\066\071\005\001\002\000\054\002" +
    "\uffbc\004\uffbc\012\uffbc\036\uffdf\037\uffdf\040\uffbc\041\uffbc" +
    "\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050" +
    "\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\067\uffbc" +
    "\071\uffbc\001\002\000\072\002\uffbe\004\uffbe\012\uffbe\016" +
    "\126\017\127\020\124\021\132\022\125\023\130\024\131" +
    "\036\133\037\354\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044" +
    "\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe" +
    "\053\uffbe\054\uffbe\055\uffbe\067\uffbe\071\uffbe\001\002\000" +
    "\026\004\115\010\116\012\107\017\112\042\106\066\114" +
    "\067\104\070\111\071\110\072\113\001\002\000\070\002" +
    "\uffbd\004\uffbd\012\uffbd\016\126\017\127\020\124\021\132" +
    "\022\125\023\130\024\131\036\133\040\uffbd\041\uffbd\042" +
    "\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd" +
    "\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\067\uffbd\071" +
    "\uffbd\001\002\000\004\067\357\001\002\000\004\007\360" +
    "\001\002\000\014\004\064\012\023\042\016\067\066\071" +
    "\005\001\002\000\006\004\362\036\070\001\002\000\050" +
    "\002\ufffa\004\ufffa\012\ufffa\040\ufffa\041\ufffa\042\ufffa\043" +
    "\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa" +
    "\052\ufffa\053\ufffa\054\ufffa\055\ufffa\067\ufffa\071\ufffa\001" +
    "\002\000\052\002\uffcf\004\uffcf\012\uffcf\036\070\040\uffcf" +
    "\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047" +
    "\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf" +
    "\067\uffcf\071\uffcf\001\002\000\052\002\uffd1\004\uffd1\012" +
    "\uffd1\036\070\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1" +
    "\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053" +
    "\uffd1\054\uffd1\055\uffd1\067\uffd1\071\uffd1\001\002\000\052" +
    "\002\uffd0\004\uffd0\012\uffd0\036\070\040\uffd0\041\uffd0\042" +
    "\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0" +
    "\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\067\uffd0\071" +
    "\uffd0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\363\000\030\003\037\004\017\005\014\006\012\007" +
    "\003\011\031\027\011\030\025\034\036\035\035\036\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\364\036\034\001\001\000\006\027\363\036\034\001\001" +
    "\000\006\027\362\036\034\001\001\000\012\007\071\030" +
    "\072\034\036\035\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\027\346\036\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\345\001\001\000\024" +
    "\005\344\006\012\007\003\011\031\027\011\030\025\034" +
    "\036\035\035\036\034\001\001\000\004\020\343\001\001" +
    "\000\006\027\342\036\034\001\001\000\010\025\162\031" +
    "\043\036\340\001\001\000\004\013\172\001\001\000\006" +
    "\027\171\036\034\001\001\000\002\001\001\000\006\027" +
    "\170\036\034\001\001\000\004\020\167\001\001\000\004" +
    "\020\166\001\001\000\002\001\001\000\004\020\165\001" +
    "\001\000\006\027\164\036\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\025\050\031\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\057\034\036\035\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\077\036\034\001\001\000\006\027\075\036\034\001\001" +
    "\000\006\027\064\036\034\001\001\000\012\007\071\030" +
    "\072\034\036\035\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\027\070\036\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\116\026\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\025\156" +
    "\031\043\036\157\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\007\145\011\150\027\011\030\147\034" +
    "\036\035\035\036\034\001\001\000\004\020\143\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\122\001\001\000\002\001\001\000\004\020\142" +
    "\001\001\000\004\020\141\001\001\000\004\020\140\001" +
    "\001\000\004\020\137\001\001\000\004\020\136\001\001" +
    "\000\004\020\135\001\001\000\004\020\134\001\001\000" +
    "\004\020\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\025\162\031\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\014\176\015\200\016\203\017\204\001" +
    "\001\000\010\015\233\016\203\017\204\001\001\000\020" +
    "\007\323\011\326\027\011\030\325\034\036\035\035\036" +
    "\034\001\001\000\002\001\001\000\010\021\217\022\314" +
    "\037\206\001\001\000\010\021\217\022\221\037\206\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\025\310\031" +
    "\043\036\311\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\267\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\007\261\011\263\027\011\030\262\034\036" +
    "\035\035\036\034\001\001\000\002\001\001\000\010\021" +
    "\217\022\243\037\206\001\001\000\006\023\223\024\224" +
    "\001\001\000\002\001\001\000\004\024\236\001\001\000" +
    "\002\001\001\000\010\021\217\022\235\037\206\001\001" +
    "\000\010\021\217\022\234\037\206\001\001\000\002\001" +
    "\001\000\012\014\231\015\200\016\203\017\204\001\001" +
    "\000\010\015\233\016\203\017\204\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\014\241\015" +
    "\200\016\203\017\204\001\001\000\010\015\233\016\203" +
    "\017\204\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\260\037\206\001\001\000\006" +
    "\021\257\037\206\001\001\000\006\021\256\037\206\001" +
    "\001\000\006\021\255\037\206\001\001\000\006\021\254" +
    "\037\206\001\001\000\006\021\253\037\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\307\001\001\000\004\037\306\001\001\000\004" +
    "\037\305\001\001\000\004\037\304\001\001\000\004\037" +
    "\303\001\001\000\004\037\302\001\001\000\004\037\301" +
    "\001\001\000\004\037\300\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\014\316\015" +
    "\200\016\203\017\204\001\001\000\010\015\233\016\203" +
    "\017\204\001\001\000\012\014\321\015\200\016\203\017" +
    "\204\001\001\000\002\001\001\000\010\015\233\016\203" +
    "\017\204\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\333\036\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\352\001\001\000\006\027\351\036\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\354\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\027\360\036\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserV2$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserV2$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserV2$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




/**Metodo al que se llama automaticamente ante algun error sintactico.*/
public void syntax_error(Symbol s){
        System.out.println("Error en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
}
  

/**Metodo al que se llama en el momento en que ya no es posible una recuperaci�n de
errores.*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
javax.swing.JOptionPane.showMessageDialog(null,"Error Sintactico en la Linea " + (s.right+1)+ "Columna "+s.left+". Identificador " +
s.value + " no reconocido.");
 ManejadorErrores.getInstancia().agregarErrorHaskell(new Errores("Sintaxis no reconocida en el identificador " +s.value, "Sintactico", (s.left+1),(s.right+1),TablaSimbolosHaskell.getInstancia().getArchivo()));
}



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserV2$actions {


    // Espacio que servira para metodos en el lenguaje de java
    public ArrayList<Nodo> listaIds = new ArrayList<Nodo>();
 public ArrayList<Nodo> dimen = new ArrayList<Nodo>();
public ArrayList<Nodo> listaPar = new ArrayList<Nodo>();
public ArrayList<Nodo> listaCasos = new ArrayList<Nodo>();
public ArrayList<Nodo> listaValores = new ArrayList<Nodo>();

  private final ParserV2 parser;

  /** Constructor */
  CUP$ParserV2$actions(ParserV2 parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserV2$do_action(
    int                        CUP$ParserV2$act_num,
    java_cup.runtime.lr_parser CUP$ParserV2$parser,
    java.util.Stack            CUP$ParserV2$stack,
    int                        CUP$ParserV2$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserV2$result;

      /* select the action based on the action number */
      switch (CUP$ParserV2$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXP2 ::= aC DIME2 cC 
            {
              Nodo RESULT = null;
		int acleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		String ac = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int Vleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int Vright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		Nodo V = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		
                            Nodo E = new Nodo("EXP2");  
                              for (Nodo nodo1 : dimen) {
                                E.insertarNodo(nodo1);
                            }        
                            RESULT = E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(29/*EXP2*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXP2 ::= aC VALORES cC 
            {
              Nodo RESULT = null;
		int acleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		String ac = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int Vleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int Vright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		Nodo V = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXP2");
                                
                                for (Nodo nodo1 : listaValores) {
                                E.insertarNodo(nodo1);
                                }
                                RESULT = E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(29/*EXP2*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXP2 ::= dollar INDICELISTA dollar 
            {
              Nodo RESULT = null;
		int ILleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int ILright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		Nodo IL = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		Nodo E = new Nodo("EXP2"); E.insertarNodo(IL); RESULT = E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(29/*EXP2*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXP2 ::= dollar OPLISTAS dollar 
            {
              Nodo RESULT = null;
		int OLleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int OLright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		Nodo OL = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		Nodo E = new Nodo("EXP2"); E.insertarNodo(OL); RESULT = E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(29/*EXP2*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXP2 ::= id 
            {
              Nodo RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXP2");E.insertarNodo(new Nodo(id,"id",idleft,idright)); RESULT = E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(29/*EXP2*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXP2 ::= cadena 
            {
              Nodo RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXP2"); E.insertarNodo(new Nodo(c,"cadena",cleft,cright)); RESULT = E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(29/*EXP2*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXP2 ::= caracter 
            {
              Nodo RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXP2"); E.insertarNodo(new Nodo(c,"caracter",cleft,cright)); RESULT = E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(29/*EXP2*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXP2 ::= decimal 
            {
              Nodo RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXP2"); E.insertarNodo(new Nodo(d,"decimal",dleft,dright)); RESULT = E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(29/*EXP2*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXP2 ::= entero 
            {
              Nodo RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXP2"); E.insertarNodo(new Nodo(e,"entero",eleft,eright)); RESULT = E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(29/*EXP2*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXP2 ::= porcentaje 
            {
              Nodo RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXP2"); E.insertarNodo(new Nodo("%",pleft,pright)); RESULT = E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(29/*EXP2*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXP2 ::= dollar LLAMADAS dollar 
            {
              Nodo RESULT = null;
		int LLleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int LLright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		Nodo LL = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		Nodo E = new Nodo("EXP2"); E.insertarNodo(LL); RESULT = E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(29/*EXP2*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXP2 ::= menos EXP2 
            {
              Nodo RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXP2"); E.insertarNodo(new Nodo(o,oleft,oright)); E.insertarNodo(E1); RESULT=E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(29/*EXP2*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXP2 ::= EXP2 masMas EXP2 
            {
              Nodo RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo E2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXP2"); E.insertarNodo(E1); E.insertarNodo(new Nodo(o,oleft,oright));  E.insertarNodo(E2); RESULT=E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(29/*EXP2*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXP2 ::= EXP2 sqrt EXP2 
            {
              Nodo RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo E2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXP2"); E.insertarNodo(E1); E.insertarNodo(new Nodo(o,oleft,oright));  E.insertarNodo(E2); RESULT=E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(29/*EXP2*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXP2 ::= EXP2 mod EXP2 
            {
              Nodo RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo E2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXP2"); E.insertarNodo(E1); E.insertarNodo(new Nodo(o,oleft,oright));  E.insertarNodo(E2); RESULT=E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(29/*EXP2*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXP2 ::= EXP2 pot EXP2 
            {
              Nodo RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo E2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXP2"); E.insertarNodo(E1); E.insertarNodo(new Nodo(o,oleft,oright));  E.insertarNodo(E2); RESULT=E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(29/*EXP2*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXP2 ::= EXP2 div EXP2 
            {
              Nodo RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo E2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXP2"); E.insertarNodo(E1); E.insertarNodo(new Nodo(o,oleft,oright));  E.insertarNodo(E2); RESULT=E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(29/*EXP2*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXP2 ::= EXP2 por EXP2 
            {
              Nodo RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo E2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXP2"); E.insertarNodo(E1); E.insertarNodo(new Nodo(o,oleft,oright));  E.insertarNodo(E2); RESULT=E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(29/*EXP2*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXP2 ::= EXP2 menos EXP2 
            {
              Nodo RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo E2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXP2"); E.insertarNodo(E1); E.insertarNodo(new Nodo(o,oleft,oright));  E.insertarNodo(E2); RESULT=E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(29/*EXP2*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXP2 ::= EXP2 mas EXP2 
            {
              Nodo RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo E2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXP2"); E.insertarNodo(E1); E.insertarNodo(new Nodo(o,oleft,oright));  E.insertarNodo(E2); RESULT=E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(29/*EXP2*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPR ::= EXP2 
            {
              Nodo RESULT = null;
		int LLleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int LLright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo LL = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXPR"); E.insertarNodo(LL); RESULT = E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(15/*EXPR*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPR ::= EXPR diferente EXPR 
            {
              Nodo RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo E2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXPR"); E.insertarNodo(E1); E.insertarNodo(new Nodo(o,oleft,oright));  E.insertarNodo(E2); RESULT=E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(15/*EXPR*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPR ::= EXPR igualIgual EXPR 
            {
              Nodo RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo E2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXPR"); E.insertarNodo(E1); E.insertarNodo(new Nodo(o,oleft,oright));  E.insertarNodo(E2); RESULT=E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(15/*EXPR*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPR ::= EXPR mayorIgual EXPR 
            {
              Nodo RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo E2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXPR"); E.insertarNodo(E1); E.insertarNodo(new Nodo(o,oleft,oright));  E.insertarNodo(E2); RESULT=E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(15/*EXPR*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPR ::= EXPR menorIgual EXPR 
            {
              Nodo RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo E2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXPR"); E.insertarNodo(E1); E.insertarNodo(new Nodo(o,oleft,oright));  E.insertarNodo(E2); RESULT=E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(15/*EXPR*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPR ::= EXPR mayor EXPR 
            {
              Nodo RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo E2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXPR"); E.insertarNodo(E1); E.insertarNodo(new Nodo(o,oleft,oright));  E.insertarNodo(E2); RESULT=E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(15/*EXPR*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPR ::= EXPR menor EXPR 
            {
              Nodo RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo E2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXPR"); E.insertarNodo(E1); E.insertarNodo(new Nodo(o,oleft,oright));  E.insertarNodo(E2); RESULT=E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(15/*EXPR*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPL ::= aP EXPL cP 
            {
              Nodo RESULT = null;
		int apleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		String ap = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		String cp = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXPL");  E.insertarNodo(new Nodo(ap,apleft,apright));  E.insertarNodo(E1); E.insertarNodo(new Nodo(cp,cpleft,cpright));RESULT=E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(16/*EXPL*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPL ::= EXPR 
            {
              Nodo RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXPL"); E.insertarNodo(E1);RESULT=E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(16/*EXPL*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPL ::= EXPL and EXPL 
            {
              Nodo RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo E2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXPL"); E.insertarNodo(E1); E.insertarNodo(new Nodo(o,oleft,oright));  E.insertarNodo(E2); RESULT=E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(16/*EXPL*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPL ::= EXPL or EXPL 
            {
              Nodo RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo E2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXPL"); E.insertarNodo(E1); E.insertarNodo(new Nodo(o,oleft,oright));  E.insertarNodo(E2); RESULT=E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(16/*EXPL*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP ::= aC DIME2 cC 
            {
              Nodo RESULT = null;
		int acleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		String ac = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int Vleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int Vright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		Nodo V = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		
                            Nodo E = new Nodo("EXP");  
                              for (Nodo nodo1 : dimen) {
                                E.insertarNodo(nodo1);
                            }        
                            RESULT = E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(14/*EXP*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP ::= aC VALORES cC 
            {
              Nodo RESULT = null;
		int acleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		String ac = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int Vleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int Vright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		Nodo V = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXP");
                                
                                for (Nodo nodo1 : listaValores) {
                                E.insertarNodo(nodo1);
                                }
                                RESULT = E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(14/*EXP*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP ::= dollar INDICELISTA dollar 
            {
              Nodo RESULT = null;
		int ILleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int ILright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		Nodo IL = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		Nodo E = new Nodo("EXP"); E.insertarNodo(IL); RESULT = E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(14/*EXP*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP ::= dollar OPLISTAS dollar 
            {
              Nodo RESULT = null;
		int OLleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int OLright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		Nodo OL = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		Nodo E = new Nodo("EXP"); E.insertarNodo(OL); RESULT = E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(14/*EXP*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP ::= id 
            {
              Nodo RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXP");E.insertarNodo(new Nodo(id,"id",idleft,idright)); RESULT = E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(14/*EXP*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= cadena 
            {
              Nodo RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXP"); E.insertarNodo(new Nodo(c,"cadena",cleft,cright)); RESULT = E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(14/*EXP*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= caracter 
            {
              Nodo RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXP"); E.insertarNodo(new Nodo(c,"caracter",cleft,cright)); RESULT = E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(14/*EXP*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= decimal 
            {
              Nodo RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXP"); E.insertarNodo(new Nodo(d,"decimal",dleft,dright)); RESULT = E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(14/*EXP*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= entero 
            {
              Nodo RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXP"); E.insertarNodo(new Nodo(e,"entero",eleft,eright)); RESULT = E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(14/*EXP*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= porcentaje 
            {
              Nodo RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXP"); E.insertarNodo(new Nodo("%",pleft,pright)); RESULT = E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(14/*EXP*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= dollar LLAMADAS dollar 
            {
              Nodo RESULT = null;
		int LLleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int LLright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		Nodo LL = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		Nodo E = new Nodo("EXP"); E.insertarNodo(LL); RESULT = E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(14/*EXP*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP ::= aP EXP cP 
            {
              Nodo RESULT = null;
		int apleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		String ap = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		String cp = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXP");  E.insertarNodo(new Nodo(ap,apleft,apright));  E.insertarNodo(E1); E.insertarNodo(new Nodo(cp,cpleft,cpright));RESULT=E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(14/*EXP*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP ::= menos EXP 
            {
              Nodo RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXP"); E.insertarNodo(new Nodo(o,oleft,oright)); E.insertarNodo(E1); RESULT=E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(14/*EXP*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP ::= EXP masMas EXP 
            {
              Nodo RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo E2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXP"); E.insertarNodo(E1); E.insertarNodo(new Nodo(o,oleft,oright));  E.insertarNodo(E2); RESULT=E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(14/*EXP*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP ::= EXP sqrt EXP 
            {
              Nodo RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo E2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXP"); E.insertarNodo(E1); E.insertarNodo(new Nodo(o,oleft,oright));  E.insertarNodo(E2); RESULT=E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(14/*EXP*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXP ::= EXP mod EXP 
            {
              Nodo RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo E2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXP"); E.insertarNodo(E1); E.insertarNodo(new Nodo(o,oleft,oright));  E.insertarNodo(E2); RESULT=E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(14/*EXP*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXP ::= EXP pot EXP 
            {
              Nodo RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo E2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXP"); E.insertarNodo(E1); E.insertarNodo(new Nodo(o,oleft,oright));  E.insertarNodo(E2); RESULT=E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(14/*EXP*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP ::= EXP div EXP 
            {
              Nodo RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo E2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXP"); E.insertarNodo(E1); E.insertarNodo(new Nodo(o,oleft,oright));  E.insertarNodo(E2); RESULT=E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(14/*EXP*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP ::= EXP por EXP 
            {
              Nodo RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo E2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXP"); E.insertarNodo(E1); E.insertarNodo(new Nodo(o,oleft,oright));  E.insertarNodo(E2); RESULT=E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(14/*EXP*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP ::= EXP menos EXP 
            {
              Nodo RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo E2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXP"); E.insertarNodo(E1); E.insertarNodo(new Nodo(o,oleft,oright));  E.insertarNodo(E2); RESULT=E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(14/*EXP*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP ::= EXP mas EXP 
            {
              Nodo RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo E2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("EXP"); E.insertarNodo(E1); E.insertarNodo(new Nodo(o,oleft,oright));  E.insertarNodo(E2); RESULT=E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(14/*EXP*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // INDICELISTA ::= DIME masMas DIME 
            {
              Nodo RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		Nodo D1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int D2left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int D2right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo D2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo IDL = new Nodo("INDICELISTA"); IDL.insertarNodo(D1); IDL.insertarNodo(new Nodo(m,mleft,mright)); IDL.insertarNodo(D2); RESULT = IDL;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(7/*INDICELISTA*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // INDICELISTA ::= DIME indiceLista EXP indiceLista EXP 
            {
              Nodo RESULT = null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-4)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-4)).right;
		Nodo D = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-4)).value;
		int ilistleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-3)).left;
		int ilistright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-3)).right;
		String ilist = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-3)).value;
		int IL1left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int IL1right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		Nodo IL1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int ilist2left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int ilist2right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String ilist2 = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int IL2left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int IL2right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo IL2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo IDL = new Nodo("INDICELISTA"); IDL.insertarNodo(D); IDL.insertarNodo(new Nodo(ilist,ilistleft,ilistright)); IDL.insertarNodo(IL1); IDL.insertarNodo(new Nodo(ilist2,ilist2left,ilist2right)); IDL.insertarNodo(IL2); RESULT = IDL;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(7/*INDICELISTA*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // INDICELISTA ::= DIME indiceLista EXP 
            {
              Nodo RESULT = null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		Nodo D = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int ilistleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int ilistright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String ilist = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int ILleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int ILright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo IL = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo IDL = new Nodo("INDICELISTA"); IDL.insertarNodo(D); IDL.insertarNodo(new Nodo(ilist,ilistleft,ilistright)); IDL.insertarNodo(IL); RESULT = IDL;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(7/*INDICELISTA*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PARAMETROS ::= EXP 
            {
              Nodo RESULT = null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo E = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		listaPar.clear();
                            listaPar.add(E);
              CUP$ParserV2$result = new java_cup.runtime.Symbol(20/*PARAMETROS*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PARAMETROS ::= PARAMETROS coma EXP 
            {
              Nodo RESULT = null;
		int P1left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int P1right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		Nodo P1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo E = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		 listaPar.add(E);
              CUP$ParserV2$result = new java_cup.runtime.Symbol(20/*PARAMETROS*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LLAMARFUN ::= id aL PARAMETROS cL 
            {
              Nodo RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-3)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		String al = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		String cl = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		
                                               Nodo LLF = new Nodo("LLAMARFUN"); 
                                               LLF.insertarNodo(new Nodo(id,"id",idleft,idright));
                                               Nodo P2 = new Nodo("PARAMETROS");
                                               for (Nodo nodo1 : listaPar) {
                                                        P2.insertarNodo(nodo1);
                                                    }
                                               LLF.insertarNodo(P2);  
                                               RESULT = LLF;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(26/*LLAMARFUN*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LLAMARFUN ::= id aL cL 
            {
              Nodo RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String al = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		String cl = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo LLF = new Nodo("LLAMARFUN"); LLF.insertarNodo(new Nodo(id,"id",idleft,idright));RESULT = LLF;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(26/*LLAMARFUN*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LLAMADASNETAS ::= max EXP 
            {
              Nodo RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo E = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo LLN = new Nodo("LLAMADASNETAS"); LLN.insertarNodo(new Nodo(m,mleft,mright)); LLN.insertarNodo(E);RESULT = LLN;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(27/*LLAMADASNETAS*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LLAMADASNETAS ::= min EXP 
            {
              Nodo RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo E = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo LLN = new Nodo("LLAMADASNETAS"); LLN.insertarNodo(new Nodo(m,mleft,mright)); LLN.insertarNodo(E);RESULT = LLN;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(27/*LLAMADASNETAS*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LLAMADASNETAS ::= decc EXP 
            {
              Nodo RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo E = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo LLN = new Nodo("LLAMADASNETAS"); LLN.insertarNodo(new Nodo(d,dleft,dright)); LLN.insertarNodo(E);RESULT = LLN;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(27/*LLAMADASNETAS*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LLAMADASNETAS ::= succ EXP 
            {
              Nodo RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo E = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo LLN = new Nodo("LLAMADASNETAS"); LLN.insertarNodo(new Nodo(s,sleft,sright)); LLN.insertarNodo(E);RESULT = LLN;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(27/*LLAMADASNETAS*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LLAMADASNETAS ::= calcular EXP 
            {
              Nodo RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo E = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo LLN = new Nodo("LLAMADASNETAS"); LLN.insertarNodo(new Nodo(c,cleft,cright)); LLN.insertarNodo(E);RESULT = LLN;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(27/*LLAMADASNETAS*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LLAMADAS ::= LLAMADASNETAS 
            {
              Nodo RESULT = null;
		int LLNleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int LLNright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo LLN = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo LL = new Nodo("LLAMADAS"); LL.insertarNodo(LLN);RESULT = LL;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(5/*LLAMADAS*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LLAMADAS ::= LLAMARFUN 
            {
              Nodo RESULT = null;
		int LLFleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int LLFright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo LLF = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo LL = new Nodo("LLAMADAS"); LL.insertarNodo(LLF);RESULT = LL;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(5/*LLAMADAS*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPLISTAS ::= tamanio DIME 
            {
              Nodo RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo D = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo OL = new Nodo("OPLISTAS"); OL.insertarNodo(new Nodo(t,tleft,tright)); OL.insertarNodo(D);RESULT =OL;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(22/*OPLISTAS*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPLISTAS ::= desc DIME 
            {
              Nodo RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo D = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo OL = new Nodo("OPLISTAS"); OL.insertarNodo(new Nodo(d,dleft,dright)); OL.insertarNodo(D);RESULT =OL;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(22/*OPLISTAS*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPLISTAS ::= asc DIME 
            {
              Nodo RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo D = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo OL = new Nodo("OPLISTAS"); OL.insertarNodo(new Nodo(a,aleft,aright)); OL.insertarNodo(D);RESULT =OL;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(22/*OPLISTAS*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPLISTAS ::= par DIME 
            {
              Nodo RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo D = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo OL = new Nodo("OPLISTAS"); OL.insertarNodo(new Nodo(p,pleft,pright)); OL.insertarNodo(D);RESULT =OL;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(22/*OPLISTAS*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPLISTAS ::= impr DIME 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo D = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo OL = new Nodo("OPLISTAS"); OL.insertarNodo(new Nodo(i,ileft,iright)); OL.insertarNodo(D);RESULT =OL;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(22/*OPLISTAS*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPLISTAS ::= revers DIME 
            {
              Nodo RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo D = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo OL = new Nodo("OPLISTAS"); OL.insertarNodo(new Nodo(r,rleft,rright)); OL.insertarNodo(D);RESULT =OL;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(22/*OPLISTAS*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPLISTAS ::= product DIME 
            {
              Nodo RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo D = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo OL = new Nodo("OPLISTAS"); OL.insertarNodo(new Nodo(p,pleft,pright)); OL.insertarNodo(D);RESULT =OL;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(22/*OPLISTAS*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPLISTAS ::= sum DIME 
            {
              Nodo RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo D = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo OL = new Nodo("OPLISTAS"); OL.insertarNodo(new Nodo(s,sleft,sright)); OL.insertarNodo(D); RESULT =OL;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(22/*OPLISTAS*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LIST2 ::= decimal 
            {
              Nodo RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo L2 = new Nodo("LIST2"); L2.insertarNodo(new Nodo(c,"decimal",cleft,cright)); RESULT =L2; 
              CUP$ParserV2$result = new java_cup.runtime.Symbol(23/*LIST2*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LIST2 ::= entero 
            {
              Nodo RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo L2 = new Nodo("LIST2"); L2.insertarNodo(new Nodo(c,"entero",cleft,cright)); RESULT =L2; 
              CUP$ParserV2$result = new java_cup.runtime.Symbol(23/*LIST2*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LIST2 ::= cadena 
            {
              Nodo RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo L2 = new Nodo("LIST2"); L2.insertarNodo(new Nodo(c,"caracter",cleft,cright)); RESULT =L2; 
              CUP$ParserV2$result = new java_cup.runtime.Symbol(23/*LIST2*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LIST2 ::= caracter 
            {
              Nodo RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo L2 = new Nodo("LIST2"); L2.insertarNodo(new Nodo(c,"caracter",cleft,cright)); RESULT =L2; 
              CUP$ParserV2$result = new java_cup.runtime.Symbol(23/*LIST2*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LIST2 ::= dollar LLAMADAS dollar 
            {
              Nodo RESULT = null;
		int LLleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int LLright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		Nodo LL = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		Nodo L2 = new Nodo("LIST2"); L2.insertarNodo(LL); RESULT =L2; 
              CUP$ParserV2$result = new java_cup.runtime.Symbol(23/*LIST2*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LIST2 ::= dollar tamanio DIME dollar 
            {
              Nodo RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		Nodo D = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		Nodo L2 = new Nodo("LIST2"); L2.insertarNodo(new Nodo(t,tleft,tright)); L2.insertarNodo(D);  RESULT =L2;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(23/*LIST2*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LIST2 ::= dollar product DIME dollar 
            {
              Nodo RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		Nodo D = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		Nodo L2 = new Nodo("LIST2"); L2.insertarNodo(new Nodo(p,pleft,pright)); L2.insertarNodo(D); RESULT =L2; 
              CUP$ParserV2$result = new java_cup.runtime.Symbol(23/*LIST2*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LIST2 ::= dollar sum DIME dollar 
            {
              Nodo RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		Nodo D = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		Nodo L2 = new Nodo("LIST2"); L2.insertarNodo(new Nodo(s,sleft,sright)); L2.insertarNodo(D);  RESULT =L2;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(23/*LIST2*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LIST2 ::= id 
            {
              Nodo RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo L2 = new Nodo("LIST2"); L2.insertarNodo(new Nodo(id,"id",idleft,idright)); RESULT =L2;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(23/*LIST2*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VALORES ::= LIST2 
            {
              Nodo RESULT = null;
		int Lleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo L = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		
                    listaValores.clear();
                    listaValores.add(L);
                    
              CUP$ParserV2$result = new java_cup.runtime.Symbol(19/*VALORES*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VALORES ::= VALORES coma LIST2 
            {
              Nodo RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		Nodo V1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int Lleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo L = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		listaValores.add(L);
              CUP$ParserV2$result = new java_cup.runtime.Symbol(19/*VALORES*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DIME2 ::= aC VALORES cC 
            {
              Nodo RESULT = null;
		int Vleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int Vright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		Nodo V = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		
                            dimen.clear();
                           Nodo D = new Nodo("DIME2"); 
                           for (Nodo nodo1 : listaValores) {
                                D.insertarNodo(nodo1);
                           }
                            dimen.add(D);
              CUP$ParserV2$result = new java_cup.runtime.Symbol(28/*DIME2*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DIME2 ::= DIME2 coma aC VALORES cC 
            {
              Nodo RESULT = null;
		int D2left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-4)).left;
		int D2right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-4)).right;
		Nodo D2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-4)).value;
		int Vleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int Vright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		Nodo V = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		
                            Nodo D = new Nodo("DIME2");
                            for (Nodo nodo1 : listaValores) {
                                D.insertarNodo(nodo1);
                            }  
                            dimen.add(D); 
                            
              CUP$ParserV2$result = new java_cup.runtime.Symbol(28/*DIME2*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DIME ::= DIME masMas DIME 
            {
              Nodo RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		Nodo D1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int maleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int maright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		String ma = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int D2left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int D2right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo D2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo D = new Nodo("DIME"); D.insertarNodo(D1); D.insertarNodo(new Nodo("++",maleft,maright)); D.insertarNodo(D2); RESULT = D;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(21/*DIME*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DIME ::= porcentaje 
            {
              Nodo RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo E = new Nodo("DIME"); E.insertarNodo(new Nodo("%",pleft,pright)); RESULT = E;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(21/*DIME*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DIME ::= dollar LLAMADAS dollar 
            {
              Nodo RESULT = null;
		int LLleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int LLright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		Nodo LL = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		Nodo D = new Nodo("DIME"); D.insertarNodo(LL); RESULT = D;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(21/*DIME*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DIME ::= dollar OPLISTAS dollar 
            {
              Nodo RESULT = null;
		int OLleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int OLright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		Nodo OL = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		Nodo D = new Nodo("DIME"); D.insertarNodo(OL); RESULT = D;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(21/*DIME*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DIME ::= id 
            {
              Nodo RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo D = new Nodo("DIME"); D.insertarNodo(new Nodo(id,"id",idleft,idright)); RESULT = D;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(21/*DIME*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DIME ::= cadena 
            {
              Nodo RESULT = null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo D = new Nodo("DIME"); D.insertarNodo(new Nodo(cad,"cadena",cadleft,cadright)); RESULT = D;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(21/*DIME*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DIME ::= DIME2 
            {
              Nodo RESULT = null;
		int D2left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int D2right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo D2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		
                    
                    Nodo D = new Nodo("DIME"); 
                    for (Nodo nodo1 : dimen) {
                                D.insertarNodo(nodo1);
                    }    
                    RESULT = D;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(21/*DIME*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DIME ::= aC DIME2 cC 
            {
              Nodo RESULT = null;
		int Vleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int Vright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		Nodo V = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		
                    Nodo D = new Nodo("DIME"); 
                    for (Nodo nodo1 : dimen) {
                                D.insertarNodo(nodo1);
                    }  
                    RESULT = D;
                    
              CUP$ParserV2$result = new java_cup.runtime.Symbol(21/*DIME*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CASOS2 ::= caracter dosPuntos INS pC 
            {
              Nodo RESULT = null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-3)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-3)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-3)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		Nodo I = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		Nodo C = new Nodo("CASOS2"); C.insertarNodo(new Nodo(cad,"cadena",cadleft,cadright)); C.insertarNodo(I); RESULT = C;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(18/*CASOS2*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CASOS2 ::= entero dosPuntos INS pC 
            {
              Nodo RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-3)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		Nodo I = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		Nodo C = new Nodo("CASOS2"); C.insertarNodo(new Nodo(e,"entero",eleft,eright)); C.insertarNodo(I); RESULT = C;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(18/*CASOS2*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CASOS ::= CASOS2 
            {
              Nodo RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo C1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		
                    listaCasos.clear();
                    listaCasos.add(C1);
              CUP$ParserV2$result = new java_cup.runtime.Symbol(17/*CASOS*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CASOS ::= CASOS CASOS2 
            {
              Nodo RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		Nodo C1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo C2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		listaCasos.add(C2);
              CUP$ParserV2$result = new java_cup.runtime.Symbol(17/*CASOS*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CASE ::= caso EXPL CASOS fin 
            {
              Nodo RESULT = null;
		int casoleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-3)).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-3)).right;
		String caso = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-3)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		Nodo E = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int CASOSleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int CASOSright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		Nodo CASOS = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		
                                            Nodo C = new Nodo("CASE"); C.insertarNodo(new Nodo(caso,casoleft,casoright)); 
                                            C.insertarNodo(E); 
                                            
                                            Nodo CA = new Nodo("CASOS");
                                            for (Nodo nodo1 : listaCasos) {
                                              CA.insertarNodo(nodo1);
                                            }
                                            C.insertarNodo(CA); 
                                            RESULT = C;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(13/*CASE*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IF ::= si EXPL then INS sino INS fin 
            {
              Nodo RESULT = null;
		int sileft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-6)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-6)).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-6)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-5)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-5)).right;
		Nodo E = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-5)).value;
		int INSleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-3)).left;
		int INSright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-3)).right;
		Nodo INS = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-3)).value;
		int sinoleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int sinoright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		String sino = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int INS2left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int INS2right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		Nodo INS2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		Nodo I = new Nodo("IF"); I.insertarNodo(new Nodo("If",sileft,siright)); I.insertarNodo(E); I.insertarNodo(INS); I.insertarNodo(INS2); RESULT = I;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(12/*IF*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-6)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IF ::= si EXPL then INS fin 
            {
              Nodo RESULT = null;
		int sileft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-4)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-4)).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-4)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-3)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-3)).right;
		Nodo E = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-3)).value;
		int INSleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int INSright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		Nodo INS = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		Nodo I = new Nodo("IF"); I.insertarNodo(new Nodo("If",sileft,siright)); I.insertarNodo(E); I.insertarNodo(INS); RESULT = I;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(12/*IF*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCIONES ::= dollar INDICELISTA dollar 
            {
              Nodo RESULT = null;
		int ILleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int ILright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		Nodo IL = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		Nodo INS = new Nodo("INSTRUCCIONES"); INS.insertarNodo(IL); RESULT = INS;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(11/*INSTRUCCIONES*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCIONES ::= dollar OPLISTAS dollar 
            {
              Nodo RESULT = null;
		int OLleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int OLright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		Nodo OL = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		Nodo INS = new Nodo("INSTRUCCIONES"); INS.insertarNodo(OL); RESULT = INS;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(11/*INSTRUCCIONES*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCIONES ::= dollar let id asignacion DIME dollar 
            {
              Nodo RESULT = null;
		int letleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-4)).left;
		int letright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-4)).right;
		String let = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-3)).value;
		int DIMEleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int DIMEright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		Nodo DIME = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		Nodo INS = new Nodo("INSTRUCCIONES"); INS.insertarNodo(new Nodo("let",letleft,letright)); INS.insertarNodo(new Nodo(id,"id",idleft,idright)); INS.insertarNodo(DIME); RESULT = INS;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(11/*INSTRUCCIONES*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-5)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCIONES ::= CASE 
            {
              Nodo RESULT = null;
		int CASleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int CASright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo CAS = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo INS = new Nodo("INSTRUCCIONES"); INS.insertarNodo(CAS); RESULT = INS;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(11/*INSTRUCCIONES*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCIONES ::= IF 
            {
              Nodo RESULT = null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo I = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo INS = new Nodo("INSTRUCCIONES"); INS.insertarNodo(I); RESULT = INS;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(11/*INSTRUCCIONES*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCIONES ::= dollar LLAMADAS dollar 
            {
              Nodo RESULT = null;
		int LLleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int LLright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		Nodo LL = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		Nodo INS = new Nodo("INSTRUCCIONES"); INS.insertarNodo(LL); RESULT = INS;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(11/*INSTRUCCIONES*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INS ::= INSTRUCCIONES 
            {
              Nodo RESULT = null;
		int INS1left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int INS1right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo INS1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		
                        Nodo INS = new Nodo("INS");
                        INS.insertarNodo(INS1);
                            RESULT = INS;
                        
              CUP$ParserV2$result = new java_cup.runtime.Symbol(10/*INS*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INS ::= INS INSTRUCCIONES 
            {
              Nodo RESULT = null;
		int INS2left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int INS2right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		Nodo INS2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int INS3left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int INS3right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo INS3 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		
                            Nodo INS = new Nodo("INS");
                            INS.insertarNodo(INS2);
                            INS.insertarNodo(INS3);
                            RESULT = INS;
                          
              CUP$ParserV2$result = new java_cup.runtime.Symbol(10/*INS*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LISTAPARAMETROS ::= id 
            {
              Nodo RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		
                            /*Nodo LP = new Nodo("LISTAPARAMETROS"); 
                            LP.insertarNodo(new Nodo(id,"id",idleft,idright));*/
                            listaIds.clear();
                            listaIds.add(new Nodo(id,"id",idleft,idright));
                            
              CUP$ParserV2$result = new java_cup.runtime.Symbol(9/*LISTAPARAMETROS*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LISTAPARAMETROS ::= LISTAPARAMETROS coma id 
            {
              Nodo RESULT = null;
		int LP2left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left;
		int LP2right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).right;
		Nodo LP2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		
                                                       /* Nodo LP = new Nodo("LISTAPARAMETROS"); 
                                                        LP.insertarNodo(LP2);
                                                        LP.insertarNodo(new Nodo(i,"id",ileft,iright));
                                                        RESULT = LP;*/
                                                        listaIds.add(new Nodo(i,"id",ileft,iright));
                                                    
              CUP$ParserV2$result = new java_cup.runtime.Symbol(9/*LISTAPARAMETROS*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCIONES ::= id LISTAPARAMETROS asignacion INS fin 
            {
              Nodo RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-4)).value;
		int INSleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int INSright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		Nodo INS = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		
                                                    Nodo FUNCIONES = new Nodo("FUNCIONES");
                                                    FUNCIONES.insertarNodo(new Nodo(id,"id",idleft,idright));
                                                    Nodo LP =new Nodo("LISTAPARAMETROS");
                                                    for (Nodo nodo1 : listaIds) {
                                                        LP.insertarNodo(nodo1);
                                                    }
                                                    listaIds.clear();
                                                    FUNCIONES.insertarNodo(LP);
                                                    FUNCIONES.insertarNodo(INS);
                                                    RESULT = FUNCIONES;
                                                    
              CUP$ParserV2$result = new java_cup.runtime.Symbol(4/*FUNCIONES*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENT ::= OPLISTAS 
            {
              Nodo RESULT = null;
		int OLleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int OLright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo OL = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo INS = new Nodo("SENT"); INS.insertarNodo(OL); RESULT = INS;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(3/*SENT*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENT ::= dollar let id asignacion DIME dollar 
            {
              Nodo RESULT = null;
		int letleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-4)).left;
		int letright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-4)).right;
		String let = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-3)).value;
		int DIMEleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int DIMEright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		Nodo DIME = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		Nodo INS = new Nodo("SENT"); INS.insertarNodo(new Nodo("let",letleft,letright)); INS.insertarNodo(new Nodo(id,"id",idleft,idright)); INS.insertarNodo(DIME); RESULT = INS;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(3/*SENT*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-5)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENT ::= INDICELISTA 
            {
              Nodo RESULT = null;
		int ILleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int ILright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo IL = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo SENT = new Nodo("SENT"); SENT.insertarNodo(IL); RESULT = SENT;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(3/*SENT*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENT ::= LLAMADAS 
            {
              Nodo RESULT = null;
		int LLAleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int LLAright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo LLA = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo SENT = new Nodo("SENT"); SENT.insertarNodo(LLA); RESULT = SENT;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(3/*SENT*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENT ::= FUNCIONES 
            {
              Nodo RESULT = null;
		int FUNleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int FUNright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo FUN = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		Nodo SENT = new Nodo("SENT"); SENT.insertarNodo(FUN); RESULT = SENT;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(3/*SENT*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // I ::= SENT 
            {
              Nodo RESULT = null;
		int Sleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo S = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		
                Nodo I = new Nodo("I");
                I.insertarNodo(S);
                RESULT = I;
             
              CUP$ParserV2$result = new java_cup.runtime.Symbol(2/*I*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // I ::= I SENT 
            {
              Nodo RESULT = null;
		int I2left = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int I2right = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		Nodo I2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		int Sleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo S = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		
                    Nodo I = new Nodo("I"); 
                    I.insertarNodo(I2); 
                    I.insertarNodo(S);
                    RESULT = I;
                  
              CUP$ParserV2$result = new java_cup.runtime.Symbol(2/*I*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= I 
            {
              Nodo RESULT = null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right;
		Nodo I = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).value;
		javax.swing.JOptionPane.showMessageDialog(null,"todo bien");
            Nodo INICIO = new Nodo("INICIO");
            INICIO.insertarNodo(I);
            RESULT = INICIO;
            INICIO.graficarAst(I,"HASKELL");
            EjecucionHaskell eje = new EjecucionHaskell();
            eje.ejecucion(I);
            
              CUP$ParserV2$result = new java_cup.runtime.Symbol(1/*INICIO*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          return CUP$ParserV2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).value;
		RESULT = start_val;
              CUP$ParserV2$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserV2$stack.elementAt(CUP$ParserV2$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$ParserV2$parser.done_parsing();
          return CUP$ParserV2$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

