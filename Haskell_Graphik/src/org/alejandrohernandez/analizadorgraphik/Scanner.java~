/* The following code was generated by JFlex 1.6.1 */

package org.alejandrohernandez.analizadorgraphik;
import java_cup.runtime.Symbol;
import org.alejandrohernandez.beans.Errores;
import org.alejandrohernandez.manejadores.ManejadorErrores;
import org.alejandrohernandez.manejadores.TablaSimbolosGraphik;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/oscar/Desktop/Disk/USAC/2017/Primer Semestre/Compi 2/Proyecto1/Haskell_Graphik/src/org/alejandrohernandez/analizadorgraphik/LexicoGk.jflex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int COMENLINEA = 4;
  public static final int CARACTER = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\64\1\64\1\65\1\64\1\64\22\0\1\64\1\32\1\62"+
    "\1\0\1\31\1\0\1\27\1\63\1\14\1\15\1\24\1\22\1\11"+
    "\1\23\1\4\1\25\12\1\1\61\1\13\1\33\1\12\1\34\1\10"+
    "\1\0\1\47\1\37\1\43\1\50\1\52\1\60\1\5\1\56\1\42"+
    "\1\2\1\7\1\40\1\53\1\57\1\44\1\35\1\2\1\45\1\55"+
    "\1\51\1\36\1\46\4\2\1\16\1\0\1\17\1\26\1\3\1\0"+
    "\1\47\1\37\1\43\1\50\1\52\1\60\1\5\1\56\1\42\1\2"+
    "\1\7\1\40\1\53\1\57\1\44\1\35\1\2\1\45\1\55\1\51"+
    "\1\36\1\46\4\2\1\20\1\30\1\21\7\0\1\65\252\0\2\41"+
    "\115\0\1\54\u1ea8\0\1\65\1\65\u0100\0\1\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\3\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\3\1\1\24\1\25"+
    "\1\26\3\3\1\1\11\3\1\1\4\3\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\2\0\1\3\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\5\3\2\0\15\3\1\0\1\3\1\47\1\0\1\47"+
    "\5\3\1\50\1\0\2\3\1\0\5\3\3\0\6\3"+
    "\1\0\3\3\1\51\1\3\2\52\6\3\1\0\1\3"+
    "\2\0\6\3\1\53\2\3\1\0\3\3\1\54\1\55"+
    "\1\3\4\0\7\3\2\56\1\3\1\0\4\3\1\0"+
    "\4\3\1\0\1\3\1\57\1\0\1\57\4\3\1\0"+
    "\2\3\1\0\1\3\1\0\4\3\4\0\4\3\1\0"+
    "\4\3\2\60\1\3\1\61\2\62\1\0\2\3\1\0"+
    "\2\3\1\0\1\3\1\0\1\3\1\63\1\3\1\64"+
    "\2\65\1\0\1\3\1\0\1\3\1\0\1\3\1\0"+
    "\2\3\1\66\2\0\1\67\1\0\2\3\1\67\1\3"+
    "\1\0\2\3\1\70\4\3\1\0\2\3\1\0\1\3"+
    "\1\71\1\0\1\3\1\0\1\3\1\72\1\0\1\3"+
    "\2\73\2\74\1\0\1\3\1\0\2\3\3\0\3\3"+
    "\1\0\6\3\2\75\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\2\76\1\0\1\3\2\77"+
    "\1\100\1\101\1\0\1\100\1\101\1\3\1\0\1\3"+
    "\1\102\1\103\3\3\1\104\2\105\2\106\1\0\1\3"+
    "\1\0\1\3\2\107\1\0\1\3\2\110\1\111\1\112"+
    "\1\113\2\114\1\0\1\3\2\115\1\0\1\3\1\0"+
    "\1\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0"+
    "\1\3\2\116";

  private static int [] zzUnpackAction() {
    int [] result = new int[356];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\154\0\330\0\u010e\0\154"+
    "\0\u0144\0\154\0\154\0\u017a\0\154\0\154\0\154\0\154"+
    "\0\154\0\154\0\154\0\u01b0\0\u01e6\0\154\0\154\0\154"+
    "\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4\0\u032a\0\u0360\0\u0396"+
    "\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4\0\u04da\0\u0510\0\u0546"+
    "\0\u057c\0\u05b2\0\u05e8\0\u061e\0\u0654\0\u068a\0\u06c0\0\u06f6"+
    "\0\154\0\154\0\154\0\u072c\0\154\0\154\0\154\0\u0762"+
    "\0\u0798\0\u07ce\0\154\0\154\0\154\0\154\0\154\0\154"+
    "\0\154\0\154\0\154\0\u0804\0\u083a\0\u0870\0\u08a6\0\u08dc"+
    "\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c"+
    "\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c"+
    "\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\u0db6\0\u0dec"+
    "\0\u0e22\0\u0762\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66"+
    "\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116"+
    "\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6"+
    "\0\u010e\0\u12fc\0\154\0\u010e\0\u1332\0\u1368\0\u139e\0\u13d4"+
    "\0\u140a\0\u1440\0\u1476\0\u14ac\0\u14e2\0\u1518\0\u154e\0\u1584"+
    "\0\u15ba\0\u15f0\0\u1626\0\u165c\0\154\0\u1692\0\u16c8\0\u16fe"+
    "\0\u1734\0\u176a\0\u17a0\0\u010e\0\u010e\0\u17d6\0\u180c\0\u1842"+
    "\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc\0\u19f2"+
    "\0\u1a28\0\154\0\u010e\0\u1a5e\0\u1a94\0\u1aca\0\u1b00\0\u1b36"+
    "\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0\0\u1ce6"+
    "\0\154\0\u1d1c\0\u010e\0\u1d52\0\u1d88\0\u1dbe\0\u1df4\0\u1e2a"+
    "\0\u1e60\0\u1e96\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4\0\u1fda"+
    "\0\u2010\0\u2046\0\u207c\0\u20b2\0\u20e8\0\u211e\0\u2154\0\u218a"+
    "\0\u21c0\0\u21f6\0\u222c\0\u2262\0\u2298\0\u22ce\0\154\0\u010e"+
    "\0\u2304\0\u233a\0\154\0\u010e\0\u2370\0\u23a6\0\u23dc\0\u2412"+
    "\0\u2448\0\u247e\0\u24b4\0\u24ea\0\u2520\0\u2556\0\u010e\0\u258c"+
    "\0\u010e\0\154\0\u010e\0\u25c2\0\u25f8\0\u262e\0\u2664\0\u269a"+
    "\0\u26d0\0\u2706\0\u273c\0\u2772\0\u27a8\0\u27de\0\u2814\0\154"+
    "\0\u284a\0\u2880\0\u28b6\0\u010e\0\u28ec\0\u2922\0\u2958\0\u298e"+
    "\0\u010e\0\u29c4\0\u29fa\0\u2a30\0\u2a66\0\u2a9c\0\u2ad2\0\u2b08"+
    "\0\u2b3e\0\u2b74\0\u010e\0\u2baa\0\u2be0\0\u2c16\0\u2c4c\0\u010e"+
    "\0\u2c82\0\u2cb8\0\154\0\u010e\0\154\0\u010e\0\u2cee\0\u2d24"+
    "\0\u2d5a\0\u2d90\0\u2dc6\0\u2dfc\0\u2e32\0\u2e68\0\u2e9e\0\u2ed4"+
    "\0\u2f0a\0\u2f40\0\u2f76\0\u2fac\0\u2fe2\0\u3018\0\u304e\0\u3084"+
    "\0\154\0\u010e\0\u30ba\0\u30f0\0\u3126\0\u315c\0\u3192\0\u31c8"+
    "\0\u31fe\0\u3234\0\u326a\0\154\0\u010e\0\u32a0\0\u32d6\0\154"+
    "\0\u010e\0\154\0\154\0\u330c\0\u010e\0\u010e\0\u3342\0\u3378"+
    "\0\u33ae\0\u010e\0\u010e\0\u33e4\0\u341a\0\u3450\0\154\0\154"+
    "\0\u010e\0\154\0\u010e\0\u3486\0\u34bc\0\u34f2\0\u3528\0\154"+
    "\0\u010e\0\u355e\0\u3594\0\154\0\u010e\0\u010e\0\u010e\0\u010e"+
    "\0\154\0\u010e\0\u35ca\0\u3600\0\154\0\u010e\0\u3636\0\u366c"+
    "\0\u36a2\0\u36d8\0\u370e\0\u3744\0\u377a\0\u37b0\0\u37e6\0\u381c"+
    "\0\u3852\0\u3888\0\154\0\u010e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[356];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\5\1\10\1\11\1\5\1\7"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\7\1\40"+
    "\1\41\1\42\1\43\1\44\1\7\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\0\62\65\1\66"+
    "\3\65\66\0\63\65\1\67\2\65\1\0\1\6\2\0"+
    "\1\70\62\0\3\7\1\71\1\7\1\0\1\7\25\0"+
    "\4\7\1\0\12\7\1\0\4\7\6\0\3\7\1\71"+
    "\1\7\1\0\1\7\25\0\4\7\1\0\3\7\1\72"+
    "\6\7\1\0\4\7\17\0\1\73\75\0\1\74\66\0"+
    "\1\75\71\0\1\76\66\0\1\77\65\0\1\100\47\0"+
    "\1\101\65\0\1\102\65\0\1\103\54\0\3\7\1\71"+
    "\1\7\1\0\1\7\25\0\1\7\1\104\2\7\1\0"+
    "\3\7\1\105\1\7\1\106\4\7\1\0\4\7\6\0"+
    "\3\7\1\71\1\7\1\0\1\7\25\0\4\7\1\0"+
    "\2\7\1\107\7\7\1\0\4\7\6\0\3\7\1\71"+
    "\1\7\1\0\1\7\25\0\3\7\1\110\1\0\12\7"+
    "\1\0\4\7\60\0\1\111\3\0\1\112\7\0\3\7"+
    "\1\71\1\7\1\0\1\7\25\0\4\7\1\0\11\7"+
    "\1\113\1\0\2\7\1\114\1\7\6\0\3\7\1\71"+
    "\1\7\1\0\1\7\25\0\4\7\1\0\2\7\1\115"+
    "\2\7\1\116\4\7\1\0\4\7\6\0\3\7\1\71"+
    "\1\7\1\0\1\7\25\0\4\7\1\0\10\7\1\117"+
    "\1\7\1\0\4\7\6\0\3\7\1\71\1\7\1\0"+
    "\1\7\25\0\4\7\1\0\5\7\1\120\2\7\1\121"+
    "\1\7\1\0\4\7\6\0\3\7\1\71\1\7\1\0"+
    "\1\7\25\0\3\7\1\122\1\0\12\7\1\0\4\7"+
    "\6\0\3\7\1\71\1\7\1\0\1\7\25\0\4\7"+
    "\1\0\2\7\1\123\2\7\1\124\2\7\1\125\1\7"+
    "\1\0\4\7\6\0\3\7\1\71\1\7\1\0\1\7"+
    "\25\0\4\7\1\0\10\7\1\126\1\7\1\0\4\7"+
    "\6\0\3\7\1\71\1\7\1\0\1\7\25\0\4\7"+
    "\1\0\12\7\1\0\2\7\1\127\1\7\6\0\3\7"+
    "\1\71\1\7\1\0\1\7\25\0\4\7\1\130\1\131"+
    "\11\7\1\0\4\7\46\0\2\132\7\0\1\133\14\0"+
    "\3\7\1\71\1\7\1\0\1\7\25\0\4\7\1\132"+
    "\1\134\7\7\1\135\1\7\1\0\4\7\6\0\3\7"+
    "\1\71\1\7\1\0\1\7\25\0\4\7\1\0\5\7"+
    "\1\136\2\7\1\137\1\7\1\0\4\7\6\0\3\7"+
    "\1\71\1\7\1\0\1\7\25\0\1\7\1\140\2\7"+
    "\1\0\12\7\1\0\4\7\6\0\3\7\1\71\1\7"+
    "\1\0\1\7\25\0\4\7\1\0\5\7\1\141\4\7"+
    "\1\0\4\7\71\0\1\64\2\0\1\142\71\0\1\143"+
    "\61\0\3\7\1\71\1\7\1\0\1\7\25\0\4\7"+
    "\1\0\5\7\1\144\4\7\1\0\4\7\6\0\3\7"+
    "\1\71\1\7\1\0\1\7\25\0\2\7\1\145\1\7"+
    "\1\0\12\7\1\0\4\7\6\0\3\7\1\71\1\7"+
    "\1\0\1\7\25\0\4\7\1\146\1\147\1\7\1\150"+
    "\7\7\1\0\4\7\6\0\3\7\1\71\1\7\1\0"+
    "\1\7\25\0\4\7\1\0\3\7\1\151\6\7\1\0"+
    "\4\7\6\0\3\7\1\71\1\7\1\0\1\7\25\0"+
    "\4\7\1\0\2\7\1\152\7\7\1\0\4\7\6\0"+
    "\3\7\1\71\1\7\1\0\1\7\25\0\4\7\1\0"+
    "\5\7\1\153\4\7\1\0\4\7\42\0\1\154\71\0"+
    "\2\155\1\156\23\0\3\7\1\71\1\7\1\0\1\7"+
    "\25\0\1\157\3\7\1\0\12\7\1\0\4\7\6\0"+
    "\3\7\1\71\1\7\1\0\1\7\25\0\4\7\1\155"+
    "\1\160\1\161\10\7\1\0\4\7\6\0\3\7\1\71"+
    "\1\7\1\0\1\7\25\0\4\7\1\0\12\7\1\0"+
    "\2\7\1\162\1\7\6\0\3\7\1\71\1\7\1\0"+
    "\1\7\25\0\4\7\1\0\3\7\1\163\2\7\1\164"+
    "\3\7\1\165\1\166\3\7\6\0\3\7\1\71\1\7"+
    "\1\0\1\7\25\0\4\7\1\0\7\7\1\167\2\7"+
    "\1\0\4\7\6\0\3\7\1\71\1\7\1\0\1\7"+
    "\25\0\4\7\1\0\1\7\1\170\1\7\1\171\6\7"+
    "\1\0\4\7\6\0\3\7\1\71\1\7\1\0\1\7"+
    "\25\0\4\7\1\0\3\7\1\172\6\7\1\0\4\7"+
    "\6\0\3\7\1\71\1\7\1\0\1\7\25\0\4\7"+
    "\1\0\12\7\1\173\1\174\3\7\6\0\3\7\1\71"+
    "\1\7\1\0\1\7\25\0\4\7\1\0\12\7\1\0"+
    "\2\7\1\175\1\7\6\0\3\7\1\71\1\7\1\0"+
    "\1\7\25\0\4\7\1\0\7\7\1\176\2\7\1\0"+
    "\4\7\6\0\3\7\1\71\1\7\1\0\1\7\25\0"+
    "\4\7\1\0\1\7\1\177\10\7\1\0\3\7\1\200"+
    "\6\0\3\7\1\71\1\7\1\0\1\7\25\0\4\7"+
    "\1\0\3\7\1\201\6\7\1\0\4\7\6\0\3\7"+
    "\1\71\1\7\1\0\1\7\25\0\4\7\1\0\7\7"+
    "\1\202\2\7\1\0\4\7\57\0\1\203\14\0\3\7"+
    "\1\71\1\7\1\0\1\7\25\0\4\7\1\0\10\7"+
    "\1\204\1\7\1\0\4\7\64\0\1\205\46\0\1\206"+
    "\26\0\3\7\1\71\1\7\1\0\1\7\25\0\4\7"+
    "\1\0\12\7\1\0\2\7\1\207\1\7\6\0\3\7"+
    "\1\71\1\7\1\0\1\7\25\0\3\7\1\210\1\0"+
    "\12\7\1\0\4\7\6\0\3\7\1\71\1\7\1\0"+
    "\1\7\25\0\4\7\1\0\1\7\1\211\10\7\1\0"+
    "\4\7\6\0\3\7\1\71\1\7\1\0\1\7\25\0"+
    "\4\7\1\0\3\7\1\212\6\7\1\0\4\7\6\0"+
    "\3\7\1\71\1\7\1\0\1\7\25\0\4\7\1\0"+
    "\10\7\1\213\1\7\1\0\4\7\6\0\3\7\1\71"+
    "\1\7\1\0\1\7\25\0\3\7\1\214\1\0\12\7"+
    "\1\0\4\7\13\0\2\215\57\0\3\7\1\71\1\7"+
    "\1\0\1\7\25\0\1\216\3\7\1\0\12\7\1\0"+
    "\4\7\6\0\3\7\1\71\1\7\1\0\1\7\25\0"+
    "\3\7\1\217\1\0\12\7\1\0\4\7\53\0\1\220"+
    "\20\0\3\7\1\71\1\7\1\0\1\7\25\0\4\7"+
    "\1\0\4\7\1\221\5\7\1\0\4\7\6\0\3\7"+
    "\1\71\1\7\1\0\1\7\25\0\4\7\1\0\1\7"+
    "\1\222\5\7\1\223\2\7\1\0\4\7\6\0\3\7"+
    "\1\71\1\7\1\0\1\7\25\0\4\7\1\0\5\7"+
    "\1\224\4\7\1\0\4\7\6\0\3\7\1\71\1\7"+
    "\1\0\1\7\25\0\3\7\1\225\1\0\12\7\1\0"+
    "\4\7\6\0\3\7\1\71\1\7\1\0\1\7\25\0"+
    "\4\7\1\0\11\7\1\226\1\0\4\7\51\0\1\227"+
    "\1\230\63\0\1\231\62\0\1\232\26\0\3\7\1\71"+
    "\1\7\1\0\1\7\25\0\4\7\1\0\2\7\1\233"+
    "\1\234\6\7\1\0\4\7\6\0\3\7\1\71\1\7"+
    "\1\0\1\7\25\0\4\7\1\0\1\7\1\235\10\7"+
    "\1\0\4\7\6\0\3\7\1\71\1\7\1\0\1\7"+
    "\25\0\3\7\1\236\1\0\12\7\1\0\4\7\6\0"+
    "\3\7\1\71\1\7\1\0\1\7\25\0\4\7\1\0"+
    "\7\7\1\237\2\7\1\0\4\7\6\0\3\7\1\71"+
    "\1\7\1\0\1\7\25\0\4\7\1\0\5\7\1\240"+
    "\4\7\1\0\4\7\6\0\3\7\1\71\1\7\1\0"+
    "\1\7\25\0\4\7\1\0\10\7\1\241\1\7\1\0"+
    "\4\7\51\0\1\242\22\0\3\7\1\71\1\7\1\0"+
    "\1\7\25\0\4\7\1\0\2\7\1\243\7\7\1\0"+
    "\4\7\6\0\3\7\1\71\1\7\1\0\1\7\25\0"+
    "\4\7\1\0\2\7\1\244\7\7\1\0\4\7\6\0"+
    "\3\7\1\71\1\7\1\0\1\7\25\0\4\7\1\245"+
    "\1\246\11\7\1\0\4\7\6\0\3\7\1\71\1\7"+
    "\1\0\1\7\25\0\4\7\1\0\6\7\1\247\3\7"+
    "\1\0\4\7\6\0\3\7\1\71\1\7\1\0\1\7"+
    "\25\0\4\7\1\0\6\7\1\250\3\7\1\0\4\7"+
    "\6\0\3\7\1\71\1\7\1\0\1\7\25\0\4\7"+
    "\1\0\2\7\1\251\7\7\1\0\4\7\6\0\3\7"+
    "\1\71\1\7\1\0\1\7\25\0\4\7\1\252\1\253"+
    "\11\7\1\0\4\7\6\0\3\7\1\71\1\7\1\0"+
    "\1\7\25\0\4\7\1\0\10\7\1\254\1\7\1\0"+
    "\4\7\6\0\3\7\1\71\1\7\1\0\1\7\25\0"+
    "\4\7\1\0\11\7\1\255\1\0\4\7\6\0\3\7"+
    "\1\71\1\7\1\0\1\7\25\0\4\7\1\0\10\7"+
    "\1\256\1\7\1\0\4\7\64\0\1\257\7\0\3\7"+
    "\1\71\1\7\1\0\1\7\25\0\4\7\1\0\12\7"+
    "\1\0\2\7\1\260\1\7\51\0\1\261\73\0\1\262"+
    "\14\0\3\7\1\71\1\7\1\0\1\7\25\0\4\7"+
    "\1\0\2\7\1\263\7\7\1\0\4\7\6\0\3\7"+
    "\1\71\1\7\1\0\1\7\25\0\4\7\1\0\10\7"+
    "\1\264\1\7\1\0\4\7\6\0\3\7\1\71\1\7"+
    "\1\0\1\7\25\0\4\7\1\0\10\7\1\265\1\7"+
    "\1\0\4\7\6\0\3\7\1\71\1\7\1\0\1\7"+
    "\25\0\4\7\1\0\10\7\1\266\1\7\1\0\4\7"+
    "\6\0\3\7\1\71\1\7\1\0\1\7\25\0\4\7"+
    "\1\0\4\7\1\267\5\7\1\0\4\7\6\0\3\7"+
    "\1\71\1\7\1\0\1\7\25\0\4\7\1\0\12\7"+
    "\1\270\1\271\3\7\6\0\3\7\1\71\1\7\1\0"+
    "\1\7\25\0\4\7\1\0\12\7\1\0\1\7\1\272"+
    "\2\7\6\0\3\7\1\71\1\7\1\0\1\7\25\0"+
    "\4\7\1\273\1\274\11\7\1\0\4\7\54\0\1\275"+
    "\17\0\3\7\1\71\1\7\1\0\1\7\25\0\4\7"+
    "\1\0\5\7\1\276\4\7\1\0\4\7\6\0\3\7"+
    "\1\71\1\7\1\0\1\7\25\0\4\7\1\0\10\7"+
    "\1\277\1\7\1\0\4\7\6\0\3\7\1\71\1\7"+
    "\1\0\1\7\25\0\4\7\1\0\10\7\1\300\1\7"+
    "\1\0\4\7\6\0\3\7\1\71\1\7\1\0\1\7"+
    "\25\0\4\7\1\0\5\7\1\301\4\7\1\0\4\7"+
    "\52\0\1\302\61\0\2\303\64\0\2\304\61\0\1\305"+
    "\30\0\3\7\1\71\1\7\1\0\1\7\25\0\4\7"+
    "\1\0\3\7\1\306\6\7\1\0\4\7\6\0\3\7"+
    "\1\71\1\7\1\0\1\7\25\0\4\7\1\303\1\307"+
    "\11\7\1\0\4\7\6\0\3\7\1\71\1\7\1\0"+
    "\1\7\25\0\4\7\1\304\1\310\11\7\1\0\4\7"+
    "\6\0\3\7\1\71\1\7\1\0\1\7\25\0\1\7"+
    "\1\311\2\7\1\0\12\7\1\0\4\7\6\0\3\7"+
    "\1\71\1\7\1\0\1\7\25\0\4\7\1\312\1\313"+
    "\11\7\1\0\4\7\6\0\3\7\1\71\1\7\1\0"+
    "\1\7\25\0\4\7\1\0\1\7\1\314\10\7\1\0"+
    "\4\7\6\0\3\7\1\71\1\7\1\0\1\7\25\0"+
    "\4\7\1\0\12\7\1\0\2\7\1\315\1\7\6\0"+
    "\3\7\1\71\1\7\1\0\1\7\25\0\4\7\1\0"+
    "\3\7\1\316\6\7\1\0\4\7\51\0\1\317\22\0"+
    "\3\7\1\71\1\7\1\0\1\7\25\0\4\7\1\0"+
    "\2\7\1\320\7\7\1\0\4\7\6\0\3\7\1\71"+
    "\1\7\1\0\1\7\25\0\4\7\1\0\5\7\1\321"+
    "\4\7\1\0\4\7\6\0\3\7\1\71\1\7\1\0"+
    "\1\7\25\0\4\7\1\0\10\7\1\322\1\7\1\0"+
    "\4\7\6\0\3\7\1\71\1\7\1\0\1\7\25\0"+
    "\4\7\1\0\12\7\1\323\1\324\3\7\60\0\1\325"+
    "\13\0\3\7\1\71\1\7\1\0\1\7\25\0\4\7"+
    "\1\0\11\7\1\326\1\0\4\7\6\0\3\7\1\71"+
    "\1\7\1\0\1\7\25\0\4\7\1\0\1\7\1\327"+
    "\10\7\1\0\4\7\6\0\3\7\1\71\1\7\1\0"+
    "\1\7\25\0\4\7\1\330\1\331\11\7\1\0\4\7"+
    "\6\0\3\7\1\71\1\7\1\0\1\7\25\0\4\7"+
    "\1\0\3\7\1\332\6\7\1\0\4\7\56\0\1\333"+
    "\15\0\3\7\1\71\1\7\1\0\1\7\25\0\4\7"+
    "\1\0\7\7\1\334\2\7\1\0\4\7\50\0\1\335"+
    "\23\0\3\7\1\71\1\7\1\0\1\7\25\0\4\7"+
    "\1\0\1\7\1\336\10\7\1\0\4\7\6\0\3\7"+
    "\1\71\1\7\1\0\1\7\25\0\4\7\1\0\3\7"+
    "\1\337\6\7\1\0\4\7\6\0\3\7\1\71\1\7"+
    "\1\0\1\7\25\0\4\7\1\0\6\7\1\340\3\7"+
    "\1\0\4\7\6\0\3\7\1\71\1\7\1\0\1\7"+
    "\25\0\4\7\1\0\2\7\1\341\7\7\1\0\4\7"+
    "\51\0\1\342\22\0\3\7\1\71\1\7\1\0\1\7"+
    "\25\0\4\7\1\0\2\7\1\343\7\7\1\0\4\7"+
    "\6\0\3\7\1\71\1\7\1\0\1\7\25\0\4\7"+
    "\1\344\1\345\11\7\1\0\4\7\50\0\1\346\23\0"+
    "\3\7\1\71\1\7\1\0\1\7\25\0\4\7\1\0"+
    "\1\7\1\347\10\7\1\0\4\7\55\0\1\350\16\0"+
    "\3\7\1\71\1\7\1\0\1\7\25\0\4\7\1\0"+
    "\6\7\1\351\3\7\1\0\4\7\6\0\3\7\1\71"+
    "\1\7\1\0\1\7\25\0\4\7\1\0\12\7\1\352"+
    "\1\353\3\7\6\0\3\7\1\71\1\354\1\0\1\7"+
    "\25\0\4\7\1\0\12\7\1\0\4\7\6\0\3\7"+
    "\1\71\1\7\1\0\1\7\25\0\4\7\1\0\3\7"+
    "\1\355\6\7\1\0\4\7\56\0\1\356\67\0\1\357"+
    "\56\0\1\360\62\0\2\361\24\0\3\7\1\71\1\7"+
    "\1\0\1\7\25\0\4\7\1\0\7\7\1\362\2\7"+
    "\1\0\4\7\6\0\3\7\1\71\1\7\1\0\1\7"+
    "\25\0\4\7\1\0\11\7\1\363\1\0\4\7\6\0"+
    "\3\7\1\71\1\7\1\0\1\7\25\0\4\7\1\0"+
    "\2\7\1\364\7\7\1\0\4\7\6\0\3\7\1\71"+
    "\1\7\1\0\1\7\25\0\4\7\1\361\1\365\11\7"+
    "\1\0\4\7\64\0\1\366\7\0\3\7\1\71\1\7"+
    "\1\0\1\7\25\0\4\7\1\0\12\7\1\0\2\7"+
    "\1\367\1\7\6\0\3\7\1\71\1\7\1\0\1\7"+
    "\25\0\4\7\1\0\7\7\1\370\2\7\1\0\4\7"+
    "\6\0\3\7\1\71\1\7\1\0\1\7\25\0\4\7"+
    "\1\0\5\7\1\371\4\7\1\0\4\7\6\0\3\7"+
    "\1\71\1\7\1\0\1\7\25\0\4\7\1\0\12\7"+
    "\1\0\2\7\1\372\1\7\6\0\3\7\1\71\1\7"+
    "\1\0\1\7\25\0\4\7\1\0\6\7\1\373\3\7"+
    "\1\0\4\7\6\0\3\7\1\71\1\7\1\0\1\7"+
    "\25\0\4\7\1\0\1\7\1\374\5\7\1\375\2\7"+
    "\1\0\4\7\54\0\1\376\17\0\3\7\1\71\1\7"+
    "\1\0\1\7\25\0\4\7\1\0\5\7\1\377\4\7"+
    "\1\0\4\7\6\0\3\7\1\71\1\7\1\0\1\7"+
    "\25\0\4\7\1\0\7\7\1\u0100\2\7\1\0\4\7"+
    "\64\0\1\u0101\7\0\3\7\1\71\1\7\1\0\1\7"+
    "\25\0\4\7\1\0\12\7\1\0\2\7\1\u0102\1\7"+
    "\6\0\3\7\1\71\1\7\1\0\1\7\25\0\4\7"+
    "\1\0\2\7\1\u0103\7\7\1\0\4\7\52\0\1\u0104"+
    "\21\0\3\7\1\71\1\7\1\0\1\7\25\0\4\7"+
    "\1\0\3\7\1\u0105\6\7\1\0\4\7\50\0\1\u0106"+
    "\23\0\3\7\1\71\1\7\1\0\1\7\25\0\4\7"+
    "\1\0\1\7\1\u0107\10\7\1\0\4\7\6\0\3\7"+
    "\1\71\1\7\1\0\1\7\25\0\4\7\1\0\5\7"+
    "\1\u0108\4\7\1\0\4\7\13\0\2\u0109\57\0\3\7"+
    "\1\71\1\7\1\u0109\1\u010a\25\0\4\7\1\0\12\7"+
    "\1\0\4\7\51\0\1\u010b\22\0\3\7\1\71\1\7"+
    "\1\0\1\7\25\0\4\7\1\0\2\7\1\u010c\7\7"+
    "\1\0\4\7\51\0\1\u010d\22\0\3\7\1\71\1\7"+
    "\1\0\1\7\25\0\4\7\1\0\2\7\1\u010e\7\7"+
    "\1\0\4\7\54\0\1\u010f\17\0\3\7\1\71\1\7"+
    "\1\0\1\7\25\0\4\7\1\0\5\7\1\u0110\4\7"+
    "\1\0\4\7\6\0\3\7\1\71\1\7\1\0\1\7"+
    "\25\0\4\7\1\u0111\1\u0112\11\7\1\0\4\7\6\0"+
    "\3\7\1\71\1\7\1\0\1\7\25\0\4\7\1\0"+
    "\12\7\1\0\1\7\1\u0113\2\7\54\0\1\u0114\57\0"+
    "\2\u0115\70\0\1\u0116\21\0\3\7\1\71\1\7\1\0"+
    "\1\7\25\0\4\7\1\0\5\7\1\u0117\4\7\1\0"+
    "\4\7\6\0\3\7\1\71\1\7\1\0\1\7\25\0"+
    "\4\7\1\u0115\1\u0118\11\7\1\0\4\7\6\0\3\7"+
    "\1\71\1\7\1\0\1\7\25\0\4\7\1\0\3\7"+
    "\1\u0119\6\7\1\0\4\7\43\0\1\u011a\30\0\3\7"+
    "\1\71\1\7\1\0\1\7\25\0\1\7\1\u011b\2\7"+
    "\1\0\12\7\1\0\4\7\6\0\3\7\1\71\1\7"+
    "\1\0\1\7\25\0\4\7\1\0\10\7\1\u011c\1\7"+
    "\1\0\4\7\6\0\3\7\1\71\1\7\1\0\1\7"+
    "\25\0\4\7\1\0\5\7\1\u011d\4\7\1\0\4\7"+
    "\6\0\3\7\1\71\1\7\1\0\1\7\25\0\4\7"+
    "\1\0\10\7\1\u011e\1\7\1\0\4\7\6\0\3\7"+
    "\1\71\1\7\1\0\1\7\25\0\4\7\1\0\5\7"+
    "\1\u011f\4\7\1\0\4\7\6\0\3\7\1\71\1\7"+
    "\1\0\1\7\25\0\4\7\1\0\2\7\1\u0120\7\7"+
    "\1\0\4\7\45\0\1\u0121\26\0\3\7\1\71\1\7"+
    "\1\0\1\7\25\0\3\7\1\u0122\1\0\12\7\1\0"+
    "\4\7\6\0\3\7\1\71\1\7\1\0\1\7\25\0"+
    "\4\7\1\0\2\7\1\u0123\7\7\1\0\4\7\54\0"+
    "\1\u0124\17\0\3\7\1\71\1\7\1\0\1\7\25\0"+
    "\4\7\1\0\5\7\1\u0125\4\7\1\0\4\7\54\0"+
    "\1\u0126\17\0\3\7\1\71\1\7\1\0\1\7\25\0"+
    "\4\7\1\0\5\7\1\u0127\4\7\1\0\4\7\46\0"+
    "\2\u0128\24\0\3\7\1\71\1\7\1\0\1\7\25\0"+
    "\4\7\1\u0128\1\u0129\11\7\1\0\4\7\54\0\1\u012a"+
    "\17\0\3\7\1\71\1\7\1\0\1\7\25\0\4\7"+
    "\1\0\5\7\1\u012b\4\7\1\0\4\7\52\0\1\u012c"+
    "\21\0\3\7\1\71\1\7\1\0\1\7\25\0\4\7"+
    "\1\0\3\7\1\u012d\6\7\1\0\4\7\55\0\1\u012e"+
    "\16\0\3\7\1\71\1\7\1\0\1\7\25\0\4\7"+
    "\1\0\6\7\1\u012f\3\7\1\0\4\7\6\0\3\7"+
    "\1\71\1\7\1\u0130\1\u0131\25\0\4\7\1\0\12\7"+
    "\1\0\4\7\52\0\1\u0132\65\0\1\u0133\23\0\1\u0134"+
    "\63\0\3\7\1\71\1\7\1\0\1\7\25\0\4\7"+
    "\1\0\3\7\1\u0135\6\7\1\0\4\7\6\0\3\7"+
    "\1\71\1\7\1\0\1\7\25\0\4\7\1\0\3\7"+
    "\1\u0136\6\7\1\0\4\7\6\0\2\7\1\u0137\1\71"+
    "\1\7\1\0\1\7\25\0\4\7\1\0\12\7\1\0"+
    "\4\7\54\0\1\u0138\17\0\3\7\1\71\1\7\1\0"+
    "\1\7\25\0\4\7\1\0\5\7\1\u0139\4\7\1\0"+
    "\4\7\6\0\3\7\1\71\1\7\1\0\1\7\25\0"+
    "\4\7\1\0\3\7\1\u013a\6\7\1\0\4\7\6\0"+
    "\3\7\1\71\1\7\1\0\1\7\25\0\4\7\1\0"+
    "\3\7\1\u013b\6\7\1\0\4\7\6\0\3\7\1\71"+
    "\1\7\1\0\1\7\25\0\4\7\1\0\3\7\1\u013c"+
    "\6\7\1\0\4\7\6\0\3\7\1\71\1\7\1\0"+
    "\1\7\25\0\4\7\1\0\6\7\1\u013d\3\7\1\0"+
    "\4\7\6\0\3\7\1\71\1\7\1\0\1\7\25\0"+
    "\4\7\1\0\6\7\1\u013e\3\7\1\0\4\7\6\0"+
    "\3\7\1\71\1\7\1\0\1\7\25\0\4\7\1\0"+
    "\12\7\1\0\4\7\1\u013f\51\0\1\u0140\21\0\3\7"+
    "\1\71\1\7\1\0\1\7\25\0\4\7\1\0\3\7"+
    "\1\u0141\6\7\1\0\4\7\61\0\2\u0142\11\0\3\7"+
    "\1\71\1\7\1\0\1\7\25\0\4\7\1\0\12\7"+
    "\1\u0142\1\u0143\3\7\51\0\1\u0144\22\0\3\7\1\71"+
    "\1\7\1\0\1\7\25\0\4\7\1\0\2\7\1\u0145"+
    "\7\7\1\0\4\7\52\0\1\u0146\21\0\3\7\1\71"+
    "\1\7\1\0\1\7\25\0\4\7\1\0\3\7\1\u0147"+
    "\6\7\1\0\4\7\51\0\1\u0148\22\0\3\7\1\71"+
    "\1\7\1\0\1\7\25\0\4\7\1\0\2\7\1\u0149"+
    "\7\7\1\0\4\7\63\0\1\u014a\10\0\3\7\1\71"+
    "\1\7\1\0\1\7\25\0\4\7\1\0\12\7\1\0"+
    "\1\7\1\u014b\2\7\52\0\1\u014c\21\0\3\7\1\71"+
    "\1\7\1\0\1\7\25\0\4\7\1\0\3\7\1\u014d"+
    "\6\7\1\0\4\7\6\0\3\7\1\71\1\7\1\0"+
    "\1\7\25\0\4\7\1\0\2\7\1\u014e\7\7\1\0"+
    "\4\7\6\0\3\7\1\71\1\7\1\0\1\7\25\0"+
    "\4\7\1\0\5\7\1\u014f\4\7\1\0\4\7\6\0"+
    "\3\7\1\71\1\7\1\0\1\7\25\0\4\7\1\0"+
    "\2\7\1\u0150\7\7\1\0\4\7\64\0\1\u0151\7\0"+
    "\3\7\1\71\1\7\1\0\1\7\25\0\4\7\1\0"+
    "\12\7\1\0\2\7\1\u0152\1\7\10\0\1\u0153\63\0"+
    "\2\7\1\u0154\1\71\1\7\1\0\1\7\25\0\4\7"+
    "\1\0\12\7\1\0\4\7\13\0\2\u0155\57\0\3\7"+
    "\1\71\1\7\1\u0155\1\u0156\25\0\4\7\1\0\12\7"+
    "\1\0\4\7\65\0\1\u0157\6\0\3\7\1\71\1\7"+
    "\1\0\1\7\25\0\4\7\1\0\12\7\1\0\3\7"+
    "\1\u0158\43\0\1\u0159\30\0\3\7\1\71\1\7\1\0"+
    "\1\7\25\0\1\7\1\u015a\2\7\1\0\12\7\1\0"+
    "\4\7\64\0\1\u015b\7\0\3\7\1\71\1\7\1\0"+
    "\1\7\25\0\4\7\1\0\12\7\1\0\2\7\1\u015c"+
    "\1\7\50\0\1\u015d\23\0\3\7\1\71\1\7\1\0"+
    "\1\7\25\0\4\7\1\0\1\7\1\u015e\10\7\1\0"+
    "\4\7\46\0\2\u015f\24\0\3\7\1\71\1\7\1\0"+
    "\1\7\25\0\4\7\1\u015f\1\u0160\11\7\1\0\4\7"+
    "\51\0\1\u0161\22\0\3\7\1\71\1\7\1\0\1\7"+
    "\25\0\4\7\1\0\2\7\1\u0162\7\7\1\0\4\7"+
    "\64\0\1\u0163\7\0\3\7\1\71\1\7\1\0\1\7"+
    "\25\0\4\7\1\0\12\7\1\0\2\7\1\u0164\1\7"+
    "\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14526];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\10\1\0\1\11\2\1\1\11\1\1\2\11"+
    "\1\1\7\11\2\1\3\11\30\1\3\11\1\1\3\11"+
    "\2\0\1\1\11\11\5\1\2\0\15\1\1\0\2\1"+
    "\1\0\7\1\1\0\2\1\1\0\5\1\3\0\6\1"+
    "\1\0\5\1\1\11\7\1\1\0\1\1\2\0\6\1"+
    "\1\11\2\1\1\0\6\1\4\0\7\1\1\11\2\1"+
    "\1\0\4\1\1\0\4\1\1\0\1\1\1\11\1\0"+
    "\5\1\1\0\2\1\1\0\1\1\1\0\4\1\4\0"+
    "\4\1\1\0\4\1\1\11\3\1\1\11\1\1\1\0"+
    "\2\1\1\0\2\1\1\0\1\1\1\0\4\1\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\3\1\2\0\1\11\1\0\4\1\1\0\7\1\1\0"+
    "\2\1\1\0\2\1\1\0\1\1\1\0\2\1\1\0"+
    "\1\1\1\11\1\1\1\11\1\1\1\0\1\1\1\0"+
    "\2\1\3\0\3\1\1\0\6\1\1\11\2\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\1\1\0\1\1\1\11\1\1\2\11\1\0\3\1"+
    "\1\0\6\1\2\11\1\1\1\11\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\1\1\0\1\1\1\11\4\1"+
    "\1\11\1\1\1\0\1\1\1\11\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[356];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
//CODIGO EN JAVA
String cadena="";



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 228) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(simbolo.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { javax.swing.JOptionPane.showMessageDialog(null,"Error Lexico: " + yytext());
    //Errores error = new Errores(yytext(),"No pertenece al lenguaje",yycolumn+1, yyline+1, "Error lexico");
ManejadorErrores.getInstancia().agregarErrorGraphik(new Errores(yytext() +" no pertenece al lenguaje.", "Lexico", (yycolumn+1),(yyline+1),TablaSimbolosGraphik.getInstancia().getArchivo()));
javax.swing.JOptionPane.showMessageDialog(null,yytext() + "no pertenece" + (yycolumn+1) + "fila "+(yyline+1) );
            }
          case 79: break;
          case 2: 
            { return new Symbol(simbolo.entero, yychar, yyline, yytext());
            }
          case 80: break;
          case 3: 
            { return new Symbol(simbolo.id, yychar, yyline,yytext());
            }
          case 81: break;
          case 4: 
            { return new Symbol(simbolo.punto, yychar, yyline, yytext());
            }
          case 82: break;
          case 5: 
            { return new Symbol(simbolo.interrogacion, yychar, yyline, yytext());
            }
          case 83: break;
          case 6: 
            { return new Symbol(simbolo.coma, yychar, yyline, yytext());
            }
          case 84: break;
          case 7: 
            { return new Symbol(simbolo.asignacion, yychar, yyline, yytext());
            }
          case 85: break;
          case 8: 
            { return new Symbol(simbolo.pC, yychar, yyline, yytext());
            }
          case 86: break;
          case 9: 
            { return new Symbol(simbolo.aP, yychar, yyline, yytext());
            }
          case 87: break;
          case 10: 
            { return new Symbol(simbolo.cP, yychar, yyline, yytext());
            }
          case 88: break;
          case 11: 
            { return new Symbol(simbolo.aC, yychar, yyline, yytext());
            }
          case 89: break;
          case 12: 
            { return new Symbol(simbolo.cC, yychar, yyline, yytext());
            }
          case 90: break;
          case 13: 
            { return new Symbol(simbolo.aL, yychar, yyline, yytext());
            }
          case 91: break;
          case 14: 
            { return new Symbol(simbolo.cL, yychar, yyline, yytext());
            }
          case 92: break;
          case 15: 
            { return new Symbol(simbolo.mas, yychar, yyline, yytext());
            }
          case 93: break;
          case 16: 
            { return new Symbol(simbolo.menos, yychar, yyline, yytext());
            }
          case 94: break;
          case 17: 
            { return new Symbol(simbolo.por, yychar, yyline, yytext());
            }
          case 95: break;
          case 18: 
            { return new Symbol(simbolo.div, yychar, yyline, yytext());
            }
          case 96: break;
          case 19: 
            { return new Symbol(simbolo.pot, yychar, yyline, yytext());
            }
          case 97: break;
          case 20: 
            { return new Symbol(simbolo.not, yychar, yyline, yytext());
            }
          case 98: break;
          case 21: 
            { return new Symbol(simbolo.menor, yychar, yyline, yytext());
            }
          case 99: break;
          case 22: 
            { return new Symbol(simbolo.mayor, yychar, yyline, yytext());
            }
          case 100: break;
          case 23: 
            { return new Symbol(simbolo.dosPuntos, yychar, yyline, yytext());
            }
          case 101: break;
          case 24: 
            { yybegin(STRING);
            }
          case 102: break;
          case 25: 
            { yybegin(CARACTER);
            }
          case 103: break;
          case 26: 
            { /*Se ignoran*/
            }
          case 104: break;
          case 27: 
            { cadena +=yytext();
            }
          case 105: break;
          case 28: 
            { String temporal=cadena; cadena=""; yybegin(YYINITIAL); return new Symbol(simbolo.cadena, yychar, yyline, "\"" + temporal + "\"");
            }
          case 106: break;
          case 29: 
            { String temporal=cadena; cadena=""; yybegin(YYINITIAL); return new Symbol(simbolo.caracter, yychar, yyline, "'"+ temporal+"'");
            }
          case 107: break;
          case 30: 
            { return new Symbol(simbolo.igualIgual, yychar, yyline, yytext());
            }
          case 108: break;
          case 31: 
            { return new Symbol(simbolo.masMas, yychar, yyline, yytext());
            }
          case 109: break;
          case 32: 
            { return new Symbol(simbolo.menosMenos, yychar, yyline, yytext());
            }
          case 110: break;
          case 33: 
            { return new Symbol(simbolo.and, yychar, yyline, yytext());
            }
          case 111: break;
          case 34: 
            { return new Symbol(simbolo.or, yychar, yyline, yytext());
            }
          case 112: break;
          case 35: 
            { return new Symbol(simbolo.xor, yychar, yyline, yytext());
            }
          case 113: break;
          case 36: 
            { return new Symbol(simbolo.diferente, yychar, yyline, yytext());
            }
          case 114: break;
          case 37: 
            { return new Symbol(simbolo.menorIgual, yychar, yyline, yytext());
            }
          case 115: break;
          case 38: 
            { return new Symbol(simbolo.mayorIgual, yychar, yyline, yytext());
            }
          case 116: break;
          case 39: 
            { return new Symbol(simbolo.si, yychar, yyline, yytext());
            }
          case 117: break;
          case 40: 
            { return new Symbol(simbolo.decimal, yychar, yyline, yytext());
            }
          case 118: break;
          case 41: 
            { return new Symbol(simbolo.var, yychar, yyline, yytext());
            }
          case 119: break;
          case 42: 
            { return new Symbol(simbolo.als, yychar, yyline, yytext());
            }
          case 120: break;
          case 43: 
            { return new Symbol(simbolo.archivogk, yychar, yyline, yytext());
            }
          case 121: break;
          case 44: 
            { return new Symbol(simbolo.para, yychar, yyline, yytext());
            }
          case 122: break;
          case 45: 
            { return new Symbol(simbolo.tipoBool, yychar, yyline, yytext());
            }
          case 123: break;
          case 46: 
            { return new Symbol(simbolo.caso, yychar, yyline, yytext());
            }
          case 124: break;
          case 47: 
            { return new Symbol(simbolo.sino, yychar, yyline, yytext());
            }
          case 125: break;
          case 48: 
            { return new Symbol(simbolo.vacio, yychar, yyline, yytext());
            }
          case 126: break;
          case 49: 
            { return new Symbol(simbolo.donde, yychar, yyline, yytext());
            }
          case 127: break;
          case 50: 
            { return new Symbol(simbolo.datos, yychar, yyline, yytext());
            }
          case 128: break;
          case 51: 
            { return new Symbol(simbolo.hacer, yychar, yyline, yytext());
            }
          case 129: break;
          case 52: 
            { return new Symbol(simbolo.nuevo, yychar, yyline, yytext());
            }
          case 130: break;
          case 53: 
            { return new Symbol(simbolo.falso, yychar, yyline, yytext());
            }
          case 131: break;
          case 54: 
            { return new Symbol(simbolo.llamar, yychar, yyline, yytext());
            }
          case 132: break;
          case 55: 
            { return new Symbol(simbolo.inicio, yychar, yyline, yytext());
            }
          case 133: break;
          case 56: 
            { return new Symbol(simbolo.tipoCadena, yychar, yyline, yytext());
            }
          case 134: break;
          case 57: 
            { return new Symbol(simbolo.tipoEntero, yychar, yyline, yytext());
            }
          case 135: break;
          case 58: 
            { return new Symbol(simbolo.hereda, yychar, yyline, yytext());
            }
          case 136: break;
          case 59: 
            { return new Symbol(simbolo.publico, yychar, yyline, yytext());
            }
          case 137: break;
          case 60: 
            { return new Symbol(simbolo.privado, yychar, yyline, yytext());
            }
          case 138: break;
          case 61: 
            { return new Symbol(simbolo.tipoDecimal, yychar, yyline, yytext());
            }
          case 139: break;
          case 62: 
            { return new Symbol(simbolo.procesar, yychar, yyline, yytext());
            }
          case 140: break;
          case 63: 
            { return new Symbol(simbolo.llamarhk, yychar, yyline, yytext());
            }
          case 141: break;
          case 64: 
            { return new Symbol(simbolo.importar, yychar, yyline, yytext());
            }
          case 142: break;
          case 65: 
            { return new Symbol(simbolo.imprimir, yychar, yyline, yytext());
            }
          case 143: break;
          case 66: 
            { return new Symbol(simbolo.tipoCaracter, yychar, yyline, yytext());
            }
          case 144: break;
          case 67: 
            { return new Symbol(simbolo.retornar, yychar, yyline, yytext());
            }
          case 145: break;
          case 68: 
            { return new Symbol(simbolo.defecto, yychar, yyline, yytext());
            }
          case 146: break;
          case 69: 
            { return new Symbol(simbolo.terminar, yychar, yyline, yytext());
            }
          case 147: break;
          case 70: 
            { return new Symbol(simbolo.mientras, yychar, yyline, yytext());
            }
          case 148: break;
          case 71: 
            { return new Symbol(simbolo.protegido, yychar, yyline, yytext());
            }
          case 149: break;
          case 72: 
            { return new Symbol(simbolo.continuar, yychar, yyline, yytext());
            }
          case 150: break;
          case 73: 
            { return new Symbol(simbolo.verdadero, yychar, yyline, yytext());
            }
          case 151: break;
          case 74: 
            { return new Symbol(simbolo.dondecada, yychar, yyline, yytext());
            }
          case 152: break;
          case 75: 
            { return new Symbol(simbolo.dondetodo, yychar, yyline, yytext());
            }
          case 153: break;
          case 76: 
            { return new Symbol(simbolo.seleccion, yychar, yyline, yytext());
            }
          case 154: break;
          case 77: 
            { return new Symbol(simbolo.incluirhk, yychar, yyline, yytext());
            }
          case 155: break;
          case 78: 
            { return new Symbol(simbolo.graphikar, yychar, yyline, yytext());
            }
          case 156: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
