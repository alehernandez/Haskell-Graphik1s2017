
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sat Apr 01 23:42:22 CST 2017
//----------------------------------------------------

package org.alejandrohernandez.analizadorgraphik;

import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import java.lang.*;
import javax.swing.JOptionPane;
import java.io.*;
import org.alejandrohernandez.beans.Nodo;
import java.util.ArrayList;
import org.alejandrohernandez.beans.Errores;
import org.alejandrohernandez.manejadores.ManejadorErrores;
import org.alejandrohernandez.manejadores.TablaSimbolosGraphik;

/** CUP v0.10k generated parser.
  * @version Sat Apr 01 23:42:22 CST 2017
  */
public class ParserGk extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserGk() {super();}

  /** Constructor which sets the default scanner. */
  public ParserGk(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\252\000\002\002\004\000\002\003\004\000\002\003" +
    "\003\000\002\066\004\000\002\066\003\000\002\004\005" +
    "\000\002\004\005\000\002\005\004\000\002\005\003\000" +
    "\002\006\003\000\002\007\007\000\002\007\005\000\002" +
    "\007\007\000\002\007\011\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\012\011\000\002\012\013\000\002\012\011\000\002" +
    "\012\007\000\002\065\004\000\002\065\003\000\002\017" +
    "\004\000\002\017\003\000\002\017\004\000\002\017\004" +
    "\000\002\016\012\000\002\016\014\000\002\016\011\000" +
    "\002\016\013\000\002\016\012\000\002\016\014\000\002" +
    "\016\011\000\002\016\013\000\002\016\011\000\002\070" +
    "\003\000\002\070\003\000\002\020\006\000\002\020\004" +
    "\000\002\061\014\000\002\061\012\000\002\061\007\000" +
    "\002\061\005\000\002\014\004\000\002\014\003\000\002" +
    "\015\003\000\002\015\003\000\002\042\004\000\002\042" +
    "\004\000\002\042\004\000\002\042\004\000\002\042\004" +
    "\000\002\042\004\000\002\042\005\000\002\042\004\000" +
    "\002\026\006\000\002\026\006\000\002\026\006\000\002" +
    "\026\007\000\002\021\007\000\002\021\005\000\002\030" +
    "\005\000\002\030\003\000\002\023\004\000\002\031\005" +
    "\000\002\031\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\071\002\000\002\025\006\000\002\025\004\000\002\025" +
    "\004\000\002\072\002\000\002\025\007\000\002\032\011" +
    "\000\002\032\015\000\002\032\010\000\002\032\014\000" +
    "\002\032\014\000\002\033\011\000\002\033\014\000\002" +
    "\037\004\000\002\037\003\000\002\041\006\000\002\041" +
    "\006\000\002\034\015\000\002\045\006\000\002\045\005" +
    "\000\002\036\013\000\002\036\012\000\002\035\011\000" +
    "\002\035\010\000\002\056\004\000\002\056\003\000\002" +
    "\050\003\000\002\050\003\000\002\050\004\000\002\050" +
    "\004\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\051\003\000\002\052\011\000" +
    "\002\052\015\000\002\052\010\000\002\052\014\000\002" +
    "\052\014\000\002\053\011\000\002\053\014\000\002\054" +
    "\004\000\002\054\003\000\002\055\006\000\002\055\006" +
    "\000\002\024\010\000\002\024\006\000\002\024\012\000" +
    "\002\024\010\000\002\057\006\000\002\057\005\000\002" +
    "\057\005\000\002\057\004\000\002\073\002\000\002\060" +
    "\006\000\002\063\005\000\002\063\003\000\002\064\005" +
    "\000\002\064\003\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\004\000" +
    "\002\013\004\000\002\013\004\000\002\013\004\000\002" +
    "\013\004\000\002\013\005\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\062\005\000\002\062\003\000\002\067\006\000\002" +
    "\067\005\000\002\067\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0194\000\010\041\011\042\007\064\014\001\002\000" +
    "\004\002\u0196\001\002\000\006\002\ufff9\042\ufff9\001\002" +
    "\000\006\002\ufff8\042\ufff8\001\002\000\004\110\024\001" +
    "\002\000\010\041\011\042\007\064\014\001\002\000\004" +
    "\111\020\001\002\000\006\002\uffff\042\007\001\002\000" +
    "\010\041\ufffd\042\ufffd\064\ufffd\001\002\000\004\110\015" +
    "\001\002\000\004\004\016\001\002\000\010\041\ufffc\042" +
    "\ufffc\064\ufffc\001\002\000\006\002\ufffa\042\ufffa\001\002" +
    "\000\004\004\021\001\002\000\010\041\ufffb\042\ufffb\064" +
    "\ufffb\001\002\000\010\041\ufffe\042\ufffe\064\ufffe\001\002" +
    "\000\006\002\000\042\007\001\002\000\010\015\026\044" +
    "\025\105\027\001\002\000\004\110\u0192\001\002\000\022" +
    "\043\055\050\044\051\054\052\040\054\042\110\036\113" +
    "\046\114\043\001\002\000\010\036\033\037\031\040\030" +
    "\001\002\000\012\004\ufff2\010\ufff2\015\ufff2\044\ufff2\001" +
    "\002\000\012\004\ufff1\010\ufff1\015\ufff1\044\ufff1\001\002" +
    "\000\006\015\035\044\034\001\002\000\012\004\ufff3\010" +
    "\ufff3\015\ufff3\044\ufff3\001\002\000\004\110\u018c\001\002" +
    "\000\022\043\055\050\044\051\054\052\040\054\042\110" +
    "\036\113\046\114\043\001\002\000\004\110\uffd7\001\002" +
    "\000\024\016\uffe4\043\uffe4\050\uffe4\051\uffe4\052\uffe4\054" +
    "\uffe4\110\uffe4\113\uffe4\114\uffe4\001\002\000\004\110\uffef" +
    "\001\002\000\004\110\u0177\001\002\000\004\110\uffed\001" +
    "\002\000\004\110\uffec\001\002\000\006\063\u0171\110\uffd8" +
    "\001\002\000\004\004\u0170\001\002\000\004\110\uffee\001" +
    "\002\000\004\110\235\001\002\000\004\004\234\001\002" +
    "\000\004\004\233\001\002\000\024\016\uffe6\043\uffe6\050" +
    "\uffe6\051\uffe6\052\uffe6\054\uffe6\110\uffe6\113\uffe6\114\uffe6" +
    "\001\002\000\024\016\231\043\055\050\044\051\054\052" +
    "\040\054\042\110\036\113\046\114\043\001\002\000\004" +
    "\110\ufff0\001\002\000\016\051\054\052\040\054\042\110" +
    "\057\113\046\114\043\001\002\000\004\110\075\001\002" +
    "\000\004\110\060\001\002\000\010\004\uffd1\010\062\105" +
    "\061\001\002\000\010\036\033\037\031\040\030\001\002" +
    "\000\004\045\063\001\002\000\004\110\064\001\002\000" +
    "\004\011\065\001\002\000\004\012\066\001\002\000\004" +
    "\004\uffd3\001\002\000\006\004\uffd2\010\070\001\002\000" +
    "\004\045\071\001\002\000\004\110\072\001\002\000\004" +
    "\011\073\001\002\000\004\012\074\001\002\000\004\004" +
    "\uffd4\001\002\000\012\004\ufff6\010\101\013\076\105\100" +
    "\001\002\000\032\011\115\014\226\020\111\027\103\046" +
    "\112\047\110\053\113\062\106\106\114\107\107\110\102" +
    "\112\105\001\002\000\012\004\uff85\010\206\013\125\105" +
    "\205\001\002\000\010\036\033\037\031\040\030\001\002" +
    "\000\030\011\115\020\111\027\103\046\112\047\110\053" +
    "\113\062\106\106\114\107\107\110\102\112\105\001\002" +
    "\000\066\004\uff58\006\uff58\007\uff58\010\uff58\011\173\012" +
    "\uff58\013\uff58\014\uff58\016\uff58\017\uff58\020\uff58\021\uff58" +
    "\022\uff58\023\uff58\024\uff58\025\uff58\026\uff58\030\uff58\031" +
    "\uff58\032\uff58\033\uff58\034\uff58\035\uff58\057\uff58\060\uff58" +
    "\105\uff58\001\002\000\030\011\115\020\111\027\103\046" +
    "\112\047\110\053\113\062\106\106\114\107\107\110\102" +
    "\112\105\001\002\000\052\004\uff60\006\uff60\012\uff60\014" +
    "\uff60\016\uff60\017\uff60\020\uff60\021\uff60\022\uff60\023\uff60" +
    "\024\uff60\025\uff60\026\uff60\030\uff60\031\uff60\032\uff60\033" +
    "\uff60\034\uff60\035\uff60\105\uff60\001\002\000\052\004\uff61" +
    "\006\uff61\012\uff61\014\uff61\016\uff61\017\uff61\020\uff61\021" +
    "\uff61\022\uff61\023\uff61\024\uff61\025\uff61\026\uff61\030\uff61" +
    "\031\uff61\032\uff61\033\uff61\034\uff61\035\uff61\105\uff61\001" +
    "\002\000\004\110\102\001\002\000\052\004\uff63\006\uff63" +
    "\012\uff63\014\uff63\016\uff63\017\uff63\020\uff63\021\uff63\022" +
    "\uff63\023\uff63\024\uff63\025\uff63\026\uff63\030\uff63\031\uff63" +
    "\032\uff63\033\uff63\034\uff63\035\uff63\105\uff63\001\002\000" +
    "\052\004\uff5e\006\uff5e\012\uff5e\014\uff5e\016\uff5e\017\uff5e" +
    "\020\uff5e\021\uff5e\022\uff5e\023\uff5e\024\uff5e\025\uff5e\026" +
    "\uff5e\030\uff5e\031\uff5e\032\uff5e\033\uff5e\034\uff5e\035\uff5e" +
    "\105\uff5e\001\002\000\030\011\115\020\111\027\103\046" +
    "\112\047\110\053\113\062\106\106\114\107\107\110\102" +
    "\112\105\001\002\000\052\004\uff5d\006\uff5d\012\uff5d\014" +
    "\uff5d\016\uff5d\017\uff5d\020\uff5d\021\uff5d\022\uff5d\023\uff5d" +
    "\024\uff5d\025\uff5d\026\uff5d\030\uff5d\031\uff5d\032\uff5d\033" +
    "\uff5d\034\uff5d\035\uff5d\105\uff5d\001\002\000\052\004\uff62" +
    "\006\uff62\012\uff62\014\uff62\016\uff62\017\uff62\020\uff62\021" +
    "\uff62\022\uff62\023\uff62\024\uff62\025\uff62\026\uff62\030\uff62" +
    "\031\uff62\032\uff62\033\uff62\034\uff62\035\uff62\105\uff62\001" +
    "\002\000\052\004\uff64\006\uff64\012\uff64\014\uff64\016\uff64" +
    "\017\uff64\020\uff64\021\uff64\022\uff64\023\uff64\024\uff64\025" +
    "\uff64\026\uff64\030\uff64\031\uff64\032\uff64\033\uff64\034\uff64" +
    "\035\uff64\105\uff64\001\002\000\030\011\115\020\111\027" +
    "\103\046\112\047\110\053\113\062\106\106\114\107\107" +
    "\110\102\112\105\001\002\000\064\004\uff5b\006\uff5b\007" +
    "\uff5b\010\uff5b\012\uff5b\013\uff5b\014\uff5b\016\uff5b\017\uff5b" +
    "\020\uff5b\021\uff5b\022\uff5b\023\uff5b\024\uff5b\025\uff5b\026" +
    "\uff5b\030\uff5b\031\uff5b\032\uff5b\033\uff5b\034\uff5b\035\uff5b" +
    "\057\uff5b\060\uff5b\105\uff5b\001\002\000\040\004\ufff7\017" +
    "\146\020\134\021\144\022\130\023\143\024\135\025\133" +
    "\026\136\030\132\031\137\032\145\033\141\034\131\035" +
    "\140\001\002\000\062\004\uff5f\006\uff5f\007\121\012\uff5f" +
    "\013\076\014\uff5f\016\uff5f\017\uff5f\020\uff5f\021\uff5f\022" +
    "\uff5f\023\uff5f\024\uff5f\025\uff5f\026\uff5f\030\uff5f\031\uff5f" +
    "\032\uff5f\033\uff5f\034\uff5f\035\uff5f\057\124\060\122\105" +
    "\uff5f\001\002\000\004\110\102\001\002\000\052\004\uff68" +
    "\006\uff68\012\uff68\014\uff68\016\uff68\017\uff68\020\uff68\021" +
    "\uff68\022\uff68\023\uff68\024\uff68\025\uff68\026\uff68\030\uff68" +
    "\031\uff68\032\uff68\033\uff68\034\uff68\035\uff68\105\uff68\001" +
    "\002\000\054\004\uff67\006\uff67\012\uff67\013\125\014\uff67" +
    "\016\uff67\017\uff67\020\uff67\021\uff67\022\uff67\023\uff67\024" +
    "\uff67\025\uff67\026\uff67\030\uff67\031\uff67\032\uff67\033\uff67" +
    "\034\uff67\035\uff67\105\uff67\001\002\000\052\004\uff69\006" +
    "\uff69\012\uff69\014\uff69\016\uff69\017\uff69\020\uff69\021\uff69" +
    "\022\uff69\023\uff69\024\uff69\025\uff69\026\uff69\030\uff69\031" +
    "\uff69\032\uff69\033\uff69\034\uff69\035\uff69\105\uff69\001\002" +
    "\000\032\011\115\014\126\020\111\027\103\046\112\047" +
    "\110\053\113\062\106\106\114\107\107\110\102\112\105" +
    "\001\002\000\056\004\uff81\006\uff81\010\uff81\012\uff81\013" +
    "\uff81\014\uff81\016\uff81\017\uff81\020\uff81\021\uff81\022\uff81" +
    "\023\uff81\024\uff81\025\uff81\026\uff81\030\uff81\031\uff81\032" +
    "\uff81\033\uff81\034\uff81\035\uff81\105\uff81\001\002\000\040" +
    "\014\142\017\146\020\134\021\144\022\130\023\143\024" +
    "\135\025\133\026\136\030\132\031\137\032\145\033\141" +
    "\034\131\035\140\001\002\000\030\011\115\020\111\027" +
    "\103\046\112\047\110\053\113\062\106\106\114\107\107" +
    "\110\102\112\105\001\002\000\030\011\115\020\111\027" +
    "\103\046\112\047\110\053\113\062\106\106\114\107\107" +
    "\110\102\112\105\001\002\000\030\011\115\020\111\027" +
    "\103\046\112\047\110\053\113\062\106\106\114\107\107" +
    "\110\102\112\105\001\002\000\030\011\115\020\111\027" +
    "\103\046\112\047\110\053\113\062\106\106\114\107\107" +
    "\110\102\112\105\001\002\000\030\011\115\020\111\027" +
    "\103\046\112\047\110\053\113\062\106\106\114\107\107" +
    "\110\102\112\105\001\002\000\030\011\115\020\111\027" +
    "\103\046\112\047\110\053\113\062\106\106\114\107\107" +
    "\110\102\112\105\001\002\000\030\011\115\020\111\027" +
    "\103\046\112\047\110\053\113\062\106\106\114\107\107" +
    "\110\102\112\105\001\002\000\030\011\115\020\111\027" +
    "\103\046\112\047\110\053\113\062\106\106\114\107\107" +
    "\110\102\112\105\001\002\000\030\011\115\020\111\027" +
    "\103\046\112\047\110\053\113\062\106\106\114\107\107" +
    "\110\102\112\105\001\002\000\030\011\115\020\111\027" +
    "\103\046\112\047\110\053\113\062\106\106\114\107\107" +
    "\110\102\112\105\001\002\000\056\004\uff82\006\uff82\010" +
    "\uff82\012\uff82\013\uff82\014\uff82\016\uff82\017\uff82\020\uff82" +
    "\021\uff82\022\uff82\023\uff82\024\uff82\025\uff82\026\uff82\030" +
    "\uff82\031\uff82\032\uff82\033\uff82\034\uff82\035\uff82\105\uff82" +
    "\001\002\000\030\011\115\020\111\027\103\046\112\047" +
    "\110\053\113\062\106\106\114\107\107\110\102\112\105" +
    "\001\002\000\030\011\115\020\111\027\103\046\112\047" +
    "\110\053\113\062\106\106\114\107\107\110\102\112\105" +
    "\001\002\000\030\011\115\020\111\027\103\046\112\047" +
    "\110\053\113\062\106\106\114\107\107\110\102\112\105" +
    "\001\002\000\030\011\115\020\111\027\103\046\112\047" +
    "\110\053\113\062\106\106\114\107\107\110\102\112\105" +
    "\001\002\000\052\004\uff78\006\uff78\012\uff78\014\uff78\016" +
    "\uff78\017\uff78\020\uff78\021\144\022\130\023\143\024\uff78" +
    "\025\uff78\026\uff78\030\uff78\031\uff78\032\uff78\033\uff78\034" +
    "\uff78\035\uff78\105\uff78\001\002\000\052\004\uff72\006\uff72" +
    "\012\uff72\014\uff72\016\uff72\017\146\020\134\021\144\022" +
    "\130\023\143\024\uff72\025\uff72\026\uff72\030\uff72\031\uff72" +
    "\032\uff72\033\uff72\034\uff72\035\uff72\105\uff72\001\002\000" +
    "\052\004\uff76\006\uff76\012\uff76\014\uff76\016\uff76\017\uff76" +
    "\020\uff76\021\uff76\022\uff76\023\143\024\uff76\025\uff76\026" +
    "\uff76\030\uff76\031\uff76\032\uff76\033\uff76\034\uff76\035\uff76" +
    "\105\uff76\001\002\000\052\004\uff74\006\uff74\012\uff74\014" +
    "\uff74\016\uff74\017\uff74\020\uff74\021\uff74\022\uff74\023\143" +
    "\024\uff74\025\uff74\026\uff74\030\uff74\031\uff74\032\uff74\033" +
    "\uff74\034\uff74\035\uff74\105\uff74\001\002\000\052\004\uff71" +
    "\006\uff71\012\uff71\014\uff71\016\uff71\017\146\020\134\021" +
    "\144\022\130\023\143\024\uff71\025\uff71\026\uff71\030\uff71" +
    "\031\uff71\032\uff71\033\uff71\034\uff71\035\uff71\105\uff71\001" +
    "\002\000\052\004\uff6f\006\uff6f\012\uff6f\014\uff6f\016\uff6f" +
    "\017\146\020\134\021\144\022\130\023\143\024\uff6f\025" +
    "\uff6f\026\uff6f\030\uff6f\031\uff6f\032\uff6f\033\uff6f\034\uff6f" +
    "\035\uff6f\105\uff6f\001\002\000\052\004\uff73\006\uff73\012" +
    "\uff73\014\uff73\016\uff73\017\146\020\134\021\144\022\130" +
    "\023\143\024\uff73\025\uff73\026\uff73\030\uff73\031\uff73\032" +
    "\uff73\033\uff73\034\uff73\035\uff73\105\uff73\001\002\000\052" +
    "\004\uff6b\006\uff6b\012\uff6b\014\uff6b\016\uff6b\017\146\020" +
    "\134\021\144\022\130\023\143\024\135\025\uff6b\026\uff6b" +
    "\030\132\031\137\032\145\033\141\034\131\035\140\105" +
    "\uff6b\001\002\000\052\004\uff6d\006\uff6d\012\uff6d\014\uff6d" +
    "\016\uff6d\017\146\020\134\021\144\022\130\023\143\024" +
    "\uff6d\025\uff6d\026\uff6d\030\132\031\137\032\145\033\141" +
    "\034\131\035\140\105\uff6d\001\002\000\052\004\uff77\006" +
    "\uff77\012\uff77\014\uff77\016\uff77\017\uff77\020\uff77\021\144" +
    "\022\130\023\143\024\uff77\025\uff77\026\uff77\030\uff77\031" +
    "\uff77\032\uff77\033\uff77\034\uff77\035\uff77\105\uff77\001\002" +
    "\000\052\004\uff6c\006\uff6c\012\uff6c\014\uff6c\016\uff6c\017" +
    "\146\020\134\021\144\022\130\023\143\024\135\025\uff6c" +
    "\026\136\030\132\031\137\032\145\033\141\034\131\035" +
    "\140\105\uff6c\001\002\000\052\004\uff6e\006\uff6e\012\uff6e" +
    "\014\uff6e\016\uff6e\017\146\020\134\021\144\022\130\023" +
    "\143\024\uff6e\025\uff6e\026\uff6e\030\uff6e\031\uff6e\032\uff6e" +
    "\033\uff6e\034\uff6e\035\uff6e\105\uff6e\001\002\000\052\004" +
    "\uff70\006\uff70\012\uff70\014\uff70\016\uff70\017\146\020\134" +
    "\021\144\022\130\023\143\024\uff70\025\uff70\026\uff70\030" +
    "\uff70\031\uff70\032\uff70\033\uff70\034\uff70\035\uff70\105\uff70" +
    "\001\002\000\052\004\uff75\006\uff75\012\uff75\014\uff75\016" +
    "\uff75\017\uff75\020\uff75\021\uff75\022\uff75\023\143\024\uff75" +
    "\025\uff75\026\uff75\030\uff75\031\uff75\032\uff75\033\uff75\034" +
    "\uff75\035\uff75\105\uff75\001\002\000\064\004\uff5c\006\uff5c" +
    "\007\uff5c\010\uff5c\012\uff5c\013\uff5c\014\uff5c\016\uff5c\017" +
    "\uff5c\020\uff5c\021\uff5c\022\uff5c\023\uff5c\024\uff5c\025\uff5c" +
    "\026\uff5c\030\uff5c\031\uff5c\032\uff5c\033\uff5c\034\uff5c\035" +
    "\uff5c\057\uff5c\060\uff5c\105\uff5c\001\002\000\040\012\167" +
    "\017\146\020\134\021\144\022\130\023\143\024\135\025" +
    "\133\026\136\030\132\031\137\032\145\033\141\034\131" +
    "\035\140\001\002\000\052\004\uff65\006\uff65\012\uff65\014" +
    "\uff65\016\uff65\017\uff65\020\uff65\021\uff65\022\uff65\023\uff65" +
    "\024\uff65\025\uff65\026\uff65\030\uff65\031\uff65\032\uff65\033" +
    "\uff65\034\uff65\035\uff65\105\uff65\001\002\000\052\004\uff66" +
    "\006\uff66\012\uff66\014\uff66\016\uff66\017\uff66\020\uff66\021" +
    "\144\022\130\023\143\024\uff66\025\uff66\026\uff66\030\uff66" +
    "\031\uff66\032\uff66\033\uff66\034\uff66\035\uff66\105\uff66\001" +
    "\002\000\054\004\uffbc\006\uffbc\007\121\012\uffbc\014\uffbc" +
    "\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024" +
    "\uffbc\025\uffbc\026\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc" +
    "\034\uffbc\035\uffbc\105\uffbc\001\002\000\052\004\uff6a\006" +
    "\uff6a\012\uff6a\014\uff6a\016\uff6a\017\146\020\134\021\144" +
    "\022\130\023\143\024\uff6a\025\uff6a\026\uff6a\030\132\031" +
    "\137\032\145\033\141\034\131\035\140\105\uff6a\001\002" +
    "\000\032\011\115\012\174\020\111\027\103\046\112\047" +
    "\110\053\113\062\106\106\114\107\107\110\102\112\105" +
    "\001\002\000\064\004\uff59\006\uff59\007\uff59\010\uff59\012" +
    "\uff59\013\uff59\014\uff59\016\uff59\017\uff59\020\uff59\021\uff59" +
    "\022\uff59\023\uff59\024\uff59\025\uff59\026\uff59\030\uff59\031" +
    "\uff59\032\uff59\033\uff59\034\uff59\035\uff59\057\uff59\060\uff59" +
    "\105\uff59\001\002\000\006\006\177\012\200\001\002\000" +
    "\042\006\uffba\012\uffba\017\146\020\134\021\144\022\130" +
    "\023\143\024\135\025\133\026\136\030\132\031\137\032" +
    "\145\033\141\034\131\035\140\001\002\000\030\011\115" +
    "\020\111\027\103\046\112\047\110\053\113\062\106\106" +
    "\114\107\107\110\102\112\105\001\002\000\064\004\uff5a" +
    "\006\uff5a\007\uff5a\010\uff5a\012\uff5a\013\uff5a\014\uff5a\016" +
    "\uff5a\017\uff5a\020\uff5a\021\uff5a\022\uff5a\023\uff5a\024\uff5a" +
    "\025\uff5a\026\uff5a\030\uff5a\031\uff5a\032\uff5a\033\uff5a\034" +
    "\uff5a\035\uff5a\057\uff5a\060\uff5a\105\uff5a\001\002\000\042" +
    "\006\uffbb\012\uffbb\017\146\020\134\021\144\022\130\023" +
    "\143\024\135\025\133\026\136\030\132\031\137\032\145" +
    "\033\141\034\131\035\140\001\002\000\006\004\ufff5\010" +
    "\203\001\002\000\030\011\115\020\111\027\103\046\112" +
    "\047\110\053\113\062\106\106\114\107\107\110\102\112" +
    "\105\001\002\000\040\004\ufff4\017\146\020\134\021\144" +
    "\022\130\023\143\024\135\025\133\026\136\030\132\031" +
    "\137\032\145\033\141\034\131\035\140\001\002\000\010" +
    "\036\033\037\031\040\030\001\002\000\004\015\uff7e\001" +
    "\002\000\004\015\211\001\002\000\004\004\uff83\001\002" +
    "\000\032\011\115\015\214\020\111\027\103\046\112\047" +
    "\110\053\113\062\106\106\114\107\107\110\102\112\105" +
    "\001\002\000\006\006\uff7b\016\uff7b\001\002\000\006\006" +
    "\220\016\222\001\002\000\032\011\115\015\214\020\111" +
    "\027\103\046\112\047\110\053\113\062\106\106\114\107" +
    "\107\110\102\112\105\001\002\000\042\006\uff79\016\uff79" +
    "\017\146\020\134\021\144\022\130\023\143\024\135\025" +
    "\133\026\136\030\132\031\137\032\145\033\141\034\131" +
    "\035\140\001\002\000\006\006\220\016\217\001\002\000" +
    "\006\006\uff7a\016\uff7a\001\002\000\032\011\115\015\214" +
    "\020\111\027\103\046\112\047\110\053\113\062\106\106" +
    "\114\107\107\110\102\112\105\001\002\000\006\006\uff7c" +
    "\016\uff7c\001\002\000\004\004\uff7d\001\002\000\006\004" +
    "\uff86\010\224\001\002\000\004\015\uff7e\001\002\000\004" +
    "\004\uff84\001\002\000\056\004\uff7f\006\uff7f\010\uff7f\012" +
    "\uff7f\013\uff7f\014\uff7f\016\uff7f\017\uff7f\020\uff7f\021\uff7f" +
    "\022\uff7f\023\uff7f\024\uff7f\025\uff7f\026\uff7f\030\uff7f\031" +
    "\uff7f\032\uff7f\033\uff7f\034\uff7f\035\uff7f\105\uff7f\001\002" +
    "\000\040\014\230\017\146\020\134\021\144\022\130\023" +
    "\143\024\135\025\133\026\136\030\132\031\137\032\145" +
    "\033\141\034\131\035\140\001\002\000\056\004\uff80\006" +
    "\uff80\010\uff80\012\uff80\013\uff80\014\uff80\016\uff80\017\uff80" +
    "\020\uff80\021\uff80\022\uff80\023\uff80\024\uff80\025\uff80\026" +
    "\uff80\030\uff80\031\uff80\032\uff80\033\uff80\034\uff80\035\uff80" +
    "\105\uff80\001\002\000\006\002\uffeb\042\uffeb\001\002\000" +
    "\024\016\uffe7\043\uffe7\050\uffe7\051\uffe7\052\uffe7\054\uffe7" +
    "\110\uffe7\113\uffe7\114\uffe7\001\002\000\024\016\uffe2\043" +
    "\uffe2\050\uffe2\051\uffe2\052\uffe2\054\uffe2\110\uffe2\113\uffe2" +
    "\114\uffe2\001\002\000\024\016\uffe3\043\uffe3\050\uffe3\051" +
    "\uffe3\052\uffe3\054\uffe3\110\uffe3\113\uffe3\114\uffe3\001\002" +
    "\000\004\011\236\001\002\000\016\012\237\051\054\052" +
    "\040\054\042\113\046\114\043\001\002\000\006\015\u0169" +
    "\105\u0168\001\002\000\004\110\u0167\001\002\000\006\006" +
    "\242\012\243\001\002\000\014\051\054\052\040\054\042" +
    "\113\046\114\043\001\002\000\006\015\244\105\245\001" +
    "\002\000\032\043\275\055\276\061\267\062\106\065\272" +
    "\066\263\071\251\072\256\073\260\076\250\077\254\110" +
    "\102\001\002\000\010\036\033\037\031\040\030\001\002" +
    "\000\004\015\247\001\002\000\032\043\275\055\276\061" +
    "\267\062\106\065\272\066\263\071\251\072\256\073\260" +
    "\076\250\077\254\110\102\001\002\000\004\011\u0160\001" +
    "\002\000\004\011\u014f\001\002\000\040\016\uffb7\043\uffb7" +
    "\055\uffb7\061\uffb7\062\uffb7\065\uffb7\066\uffb7\067\uffb7\070" +
    "\uffb7\071\uffb7\072\uffb7\073\uffb7\076\uffb7\077\uffb7\110\uffb7" +
    "\001\002\000\040\016\uffcf\043\uffcf\055\uffcf\061\uffcf\062" +
    "\uffcf\065\uffcf\066\uffcf\067\uffcf\070\uffcf\071\uffcf\072\uffcf" +
    "\073\uffcf\076\uffcf\077\uffcf\110\uffcf\001\002\000\004\011" +
    "\u014c\001\002\000\040\016\uffb8\043\uffb8\055\uffb8\061\uffb8" +
    "\062\uffb8\065\uffb8\066\uffb8\067\uffb8\070\uffb8\071\uffb8\072" +
    "\uffb8\073\uffb8\076\uffb8\077\uffb8\110\uffb8\001\002\000\004" +
    "\011\u0145\001\002\000\034\016\u0144\043\275\055\276\061" +
    "\267\062\106\065\272\066\263\071\251\072\256\073\260" +
    "\076\250\077\254\110\102\001\002\000\004\015\u0104\001" +
    "\002\000\040\016\uffb9\043\uffb9\055\uffb9\061\uffb9\062\uffb9" +
    "\065\uffb9\066\uffb9\067\uffb9\070\uffb9\071\uffb9\072\uffb9\073" +
    "\uffb9\076\uffb9\077\uffb9\110\uffb9\001\002\000\040\016\uffb6" +
    "\043\uffb6\055\uffb6\061\uffb6\062\uffb6\065\uffb6\066\uffb6\067" +
    "\uffb6\070\uffb6\071\uffb6\072\uffb6\073\uffb6\076\uffb6\077\uffb6" +
    "\110\uffb6\001\002\000\004\011\361\001\002\000\004\004" +
    "\360\001\002\000\014\007\121\010\uffb4\013\076\057\352" +
    "\060\350\001\002\000\004\004\346\001\002\000\032\004" +
    "\343\011\115\020\111\027\103\046\112\047\110\053\113" +
    "\062\106\106\114\107\107\110\102\112\105\001\002\000" +
    "\040\016\uffb5\043\uffb5\055\uffb5\061\uffb5\062\uffb5\065\uffb5" +
    "\066\uffb5\067\uffb5\070\uffb5\071\uffb5\072\uffb5\073\uffb5\076" +
    "\uffb5\077\uffb5\110\uffb5\001\002\000\004\004\342\001\002" +
    "\000\004\110\335\001\002\000\040\016\uffce\043\uffce\055" +
    "\uffce\061\uffce\062\uffce\065\uffce\066\uffce\067\uffce\070\uffce" +
    "\071\uffce\072\uffce\073\uffce\076\uffce\077\uffce\110\uffce\001" +
    "\002\000\004\004\334\001\002\000\016\051\054\052\040" +
    "\054\042\110\057\113\046\114\043\001\002\000\004\011" +
    "\304\001\002\000\004\004\303\001\002\000\040\016\uffcd" +
    "\043\uffcd\055\uffcd\061\uffcd\062\uffcd\065\uffcd\066\uffcd\067" +
    "\uffcd\070\uffcd\071\uffcd\072\uffcd\073\uffcd\076\uffcd\077\uffcd" +
    "\110\uffcd\001\002\000\004\004\302\001\002\000\044\016" +
    "\uffca\043\uffca\055\uffca\061\uffca\062\uffca\065\uffca\066\uffca" +
    "\067\uffca\070\uffca\071\uffca\072\uffca\073\uffca\074\uffca\075" +
    "\uffca\076\uffca\077\uffca\110\uffca\001\002\000\044\016\uffcb" +
    "\043\uffcb\055\uffcb\061\uffcb\062\uffcb\065\uffcb\066\uffcb\067" +
    "\uffcb\070\uffcb\071\uffcb\072\uffcb\073\uffcb\074\uffcb\075\uffcb" +
    "\076\uffcb\077\uffcb\110\uffcb\001\002\000\030\011\115\020" +
    "\111\027\103\046\112\047\110\053\113\062\106\106\114" +
    "\107\107\110\102\112\105\001\002\000\040\012\306\017" +
    "\146\020\134\021\144\022\130\023\143\024\135\025\133" +
    "\026\136\030\132\031\137\032\145\033\141\034\131\035" +
    "\140\001\002\000\004\015\307\001\002\000\034\016\310" +
    "\043\275\055\276\061\267\062\106\065\272\066\263\071" +
    "\251\072\256\073\260\076\250\077\254\110\102\001\002" +
    "\000\042\016\uffac\043\uffac\055\uffac\056\321\061\uffac\062" +
    "\uffac\065\uffac\066\uffac\067\uffac\070\uffac\071\uffac\072\uffac" +
    "\073\uffac\076\uffac\077\uffac\110\uffac\001\002\000\034\016" +
    "\312\043\275\055\276\061\267\062\106\065\272\066\263" +
    "\071\251\072\256\073\260\076\250\077\254\110\102\001" +
    "\002\000\042\016\uffae\043\uffae\055\uffae\056\314\061\uffae" +
    "\062\uffae\065\uffae\066\uffae\067\uffae\070\uffae\071\uffae\072" +
    "\uffae\073\uffae\076\uffae\077\uffae\110\uffae\001\002\000\040" +
    "\016\uffd0\043\uffd0\055\uffd0\061\uffd0\062\uffd0\065\uffd0\066" +
    "\uffd0\067\uffd0\070\uffd0\071\uffd0\072\uffd0\073\uffd0\076\uffd0" +
    "\077\uffd0\110\uffd0\001\002\000\004\015\315\001\002\000" +
    "\034\016\316\043\275\055\276\061\267\062\106\065\272" +
    "\066\263\071\251\072\256\073\260\076\250\077\254\110" +
    "\102\001\002\000\040\016\uffaa\043\uffaa\055\uffaa\061\uffaa" +
    "\062\uffaa\065\uffaa\066\uffaa\067\uffaa\070\uffaa\071\uffaa\072" +
    "\uffaa\073\uffaa\076\uffaa\077\uffaa\110\uffaa\001\002\000\034" +
    "\016\320\043\275\055\276\061\267\062\106\065\272\066" +
    "\263\071\251\072\256\073\260\076\250\077\254\110\102" +
    "\001\002\000\040\016\uffad\043\uffad\055\uffad\061\uffad\062" +
    "\uffad\065\uffad\066\uffad\067\uffad\070\uffad\071\uffad\072\uffad" +
    "\073\uffad\076\uffad\077\uffad\110\uffad\001\002\000\004\015" +
    "\322\001\002\000\032\043\275\055\276\061\267\062\106" +
    "\065\272\066\263\071\251\072\256\073\260\076\250\077" +
    "\254\110\102\001\002\000\034\016\324\043\275\055\276" +
    "\061\267\062\106\065\272\066\263\071\251\072\256\073" +
    "\260\076\250\077\254\110\102\001\002\000\040\016\uffab" +
    "\043\uffab\055\uffab\061\uffab\062\uffab\065\uffab\066\uffab\067" +
    "\uffab\070\uffab\071\uffab\072\uffab\073\uffab\076\uffab\077\uffab" +
    "\110\uffab\001\002\000\004\110\327\001\002\000\006\004" +
    "\uffbf\006\332\001\002\000\012\004\uffbd\006\uffbd\010\330" +
    "\013\076\001\002\000\030\011\115\020\111\027\103\046" +
    "\112\047\110\053\113\062\106\106\114\107\107\110\102" +
    "\112\105\001\002\000\040\004\uffc0\017\146\020\134\021" +
    "\144\022\130\023\143\024\135\025\133\026\136\030\132" +
    "\031\137\032\145\033\141\034\131\035\140\001\002\000" +
    "\004\110\333\001\002\000\006\004\uffbe\006\uffbe\001\002" +
    "\000\044\016\uffcc\043\uffcc\055\uffcc\061\uffcc\062\uffcc\065" +
    "\uffcc\066\uffcc\067\uffcc\070\uffcc\071\uffcc\072\uffcc\073\uffcc" +
    "\074\uffcc\075\uffcc\076\uffcc\077\uffcc\110\uffcc\001\002\000" +
    "\004\011\336\001\002\000\032\011\115\012\337\020\111" +
    "\027\103\046\112\047\110\053\113\062\106\106\114\107" +
    "\107\110\102\112\105\001\002\000\004\004\uffc2\001\002" +
    "\000\006\006\177\012\341\001\002\000\004\004\uffc1\001" +
    "\002\000\044\016\uffc5\043\uffc5\055\uffc5\061\uffc5\062\uffc5" +
    "\065\uffc5\066\uffc5\067\uffc5\070\uffc5\071\uffc5\072\uffc5\073" +
    "\uffc5\074\uffc5\075\uffc5\076\uffc5\077\uffc5\110\uffc5\001\002" +
    "\000\044\016\uffc7\043\uffc7\055\uffc7\061\uffc7\062\uffc7\065" +
    "\uffc7\066\uffc7\067\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7" +
    "\074\uffc7\075\uffc7\076\uffc7\077\uffc7\110\uffc7\001\002\000" +
    "\040\004\345\017\146\020\134\021\144\022\130\023\143" +
    "\024\135\025\133\026\136\030\132\031\137\032\145\033" +
    "\141\034\131\035\140\001\002\000\044\016\uffc6\043\uffc6" +
    "\055\uffc6\061\uffc6\062\uffc6\065\uffc6\066\uffc6\067\uffc6\070" +
    "\uffc6\071\uffc6\072\uffc6\073\uffc6\074\uffc6\075\uffc6\076\uffc6" +
    "\077\uffc6\110\uffc6\001\002\000\044\016\uffc9\043\uffc9\055" +
    "\uffc9\061\uffc9\062\uffc9\065\uffc9\066\uffc9\067\uffc9\070\uffc9" +
    "\071\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9\076\uffc9\077" +
    "\uffc9\110\uffc9\001\002\000\004\010\356\001\002\000\004" +
    "\004\uffb1\001\002\000\006\010\uffb0\013\125\001\002\000" +
    "\004\004\uffb2\001\002\000\004\010\354\001\002\000\030" +
    "\011\115\020\111\027\103\046\112\047\110\053\113\062" +
    "\106\106\114\107\107\110\102\112\105\001\002\000\040" +
    "\004\uffaf\017\146\020\134\021\144\022\130\023\143\024" +
    "\135\025\133\026\136\030\132\031\137\032\145\033\141" +
    "\034\131\035\140\001\002\000\030\011\115\020\111\027" +
    "\103\046\112\047\110\053\113\062\106\106\114\107\107" +
    "\110\102\112\105\001\002\000\040\004\uffb3\017\146\020" +
    "\134\021\144\022\130\023\143\024\135\025\133\026\136" +
    "\030\132\031\137\032\145\033\141\034\131\035\140\001" +
    "\002\000\044\016\uffc8\043\uffc8\055\uffc8\061\uffc8\062\uffc8" +
    "\065\uffc8\066\uffc8\067\uffc8\070\uffc8\071\uffc8\072\uffc8\073" +
    "\uffc8\074\uffc8\075\uffc8\076\uffc8\077\uffc8\110\uffc8\001\002" +
    "\000\030\011\115\020\111\027\103\046\112\047\110\053" +
    "\113\062\106\106\114\107\107\110\102\112\105\001\002" +
    "\000\040\012\363\017\146\020\134\021\144\022\130\023" +
    "\143\024\135\025\133\026\136\030\132\031\137\032\145" +
    "\033\141\034\131\035\140\001\002\000\004\015\364\001" +
    "\002\000\004\067\367\001\002\000\010\016\uffa6\067\uffa6" +
    "\070\uffa6\001\002\000\010\016\376\067\367\070\u0100\001" +
    "\002\000\006\106\370\112\371\001\002\000\004\105\374" +
    "\001\002\000\004\105\372\001\002\000\032\043\275\055" +
    "\276\061\267\062\106\065\272\066\263\071\251\072\256" +
    "\073\260\076\250\077\254\110\102\001\002\000\040\016" +
    "\uffa4\043\275\055\276\061\267\062\106\065\272\066\263" +
    "\067\uffa4\070\uffa4\071\251\072\256\073\260\076\250\077" +
    "\254\110\102\001\002\000\032\043\275\055\276\061\267" +
    "\062\106\065\272\066\263\071\251\072\256\073\260\076" +
    "\250\077\254\110\102\001\002\000\040\016\uffa5\043\275" +
    "\055\276\061\267\062\106\065\272\066\263\067\uffa5\070" +
    "\uffa5\071\251\072\256\073\260\076\250\077\254\110\102" +
    "\001\002\000\040\016\uffa9\043\uffa9\055\uffa9\061\uffa9\062" +
    "\uffa9\065\uffa9\066\uffa9\067\uffa9\070\uffa9\071\uffa9\072\uffa9" +
    "\073\uffa9\076\uffa9\077\uffa9\110\uffa9\001\002\000\010\016" +
    "\uffa7\067\uffa7\070\uffa7\001\002\000\004\105\u0101\001\002" +
    "\000\032\043\275\055\276\061\267\062\106\065\272\066" +
    "\263\071\251\072\256\073\260\076\250\077\254\110\102" +
    "\001\002\000\034\016\u0103\043\275\055\276\061\267\062" +
    "\106\065\272\066\263\071\251\072\256\073\260\076\250" +
    "\077\254\110\102\001\002\000\040\016\uffa8\043\uffa8\055" +
    "\uffa8\061\uffa8\062\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8" +
    "\071\uffa8\072\uffa8\073\uffa8\076\uffa8\077\uffa8\110\uffa8\001" +
    "\002\000\040\016\u0105\043\275\055\u0111\061\267\062\106" +
    "\065\272\066\u010b\071\251\072\256\073\260\074\u010e\075" +
    "\u010f\076\250\077\254\110\102\001\002\000\004\072\u013f" +
    "\001\002\000\044\016\uff94\043\uff94\055\uff94\061\uff94\062" +
    "\uff94\065\uff94\066\uff94\067\uff94\070\uff94\071\uff94\072\uff94" +
    "\073\uff94\074\uff94\075\uff94\076\uff94\077\uff94\110\uff94\001" +
    "\002\000\044\016\uff96\043\uff96\055\uff96\061\uff96\062\uff96" +
    "\065\uff96\066\uff96\067\uff96\070\uff96\071\uff96\072\uff96\073" +
    "\uff96\074\uff96\075\uff96\076\uff96\077\uff96\110\uff96\001\002" +
    "\000\044\016\uff99\043\uff99\055\uff99\061\uff99\062\uff99\065" +
    "\uff99\066\uff99\067\uff99\070\uff99\071\uff99\072\uff99\073\uff99" +
    "\074\uff99\075\uff99\076\uff99\077\uff99\110\uff99\001\002\000" +
    "\044\016\uff9b\043\uff9b\055\uff9b\061\uff9b\062\uff9b\065\uff9b" +
    "\066\uff9b\067\uff9b\070\uff9b\071\uff9b\072\uff9b\073\uff9b\074" +
    "\uff9b\075\uff9b\076\uff9b\077\uff9b\110\uff9b\001\002\000\044" +
    "\016\uff93\043\uff93\055\uff93\061\uff93\062\uff93\065\uff93\066" +
    "\uff93\067\uff93\070\uff93\071\uff93\072\uff93\073\uff93\074\uff93" +
    "\075\uff93\076\uff93\077\uff93\110\uff93\001\002\000\004\011" +
    "\u012c\001\002\000\040\016\u0126\043\275\055\u0111\061\267" +
    "\062\106\065\272\066\u010b\071\251\072\256\073\260\074" +
    "\u010e\075\u010f\076\250\077\254\110\102\001\002\000\044" +
    "\016\uff92\043\uff92\055\uff92\061\uff92\062\uff92\065\uff92\066" +
    "\uff92\067\uff92\070\uff92\071\uff92\072\uff92\073\uff92\074\uff92" +
    "\075\uff92\076\uff92\077\uff92\110\uff92\001\002\000\004\004" +
    "\u0125\001\002\000\004\004\u0124\001\002\000\044\016\uff9a" +
    "\043\uff9a\055\uff9a\061\uff9a\062\uff9a\065\uff9a\066\uff9a\067" +
    "\uff9a\070\uff9a\071\uff9a\072\uff9a\073\uff9a\074\uff9a\075\uff9a" +
    "\076\uff9a\077\uff9a\110\uff9a\001\002\000\004\011\u0113\001" +
    "\002\000\044\016\uff95\043\uff95\055\uff95\061\uff95\062\uff95" +
    "\065\uff95\066\uff95\067\uff95\070\uff95\071\uff95\072\uff95\073" +
    "\uff95\074\uff95\075\uff95\076\uff95\077\uff95\110\uff95\001\002" +
    "\000\030\011\115\020\111\027\103\046\112\047\110\053" +
    "\113\062\106\106\114\107\107\110\102\112\105\001\002" +
    "\000\040\012\u0115\017\146\020\134\021\144\022\130\023" +
    "\143\024\135\025\133\026\136\030\132\031\137\032\145" +
    "\033\141\034\131\035\140\001\002\000\004\015\u0116\001" +
    "\002\000\040\016\u0117\043\275\055\u0111\061\267\062\106" +
    "\065\272\066\u010b\071\251\072\256\073\260\074\u010e\075" +
    "\u010f\076\250\077\254\110\102\001\002\000\046\016\uff8f" +
    "\043\uff8f\055\uff8f\056\u0120\061\uff8f\062\uff8f\065\uff8f\066" +
    "\uff8f\067\uff8f\070\uff8f\071\uff8f\072\uff8f\073\uff8f\074\uff8f" +
    "\075\uff8f\076\uff8f\077\uff8f\110\uff8f\001\002\000\040\016" +
    "\u0119\043\275\055\u0111\061\267\062\106\065\272\066\u010b" +
    "\071\251\072\256\073\260\074\u010e\075\u010f\076\250\077" +
    "\254\110\102\001\002\000\046\016\uff91\043\uff91\055\uff91" +
    "\056\u011b\061\uff91\062\uff91\065\uff91\066\uff91\067\uff91\070" +
    "\uff91\071\uff91\072\uff91\073\uff91\074\uff91\075\uff91\076\uff91" +
    "\077\uff91\110\uff91\001\002\000\044\016\uff9c\043\uff9c\055" +
    "\uff9c\061\uff9c\062\uff9c\065\uff9c\066\uff9c\067\uff9c\070\uff9c" +
    "\071\uff9c\072\uff9c\073\uff9c\074\uff9c\075\uff9c\076\uff9c\077" +
    "\uff9c\110\uff9c\001\002\000\004\015\u011c\001\002\000\040" +
    "\016\u011d\043\275\055\u0111\061\267\062\106\065\272\066" +
    "\u010b\071\251\072\256\073\260\074\u010e\075\u010f\076\250" +
    "\077\254\110\102\001\002\000\044\016\uff8d\043\uff8d\055" +
    "\uff8d\061\uff8d\062\uff8d\065\uff8d\066\uff8d\067\uff8d\070\uff8d" +
    "\071\uff8d\072\uff8d\073\uff8d\074\uff8d\075\uff8d\076\uff8d\077" +
    "\uff8d\110\uff8d\001\002\000\040\016\u011f\043\275\055\u0111" +
    "\061\267\062\106\065\272\066\u010b\071\251\072\256\073" +
    "\260\074\u010e\075\u010f\076\250\077\254\110\102\001\002" +
    "\000\044\016\uff90\043\uff90\055\uff90\061\uff90\062\uff90\065" +
    "\uff90\066\uff90\067\uff90\070\uff90\071\uff90\072\uff90\073\uff90" +
    "\074\uff90\075\uff90\076\uff90\077\uff90\110\uff90\001\002\000" +
    "\004\015\u0121\001\002\000\036\043\275\055\u0111\061\267" +
    "\062\106\065\272\066\u010b\071\251\072\256\073\260\074" +
    "\u010e\075\u010f\076\250\077\254\110\102\001\002\000\040" +
    "\016\u0123\043\275\055\u0111\061\267\062\106\065\272\066" +
    "\u010b\071\251\072\256\073\260\074\u010e\075\u010f\076\250" +
    "\077\254\110\102\001\002\000\044\016\uff8e\043\uff8e\055" +
    "\uff8e\061\uff8e\062\uff8e\065\uff8e\066\uff8e\067\uff8e\070\uff8e" +
    "\071\uff8e\072\uff8e\073\uff8e\074\uff8e\075\uff8e\076\uff8e\077" +
    "\uff8e\110\uff8e\001\002\000\044\016\uff97\043\uff97\055\uff97" +
    "\061\uff97\062\uff97\065\uff97\066\uff97\067\uff97\070\uff97\071" +
    "\uff97\072\uff97\073\uff97\074\uff97\075\uff97\076\uff97\077\uff97" +
    "\110\uff97\001\002\000\044\016\uff98\043\uff98\055\uff98\061" +
    "\uff98\062\uff98\065\uff98\066\uff98\067\uff98\070\uff98\071\uff98" +
    "\072\uff98\073\uff98\074\uff98\075\uff98\076\uff98\077\uff98\110" +
    "\uff98\001\002\000\004\072\u0127\001\002\000\004\011\u0128" +
    "\001\002\000\030\011\115\020\111\027\103\046\112\047" +
    "\110\053\113\062\106\106\114\107\107\110\102\112\105" +
    "\001\002\000\040\012\u012a\017\146\020\134\021\144\022" +
    "\130\023\143\024\135\025\133\026\136\030\132\031\137" +
    "\032\145\033\141\034\131\035\140\001\002\000\004\004" +
    "\u012b\001\002\000\044\016\uffa0\043\uffa0\055\uffa0\061\uffa0" +
    "\062\uffa0\065\uffa0\066\uffa0\067\uffa0\070\uffa0\071\uffa0\072" +
    "\uffa0\073\uffa0\074\uffa0\075\uffa0\076\uffa0\077\uffa0\110\uffa0" +
    "\001\002\000\030\011\115\020\111\027\103\046\112\047" +
    "\110\053\113\062\106\106\114\107\107\110\102\112\105" +
    "\001\002\000\040\012\u012e\017\146\020\134\021\144\022" +
    "\130\023\143\024\135\025\133\026\136\030\132\031\137" +
    "\032\145\033\141\034\131\035\140\001\002\000\004\015" +
    "\u012f\001\002\000\004\067\u0131\001\002\000\010\016\uff89" +
    "\067\uff89\070\uff89\001\002\000\006\106\u0139\112\u013a\001" +
    "\002\000\010\016\u0133\067\u0131\070\u0135\001\002\000\044" +
    "\016\uff8c\043\uff8c\055\uff8c\061\uff8c\062\uff8c\065\uff8c\066" +
    "\uff8c\067\uff8c\070\uff8c\071\uff8c\072\uff8c\073\uff8c\074\uff8c" +
    "\075\uff8c\076\uff8c\077\uff8c\110\uff8c\001\002\000\010\016" +
    "\uff8a\067\uff8a\070\uff8a\001\002\000\004\105\u0136\001\002" +
    "\000\036\043\275\055\u0111\061\267\062\106\065\272\066" +
    "\u010b\071\251\072\256\073\260\074\u010e\075\u010f\076\250" +
    "\077\254\110\102\001\002\000\040\016\u0138\043\275\055" +
    "\u0111\061\267\062\106\065\272\066\u010b\071\251\072\256" +
    "\073\260\074\u010e\075\u010f\076\250\077\254\110\102\001" +
    "\002\000\044\016\uff8b\043\uff8b\055\uff8b\061\uff8b\062\uff8b" +
    "\065\uff8b\066\uff8b\067\uff8b\070\uff8b\071\uff8b\072\uff8b\073" +
    "\uff8b\074\uff8b\075\uff8b\076\uff8b\077\uff8b\110\uff8b\001\002" +
    "\000\004\105\u013d\001\002\000\004\105\u013b\001\002\000" +
    "\036\043\275\055\u0111\061\267\062\106\065\272\066\u010b" +
    "\071\251\072\256\073\260\074\u010e\075\u010f\076\250\077" +
    "\254\110\102\001\002\000\044\016\uff87\043\275\055\u0111" +
    "\061\267\062\106\065\272\066\u010b\067\uff87\070\uff87\071" +
    "\251\072\256\073\260\074\u010e\075\u010f\076\250\077\254" +
    "\110\102\001\002\000\036\043\275\055\u0111\061\267\062" +
    "\106\065\272\066\u010b\071\251\072\256\073\260\074\u010e" +
    "\075\u010f\076\250\077\254\110\102\001\002\000\044\016" +
    "\uff88\043\275\055\u0111\061\267\062\106\065\272\066\u010b" +
    "\067\uff88\070\uff88\071\251\072\256\073\260\074\u010e\075" +
    "\u010f\076\250\077\254\110\102\001\002\000\004\011\u0140" +
    "\001\002\000\030\011\115\020\111\027\103\046\112\047" +
    "\110\053\113\062\106\106\114\107\107\110\102\112\105" +
    "\001\002\000\040\012\u0142\017\146\020\134\021\144\022" +
    "\130\023\143\024\135\025\133\026\136\030\132\031\137" +
    "\032\145\033\141\034\131\035\140\001\002\000\004\004" +
    "\u0143\001\002\000\044\016\uff9f\043\uff9f\055\uff9f\061\uff9f" +
    "\062\uff9f\065\uff9f\066\uff9f\067\uff9f\070\uff9f\071\uff9f\072" +
    "\uff9f\073\uff9f\074\uff9f\075\uff9f\076\uff9f\077\uff9f\110\uff9f" +
    "\001\002\000\024\016\uffe0\043\uffe0\050\uffe0\051\uffe0\052" +
    "\uffe0\054\uffe0\110\uffe0\113\uffe0\114\uffe0\001\002\000\030" +
    "\011\115\020\111\027\103\046\112\047\110\053\113\062" +
    "\106\106\114\107\107\110\102\112\105\001\002\000\040" +
    "\012\u0147\017\146\020\134\021\144\022\130\023\143\024" +
    "\135\025\133\026\136\030\132\031\137\032\145\033\141" +
    "\034\131\035\140\001\002\000\004\015\u0148\001\002\000" +
    "\040\016\u0149\043\275\055\u0111\061\267\062\106\065\272" +
    "\066\u010b\071\251\072\256\073\260\074\u010e\075\u010f\076" +
    "\250\077\254\110\102\001\002\000\044\016\uff9d\043\uff9d" +
    "\055\uff9d\061\uff9d\062\uff9d\065\uff9d\066\uff9d\067\uff9d\070" +
    "\uff9d\071\uff9d\072\uff9d\073\uff9d\074\uff9d\075\uff9d\076\uff9d" +
    "\077\uff9d\110\uff9d\001\002\000\040\016\u014b\043\275\055" +
    "\u0111\061\267\062\106\065\272\066\u010b\071\251\072\256" +
    "\073\260\074\u010e\075\u010f\076\250\077\254\110\102\001" +
    "\002\000\044\016\uff9e\043\uff9e\055\uff9e\061\uff9e\062\uff9e" +
    "\065\uff9e\066\uff9e\067\uff9e\070\uff9e\071\uff9e\072\uff9e\073" +
    "\uff9e\074\uff9e\075\uff9e\076\uff9e\077\uff9e\110\uff9e\001\002" +
    "\000\030\011\115\020\111\027\103\046\112\047\110\053" +
    "\113\062\106\106\114\107\107\110\102\112\105\001\002" +
    "\000\040\012\u014e\017\146\020\134\021\144\022\130\023" +
    "\143\024\135\025\133\026\136\030\132\031\137\032\145" +
    "\033\141\034\131\035\140\001\002\000\004\004\uffc3\001" +
    "\002\000\006\051\u0152\110\102\001\002\000\006\007\121" +
    "\010\u015e\001\002\000\004\105\u0156\001\002\000\004\110" +
    "\u0153\001\002\000\004\010\u0154\001\002\000\030\011\115" +
    "\020\111\027\103\046\112\047\110\053\113\062\106\106" +
    "\114\107\107\110\102\112\105\001\002\000\040\017\146" +
    "\020\134\021\144\022\130\023\143\024\135\025\133\026" +
    "\136\030\132\031\137\032\145\033\141\034\131\035\140" +
    "\105\uffa2\001\002\000\030\011\115\020\111\027\103\046" +
    "\112\047\110\053\113\062\106\106\114\107\107\110\102" +
    "\112\105\001\002\000\040\017\146\020\134\021\144\022" +
    "\130\023\143\024\135\025\133\026\136\030\132\031\137" +
    "\032\145\033\141\034\131\035\140\105\u0158\001\002\000" +
    "\030\011\115\020\111\027\103\046\112\047\110\053\113" +
    "\062\106\106\114\107\107\110\102\112\105\001\002\000" +
    "\040\012\u015a\017\146\020\134\021\144\022\130\023\143" +
    "\024\135\025\133\026\136\030\132\031\137\032\145\033" +
    "\141\034\131\035\140\001\002\000\004\015\u015b\001\002" +
    "\000\036\043\275\055\u0111\061\267\062\106\065\272\066" +
    "\u010b\071\251\072\256\073\260\074\u010e\075\u010f\076\250" +
    "\077\254\110\102\001\002\000\040\016\u015d\043\275\055" +
    "\u0111\061\267\062\106\065\272\066\u010b\071\251\072\256" +
    "\073\260\074\u010e\075\u010f\076\250\077\254\110\102\001" +
    "\002\000\044\016\uffa3\043\uffa3\055\uffa3\061\uffa3\062\uffa3" +
    "\065\uffa3\066\uffa3\067\uffa3\070\uffa3\071\uffa3\072\uffa3\073" +
    "\uffa3\074\uffa3\075\uffa3\076\uffa3\077\uffa3\110\uffa3\001\002" +
    "\000\030\011\115\020\111\027\103\046\112\047\110\053" +
    "\113\062\106\106\114\107\107\110\102\112\105\001\002" +
    "\000\040\017\146\020\134\021\144\022\130\023\143\024" +
    "\135\025\133\026\136\030\132\031\137\032\145\033\141" +
    "\034\131\035\140\105\uffa1\001\002\000\030\011\115\020" +
    "\111\027\103\046\112\047\110\053\113\062\106\106\114" +
    "\107\107\110\102\112\105\001\002\000\040\012\u0162\017" +
    "\146\020\134\021\144\022\130\023\143\024\135\025\133" +
    "\026\136\030\132\031\137\032\145\033\141\034\131\035" +
    "\140\001\002\000\004\004\uffc4\001\002\000\034\016\u0164" +
    "\043\275\055\276\061\267\062\106\065\272\066\263\071" +
    "\251\072\256\073\260\076\250\077\254\110\102\001\002" +
    "\000\024\016\uffe1\043\uffe1\050\uffe1\051\uffe1\052\uffe1\054" +
    "\uffe1\110\uffe1\113\uffe1\114\uffe1\001\002\000\004\110\u0166" +
    "\001\002\000\006\006\uffd6\012\uffd6\001\002\000\006\006" +
    "\uffd5\012\uffd5\001\002\000\010\036\033\037\031\040\030" +
    "\001\002\000\032\043\275\055\276\061\267\062\106\065" +
    "\272\066\263\071\251\072\256\073\260\076\250\077\254" +
    "\110\102\001\002\000\034\016\u016b\043\275\055\276\061" +
    "\267\062\106\065\272\066\263\071\251\072\256\073\260" +
    "\076\250\077\254\110\102\001\002\000\024\016\uffdf\043" +
    "\uffdf\050\uffdf\051\uffdf\052\uffdf\054\uffdf\110\uffdf\113\uffdf" +
    "\114\uffdf\001\002\000\004\015\u016d\001\002\000\032\043" +
    "\275\055\276\061\267\062\106\065\272\066\263\071\251" +
    "\072\256\073\260\076\250\077\254\110\102\001\002\000" +
    "\034\016\u016f\043\275\055\276\061\267\062\106\065\272" +
    "\066\263\071\251\072\256\073\260\076\250\077\254\110" +
    "\102\001\002\000\024\016\uffde\043\uffde\050\uffde\051\uffde" +
    "\052\uffde\054\uffde\110\uffde\113\uffde\114\uffde\001\002\000" +
    "\024\016\uffe5\043\uffe5\050\uffe5\051\uffe5\052\uffe5\054\uffe5" +
    "\110\uffe5\113\uffe5\114\uffe5\001\002\000\004\011\u0172\001" +
    "\002\000\004\012\u0173\001\002\000\004\015\u0174\001\002" +
    "\000\032\043\275\055\276\061\267\062\106\065\272\066" +
    "\263\071\251\072\256\073\260\076\250\077\254\110\102" +
    "\001\002\000\034\016\u0176\043\275\055\276\061\267\062" +
    "\106\065\272\066\263\071\251\072\256\073\260\076\250" +
    "\077\254\110\102\001\002\000\024\016\uffd9\043\uffd9\050" +
    "\uffd9\051\uffd9\052\uffd9\054\uffd9\110\uffd9\113\uffd9\114\uffd9" +
    "\001\002\000\004\011\u0178\001\002\000\016\012\u0179\051" +
    "\054\052\040\054\042\113\046\114\043\001\002\000\006" +
    "\015\u0184\105\u0185\001\002\000\006\006\242\012\u017b\001" +
    "\002\000\006\015\u017c\105\u017d\001\002\000\032\043\275" +
    "\055\276\061\267\062\106\065\272\066\263\071\251\072" +
    "\256\073\260\076\250\077\254\110\102\001\002\000\010" +
    "\036\033\037\031\040\030\001\002\000\004\015\u017f\001" +
    "\002\000\032\043\275\055\276\061\267\062\106\065\272" +
    "\066\263\071\251\072\256\073\260\076\250\077\254\110" +
    "\102\001\002\000\034\016\u0181\043\275\055\276\061\267" +
    "\062\106\065\272\066\263\071\251\072\256\073\260\076" +
    "\250\077\254\110\102\001\002\000\024\016\uffdc\043\uffdc" +
    "\050\uffdc\051\uffdc\052\uffdc\054\uffdc\110\uffdc\113\uffdc\114" +
    "\uffdc\001\002\000\034\016\u0183\043\275\055\276\061\267" +
    "\062\106\065\272\066\263\071\251\072\256\073\260\076" +
    "\250\077\254\110\102\001\002\000\024\016\uffdd\043\uffdd" +
    "\050\uffdd\051\uffdd\052\uffdd\054\uffdd\110\uffdd\113\uffdd\114" +
    "\uffdd\001\002\000\032\043\275\055\276\061\267\062\106" +
    "\065\272\066\263\071\251\072\256\073\260\076\250\077" +
    "\254\110\102\001\002\000\010\036\033\037\031\040\030" +
    "\001\002\000\004\015\u0187\001\002\000\032\043\275\055" +
    "\276\061\267\062\106\065\272\066\263\071\251\072\256" +
    "\073\260\076\250\077\254\110\102\001\002\000\034\016" +
    "\u0189\043\275\055\276\061\267\062\106\065\272\066\263" +
    "\071\251\072\256\073\260\076\250\077\254\110\102\001" +
    "\002\000\024\016\uffda\043\uffda\050\uffda\051\uffda\052\uffda" +
    "\054\uffda\110\uffda\113\uffda\114\uffda\001\002\000\034\016" +
    "\u018b\043\275\055\276\061\267\062\106\065\272\066\263" +
    "\071\251\072\256\073\260\076\250\077\254\110\102\001" +
    "\002\000\024\016\uffdb\043\uffdb\050\uffdb\051\uffdb\052\uffdb" +
    "\054\uffdb\110\uffdb\113\uffdb\114\uffdb\001\002\000\004\015" +
    "\u018d\001\002\000\022\043\055\050\044\051\054\052\040" +
    "\054\042\110\036\113\046\114\043\001\002\000\024\016" +
    "\u018f\043\055\050\044\051\054\052\040\054\042\110\036" +
    "\113\046\114\043\001\002\000\006\002\uffea\042\uffea\001" +
    "\002\000\024\016\u0191\043\055\050\044\051\054\052\040" +
    "\054\042\110\036\113\046\114\043\001\002\000\006\002" +
    "\uffe8\042\uffe8\001\002\000\004\015\u0193\001\002\000\022" +
    "\043\055\050\044\051\054\052\040\054\042\110\036\113" +
    "\046\114\043\001\002\000\024\016\u0195\043\055\050\044" +
    "\051\054\052\040\054\042\110\036\113\046\114\043\001" +
    "\002\000\006\002\uffe9\042\uffe9\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0194\000\016\003\003\004\012\005\011\006\004\012" +
    "\005\066\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\021\005" +
    "\022\006\004\012\005\001\001\000\002\001\001\000\006" +
    "\006\016\012\005\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\016\012\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\007\044\010\046\016\036\017\051\024" +
    "\050\061\047\065\u018f\070\040\001\001\000\004\011\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\007\044" +
    "\010\046\016\036\017\051\024\050\061\047\065\052\070" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\007\044\010\046\016\036\017\231" +
    "\024\050\061\047\070\040\001\001\000\002\001\001\000" +
    "\004\010\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\057\076\001\001\000\012\013\226\023" +
    "\103\062\117\067\115\001\001\000\002\001\001\000\004" +
    "\011\201\001\001\000\012\013\116\023\103\062\117\067" +
    "\115\001\001\000\002\001\001\000\012\013\171\023\103" +
    "\062\117\067\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\062\170\067\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\167\023\103\062\117\067" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\013\165\023\103\062\117\067\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\057\122" +
    "\001\001\000\004\067\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\013\126\023\103" +
    "\062\117\067\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\013\163\023\103\062\117\067\115\001\001" +
    "\000\012\013\162\023\103\062\117\067\115\001\001\000" +
    "\012\013\161\023\103\062\117\067\115\001\001\000\012" +
    "\013\160\023\103\062\117\067\115\001\001\000\012\013" +
    "\157\023\103\062\117\067\115\001\001\000\012\013\156" +
    "\023\103\062\117\067\115\001\001\000\012\013\155\023" +
    "\103\062\117\067\115\001\001\000\012\013\154\023\103" +
    "\062\117\067\115\001\001\000\012\013\153\023\103\062" +
    "\117\067\115\001\001\000\012\013\152\023\103\062\117" +
    "\067\115\001\001\000\002\001\001\000\012\013\151\023" +
    "\103\062\117\067\115\001\001\000\012\013\150\023\103" +
    "\062\117\067\115\001\001\000\012\013\147\023\103\062" +
    "\117\067\115\001\001\000\012\013\146\023\103\062\117" +
    "\067\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\013\175\023\103\031" +
    "\174\062\117\067\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\013\200\023\103\062" +
    "\117\067\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\203\023\103\062\117\067" +
    "\115\001\001\000\002\001\001\000\004\011\222\001\001" +
    "\000\006\060\207\073\206\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\013\214\023\103\062\117\063\212" +
    "\064\211\067\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\013\214\023\103\062\117\063\215\064\211" +
    "\067\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\013\214\023\103\062\117\064\220" +
    "\067\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\060\224\073\206\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\237\020" +
    "\240\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\u0164\001\001\000\002\001\001\000" +
    "\044\014\u0162\015\252\021\273\022\277\023\276\024\300" +
    "\025\265\026\263\032\260\033\254\034\251\035\261\036" +
    "\267\042\272\061\270\062\264\067\115\001\001\000\004" +
    "\011\245\001\001\000\002\001\001\000\044\014\256\015" +
    "\252\021\273\022\277\023\276\024\300\025\265\026\263" +
    "\032\260\033\254\034\251\035\261\036\267\042\272\061" +
    "\270\062\264\067\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\015\312" +
    "\021\273\022\277\023\276\024\300\025\265\026\263\032" +
    "\260\033\254\034\251\035\261\036\267\042\272\061\270" +
    "\062\264\067\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\057\350\071\346\001\001\000\002\001\001\000" +
    "\012\013\343\023\103\062\117\067\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\324\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\013\304" +
    "\023\103\062\117\067\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\014\310\015\252\021\273\022\277" +
    "\023\276\024\300\025\265\026\263\032\260\033\254\034" +
    "\251\035\261\036\267\042\272\061\270\062\264\067\115" +
    "\001\001\000\002\001\001\000\042\015\312\021\273\022" +
    "\277\023\276\024\300\025\265\026\263\032\260\033\254" +
    "\034\251\035\261\036\267\042\272\061\270\062\264\067" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\014\316\015\252\021\273\022\277\023" +
    "\276\024\300\025\265\026\263\032\260\033\254\034\251" +
    "\035\261\036\267\042\272\061\270\062\264\067\115\001" +
    "\001\000\002\001\001\000\042\015\312\021\273\022\277" +
    "\023\276\024\300\025\265\026\263\032\260\033\254\034" +
    "\251\035\261\036\267\042\272\061\270\062\264\067\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\014" +
    "\322\015\252\021\273\022\277\023\276\024\300\025\265" +
    "\026\263\032\260\033\254\034\251\035\261\036\267\042" +
    "\272\061\270\062\264\067\115\001\001\000\042\015\312" +
    "\021\273\022\277\023\276\024\300\025\265\026\263\032" +
    "\260\033\254\034\251\035\261\036\267\042\272\061\270" +
    "\062\264\067\115\001\001\000\002\001\001\000\004\030" +
    "\325\001\001\000\002\001\001\000\004\057\076\001\001" +
    "\000\012\013\330\023\103\062\117\067\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\013\175\023\103\031" +
    "\337\062\117\067\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\072\352\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\013\354" +
    "\023\103\062\117\067\115\001\001\000\002\001\001\000" +
    "\012\013\356\023\103\062\117\067\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\013\361\023\103\062" +
    "\117\067\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\037\365\041\364\001\001\000\002\001\001\000" +
    "\004\041\376\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\014\372\015\252\021\273\022" +
    "\277\023\276\024\300\025\265\026\263\032\260\033\254" +
    "\034\251\035\261\036\267\042\272\061\270\062\264\067" +
    "\115\001\001\000\042\015\312\021\273\022\277\023\276" +
    "\024\300\025\265\026\263\032\260\033\254\034\251\035" +
    "\261\036\267\042\272\061\270\062\264\067\115\001\001" +
    "\000\044\014\374\015\252\021\273\022\277\023\276\024" +
    "\300\025\265\026\263\032\260\033\254\034\251\035\261" +
    "\036\267\042\272\061\270\062\264\067\115\001\001\000" +
    "\042\015\312\021\273\022\277\023\276\024\300\025\265" +
    "\026\263\032\260\033\254\034\251\035\261\036\267\042" +
    "\272\061\270\062\264\067\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\014\u0101\015" +
    "\252\021\273\022\277\023\276\024\300\025\265\026\263" +
    "\032\260\033\254\034\251\035\261\036\267\042\272\061" +
    "\270\062\264\067\115\001\001\000\042\015\312\021\273" +
    "\022\277\023\276\024\300\025\265\026\263\032\260\033" +
    "\254\034\251\035\261\036\267\042\272\061\270\062\264" +
    "\067\115\001\001\000\002\001\001\000\044\021\273\023" +
    "\276\024\300\025\265\026\263\034\u0105\035\u0109\036\u010c" +
    "\042\u010f\050\u0108\051\u0107\052\u0106\053\u0111\056\u010b\061" +
    "\270\062\264\067\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\021\273" +
    "\023\276\024\300\025\265\026\263\034\u0105\035\u0109\036" +
    "\u010c\042\u010f\050\u0119\051\u0107\052\u0106\053\u0111\061\270" +
    "\062\264\067\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\u0113\023\103\062\117\067" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\021\273\023\276\024\300\025\265\026\263\034\u0105\035" +
    "\u0109\036\u010c\042\u010f\050\u0108\051\u0107\052\u0106\053\u0111" +
    "\056\u0117\061\270\062\264\067\115\001\001\000\002\001" +
    "\001\000\042\021\273\023\276\024\300\025\265\026\263" +
    "\034\u0105\035\u0109\036\u010c\042\u010f\050\u0119\051\u0107\052" +
    "\u0106\053\u0111\061\270\062\264\067\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\021" +
    "\273\023\276\024\300\025\265\026\263\034\u0105\035\u0109" +
    "\036\u010c\042\u010f\050\u0108\051\u0107\052\u0106\053\u0111\056" +
    "\u011d\061\270\062\264\067\115\001\001\000\002\001\001" +
    "\000\042\021\273\023\276\024\300\025\265\026\263\034" +
    "\u0105\035\u0109\036\u010c\042\u010f\050\u0119\051\u0107\052\u0106" +
    "\053\u0111\061\270\062\264\067\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\021\273\023\276\024\300" +
    "\025\265\026\263\034\u0105\035\u0109\036\u010c\042\u010f\050" +
    "\u0108\051\u0107\052\u0106\053\u0111\056\u0121\061\270\062\264" +
    "\067\115\001\001\000\042\021\273\023\276\024\300\025" +
    "\265\026\263\034\u0105\035\u0109\036\u010c\042\u010f\050\u0119" +
    "\051\u0107\052\u0106\053\u0111\061\270\062\264\067\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\013\u0128\023" +
    "\103\062\117\067\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\013\u012c\023\103\062" +
    "\117\067\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\054\u0131\055\u012f\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\055\u0133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\021\273\023" +
    "\276\024\300\025\265\026\263\034\u0105\035\u0109\036\u010c" +
    "\042\u010f\050\u0108\051\u0107\052\u0106\053\u0111\056\u0136\061" +
    "\270\062\264\067\115\001\001\000\042\021\273\023\276" +
    "\024\300\025\265\026\263\034\u0105\035\u0109\036\u010c\042" +
    "\u010f\050\u0119\051\u0107\052\u0106\053\u0111\061\270\062\264" +
    "\067\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\021\273\023\276\024\300\025\265" +
    "\026\263\034\u0105\035\u0109\036\u010c\042\u010f\050\u0108\051" +
    "\u0107\052\u0106\053\u0111\056\u013b\061\270\062\264\067\115" +
    "\001\001\000\042\021\273\023\276\024\300\025\265\026" +
    "\263\034\u0105\035\u0109\036\u010c\042\u010f\050\u0119\051\u0107" +
    "\052\u0106\053\u0111\061\270\062\264\067\115\001\001\000" +
    "\044\021\273\023\276\024\300\025\265\026\263\034\u0105" +
    "\035\u0109\036\u010c\042\u010f\050\u0108\051\u0107\052\u0106\053" +
    "\u0111\056\u013d\061\270\062\264\067\115\001\001\000\042" +
    "\021\273\023\276\024\300\025\265\026\263\034\u0105\035" +
    "\u0109\036\u010c\042\u010f\050\u0119\051\u0107\052\u0106\053\u0111" +
    "\061\270\062\264\067\115\001\001\000\002\001\001\000" +
    "\012\013\u0140\023\103\062\117\067\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\013\u0145\023\103\062\117\067\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\021\273\023" +
    "\276\024\300\025\265\026\263\034\u0105\035\u0109\036\u010c" +
    "\042\u010f\050\u0108\051\u0107\052\u0106\053\u0111\056\u0149\061" +
    "\270\062\264\067\115\001\001\000\002\001\001\000\042" +
    "\021\273\023\276\024\300\025\265\026\263\034\u0105\035" +
    "\u0109\036\u010c\042\u010f\050\u0119\051\u0107\052\u0106\053\u0111" +
    "\061\270\062\264\067\115\001\001\000\002\001\001\000" +
    "\012\013\u014c\023\103\062\117\067\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\045\u0150\062\u014f\067" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\013\u0154\023\103\062" +
    "\117\067\115\001\001\000\002\001\001\000\012\013\u0156" +
    "\023\103\062\117\067\115\001\001\000\002\001\001\000" +
    "\012\013\u0158\023\103\062\117\067\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\021\273\023\276\024" +
    "\300\025\265\026\263\034\u0105\035\u0109\036\u010c\042\u010f" +
    "\050\u0108\051\u0107\052\u0106\053\u0111\056\u015b\061\270\062" +
    "\264\067\115\001\001\000\042\021\273\023\276\024\300" +
    "\025\265\026\263\034\u0105\035\u0109\036\u010c\042\u010f\050" +
    "\u0119\051\u0107\052\u0106\053\u0111\061\270\062\264\067\115" +
    "\001\001\000\002\001\001\000\012\013\u015e\023\103\062" +
    "\117\067\115\001\001\000\002\001\001\000\012\013\u0160" +
    "\023\103\062\117\067\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\015\312\021\273\022\277\023\276" +
    "\024\300\025\265\026\263\032\260\033\254\034\251\035" +
    "\261\036\267\042\272\061\270\062\264\067\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\u016b\001\001\000\044\014\u0169" +
    "\015\252\021\273\022\277\023\276\024\300\025\265\026" +
    "\263\032\260\033\254\034\251\035\261\036\267\042\272" +
    "\061\270\062\264\067\115\001\001\000\042\015\312\021" +
    "\273\022\277\023\276\024\300\025\265\026\263\032\260" +
    "\033\254\034\251\035\261\036\267\042\272\061\270\062" +
    "\264\067\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\014\u016d\015\252\021\273\022\277\023\276\024" +
    "\300\025\265\026\263\032\260\033\254\034\251\035\261" +
    "\036\267\042\272\061\270\062\264\067\115\001\001\000" +
    "\042\015\312\021\273\022\277\023\276\024\300\025\265" +
    "\026\263\032\260\033\254\034\251\035\261\036\267\042" +
    "\272\061\270\062\264\067\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\014\u0174\015\252\021\273\022\277" +
    "\023\276\024\300\025\265\026\263\032\260\033\254\034" +
    "\251\035\261\036\267\042\272\061\270\062\264\067\115" +
    "\001\001\000\042\015\312\021\273\022\277\023\276\024" +
    "\300\025\265\026\263\032\260\033\254\034\251\035\261" +
    "\036\267\042\272\061\270\062\264\067\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\237\020\u0179" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\014\u0181\015\252\021\273\022\277\023\276" +
    "\024\300\025\265\026\263\032\260\033\254\034\251\035" +
    "\261\036\267\042\272\061\270\062\264\067\115\001\001" +
    "\000\004\011\u017d\001\001\000\002\001\001\000\044\014" +
    "\u017f\015\252\021\273\022\277\023\276\024\300\025\265" +
    "\026\263\032\260\033\254\034\251\035\261\036\267\042" +
    "\272\061\270\062\264\067\115\001\001\000\042\015\312" +
    "\021\273\022\277\023\276\024\300\025\265\026\263\032" +
    "\260\033\254\034\251\035\261\036\267\042\272\061\270" +
    "\062\264\067\115\001\001\000\002\001\001\000\042\015" +
    "\312\021\273\022\277\023\276\024\300\025\265\026\263" +
    "\032\260\033\254\034\251\035\261\036\267\042\272\061" +
    "\270\062\264\067\115\001\001\000\002\001\001\000\044" +
    "\014\u0189\015\252\021\273\022\277\023\276\024\300\025" +
    "\265\026\263\032\260\033\254\034\251\035\261\036\267" +
    "\042\272\061\270\062\264\067\115\001\001\000\004\011" +
    "\u0185\001\001\000\002\001\001\000\044\014\u0187\015\252" +
    "\021\273\022\277\023\276\024\300\025\265\026\263\032" +
    "\260\033\254\034\251\035\261\036\267\042\272\061\270" +
    "\062\264\067\115\001\001\000\042\015\312\021\273\022" +
    "\277\023\276\024\300\025\265\026\263\032\260\033\254" +
    "\034\251\035\261\036\267\042\272\061\270\062\264\067" +
    "\115\001\001\000\002\001\001\000\042\015\312\021\273" +
    "\022\277\023\276\024\300\025\265\026\263\032\260\033" +
    "\254\034\251\035\261\036\267\042\272\061\270\062\264" +
    "\067\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\007\044\010\046\016\036\017\051\024\050\061\047" +
    "\065\u018d\070\040\001\001\000\020\007\044\010\046\016" +
    "\036\017\231\024\050\061\047\070\040\001\001\000\002" +
    "\001\001\000\020\007\044\010\046\016\036\017\231\024" +
    "\050\061\047\070\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\007\044\010\046\016\036\017\051\024" +
    "\050\061\047\065\u0193\070\040\001\001\000\020\007\044" +
    "\010\046\016\036\017\231\024\050\061\047\070\040\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserGk$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserGk$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserGk$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




/**Metodo al que se llama automaticamente ante algun error sintactico.*/
public void syntax_error(Symbol s){
        System.out.println("Error en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
}
  

/**Metodo al que se llama en el momento en que ya no es posible una recuperaci�n de
errores.*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
javax.swing.JOptionPane.showMessageDialog(null,"Error Sintactico en la Linea " + (s.right+1)+ "Columna "+s.left+". Identificador " +
s.value + " no reconocido.");
 ManejadorErrores.getInstancia().agregarErrorGraphik(new Errores("Sintaxis no reconocida en el identificador " +s.value, "Sintactico", (s.left+1),(s.right+1),TablaSimbolosGraphik.getInstancia().getArchivo()));
}



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserGk$actions {


    // Espacio que servira para metodos en el lenguaje de java
    public ArrayList<Nodo> listaIds = new ArrayList<Nodo>();
 public ArrayList<Nodo> listaDime = new ArrayList<Nodo>();
public ArrayList<Nodo> listaPar = new ArrayList<Nodo>();
public ArrayList<Nodo> listaCasos = new ArrayList<Nodo>();
public ArrayList<Nodo> listaValores = new ArrayList<Nodo>();
public ArrayList<Nodo> listaIns = new ArrayList<Nodo>();
public ArrayList<Nodo> listaObj = new ArrayList<Nodo>();
public ArrayList<Nodo> listaImp = new ArrayList<Nodo>();
public ArrayList<Nodo> listaLla = new ArrayList<Nodo>();
public ArrayList<Nodo> listaLlaValor = new ArrayList<Nodo>();

  private final ParserGk parser;

  /** Constructor */
  CUP$ParserGk$actions(ParserGk parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserGk$do_action(
    int                        CUP$ParserGk$act_num,
    java_cup.runtime.lr_parser CUP$ParserGk$parser,
    java.util.Stack            CUP$ParserGk$stack,
    int                        CUP$ParserGk$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserGk$result;

      /* select the action based on the action number */
      switch (CUP$ParserGk$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // LLAMARFUNOBJ ::= id 
            {
              Nodo RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo LF = new Nodo("LLAMARFUNOBJ"); LF.insertarNodo(new Nodo(id,"id",idleft,idright)); RESULT = LF;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(53/*LLAMARFUNOBJ*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // LLAMARFUNOBJ ::= id aP cP 
            {
              Nodo RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value;
		int aPleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int aPright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		String aP = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		int cPleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int cPright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		String cP = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo LF = new Nodo("LLAMARFUNOBJ"); LF.insertarNodo(new Nodo(id,"id",idleft,idright)); LF.insertarNodo(new Nodo("sinparametros")); RESULT = LF;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(53/*LLAMARFUNOBJ*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // LLAMARFUNOBJ ::= id aP PARAENVIAR cP 
            {
              Nodo RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).value;
		Nodo LF = new Nodo("LLAMARFUNOBJ"); LF.insertarNodo(new Nodo(id,"id",idleft,idright)); Nodo LP = new Nodo("PARAENVIAR");for (Nodo nodo1 : listaValores) {LP.insertarNodo(nodo1);} LF.insertarNodo(LP); RESULT = LF;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(53/*LLAMARFUNOBJ*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // LLAMAROBJ ::= LLAMARFUNOBJ 
            {
              Nodo RESULT = null;
		int Lleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo L = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		listaObj.clear();listaObj.add(L);
              CUP$ParserGk$result = new java_cup.runtime.Symbol(48/*LLAMAROBJ*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // LLAMAROBJ ::= LLAMAROBJ punto LLAMARFUNOBJ 
            {
              Nodo RESULT = null;
		int Lleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo L = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		listaObj.add(L);
              CUP$ParserGk$result = new java_cup.runtime.Symbol(48/*LLAMAROBJ*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // E ::= verdadero 
            {
              Nodo RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo E = new Nodo("E");E.insertarNodo(new Nodo(id,"bool",idleft,idright)); RESULT = E;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(9/*E*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // E ::= falso 
            {
              Nodo RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo E = new Nodo("E");E.insertarNodo(new Nodo(id,"bool",idleft,idright)); RESULT = E;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(9/*E*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // E ::= LLAMAROBJ 
            {
              Nodo RESULT = null;
		Nodo E = new Nodo("E"); Nodo I = new Nodo("LLAMAROBJ"); for(Nodo nodo1: listaObj){I.insertarNodo(nodo1);}E.insertarNodo(I); RESULT = E;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(9/*E*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // E ::= LLAMARFUN 
            {
              Nodo RESULT = null;
		int Lleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo L = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo E = new Nodo("E"); E.insertarNodo(L); RESULT = E;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(9/*E*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // E ::= cadena 
            {
              Nodo RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo E = new Nodo("E"); E.insertarNodo(new Nodo(c,"cadena",cleft,cright)); RESULT = E;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(9/*E*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // E ::= caracter 
            {
              Nodo RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo E = new Nodo("E"); E.insertarNodo(new Nodo(c,"caracter",cleft,cright)); RESULT = E;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(9/*E*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // E ::= decimal 
            {
              Nodo RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo E = new Nodo("E"); E.insertarNodo(new Nodo(d,"decimal",dleft,dright)); RESULT = E;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(9/*E*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // E ::= entero 
            {
              Nodo RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo E = new Nodo("E"); E.insertarNodo(new Nodo(e,"entero",eleft,eright)); RESULT = E;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(9/*E*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // E ::= aP E cP 
            {
              Nodo RESULT = null;
		int apleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).right;
		String ap = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		String cp = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo E = new Nodo("E");  E.insertarNodo(new Nodo(ap,apleft,apright));  E.insertarNodo(E1); E.insertarNodo(new Nodo(cp,cpleft,cpright));RESULT=E;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(9/*E*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // E ::= menos E 
            {
              Nodo RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo E = new Nodo("E"); E.insertarNodo(new Nodo(o,oleft,oright)); E.insertarNodo(E1); RESULT=E;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(9/*E*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // E ::= LLAMAROBJ DIME 
            {
              Nodo RESULT = null;
		Nodo A = new Nodo("E"); Nodo I = new Nodo("LLAMAROBJ"); for(Nodo nodo1: listaObj){I.insertarNodo(nodo1);}A.insertarNodo(I);  Nodo D = new Nodo("DIME");
                                                                for(Nodo nodo1: listaDime){
                                                                    D.insertarNodo(nodo1);
                                                                }
                                                                A.insertarNodo(D); RESULT =A;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(9/*E*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // E ::= LLAMAROBJ menosMenos 
            {
              Nodo RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo E = new Nodo("E"); Nodo I = new Nodo("LLAMAROBJ"); for(Nodo nodo1: listaObj){I.insertarNodo(nodo1);}E.insertarNodo(I); E.insertarNodo(new Nodo(o,oleft,oright));  RESULT=E;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(9/*E*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // E ::= LLAMAROBJ masMas 
            {
              Nodo RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo E = new Nodo("E"); Nodo I = new Nodo("LLAMAROBJ"); for(Nodo nodo1: listaObj){I.insertarNodo(nodo1);}E.insertarNodo(I); E.insertarNodo(new Nodo(o,oleft,oright));  RESULT=E;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(9/*E*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // E ::= not E 
            {
              Nodo RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo E = new Nodo("E"); E.insertarNodo(new Nodo(o,oleft,oright)); E.insertarNodo(E1); RESULT=E;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(9/*E*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // E ::= E xor E 
            {
              Nodo RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo E2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo E = new Nodo("E"); E.insertarNodo(E1); E.insertarNodo(new Nodo(o,oleft,oright));  E.insertarNodo(E2); RESULT=E;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(9/*E*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // E ::= E or E 
            {
              Nodo RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo E2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo E = new Nodo("E"); E.insertarNodo(E1); E.insertarNodo(new Nodo(o,oleft,oright));  E.insertarNodo(E2); RESULT=E;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(9/*E*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // E ::= E and E 
            {
              Nodo RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo E2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo E = new Nodo("E"); E.insertarNodo(E1); E.insertarNodo(new Nodo(o,oleft,oright));  E.insertarNodo(E2); RESULT=E;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(9/*E*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // E ::= E igualIgual E 
            {
              Nodo RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo E2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo E = new Nodo("E"); E.insertarNodo(E1); E.insertarNodo(new Nodo(o,oleft,oright));  E.insertarNodo(E2); RESULT=E;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(9/*E*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // E ::= E diferente E 
            {
              Nodo RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo E2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo E = new Nodo("E"); E.insertarNodo(E1); E.insertarNodo(new Nodo(o,oleft,oright));  E.insertarNodo(E2); RESULT=E;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(9/*E*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // E ::= E mayorIgual E 
            {
              Nodo RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo E2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo E = new Nodo("E"); E.insertarNodo(E1); E.insertarNodo(new Nodo(o,oleft,oright));  E.insertarNodo(E2); RESULT=E;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(9/*E*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // E ::= E menorIgual E 
            {
              Nodo RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo E2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo E = new Nodo("E"); E.insertarNodo(E1); E.insertarNodo(new Nodo(o,oleft,oright));  E.insertarNodo(E2); RESULT=E;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(9/*E*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // E ::= E mayor E 
            {
              Nodo RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo E2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo E = new Nodo("E"); E.insertarNodo(E1); E.insertarNodo(new Nodo(o,oleft,oright));  E.insertarNodo(E2); RESULT=E;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(9/*E*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // E ::= E menor E 
            {
              Nodo RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo E2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo E = new Nodo("E"); E.insertarNodo(E1); E.insertarNodo(new Nodo(o,oleft,oright));  E.insertarNodo(E2); RESULT=E;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(9/*E*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // E ::= E pot E 
            {
              Nodo RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo E2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo E = new Nodo("E"); E.insertarNodo(E1); E.insertarNodo(new Nodo(o,oleft,oright));  E.insertarNodo(E2); RESULT=E;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(9/*E*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // E ::= E div E 
            {
              Nodo RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo E2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo E = new Nodo("E"); E.insertarNodo(E1); E.insertarNodo(new Nodo(o,oleft,oright));  E.insertarNodo(E2); RESULT=E;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(9/*E*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // E ::= E por E 
            {
              Nodo RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo E2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo E = new Nodo("E"); E.insertarNodo(E1); E.insertarNodo(new Nodo(o,oleft,oright));  E.insertarNodo(E2); RESULT=E;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(9/*E*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // E ::= E menos E 
            {
              Nodo RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo E2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo E = new Nodo("E"); E.insertarNodo(E1); E.insertarNodo(new Nodo(o,oleft,oright));  E.insertarNodo(E2); RESULT=E;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(9/*E*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // E ::= E mas E 
            {
              Nodo RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo E2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo E = new Nodo("E"); E.insertarNodo(E1); E.insertarNodo(new Nodo(o,oleft,oright));  E.insertarNodo(E2); RESULT=E;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(9/*E*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // VALORES3 ::= E 
            {
              Nodo RESULT = null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo E = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		/*Nodo V3 =new Nodo("VALORES3"); V3.insertarNodo(E); RESULT =V3;*/ listaLlaValor.add(E);
              CUP$ParserGk$result = new java_cup.runtime.Symbol(50/*VALORES3*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // VALORES3 ::= aL VALORES2 cL 
            {
              Nodo RESULT = null;
		int V2left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo V2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		/*Nodo V3 =new Nodo("VALORES3"); V3.insertarNodo(V2);RESULT = V2;*/
              CUP$ParserGk$result = new java_cup.runtime.Symbol(50/*VALORES3*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // VALORES2 ::= VALORES3 
            {
              Nodo RESULT = null;
		int V3left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int V3right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo V3 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		/*Nodo V2 =new Nodo("VALORES2"); V2.insertarNodo(V3); RESULT = V3;*/
              CUP$ParserGk$result = new java_cup.runtime.Symbol(49/*VALORES2*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // VALORES2 ::= VALORES2 coma VALORES3 
            {
              Nodo RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).right;
		Nodo V1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value;
		int V3left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int V3right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo V3 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		/*Nodo V2 =new Nodo("VALORES2"); V2.insertarNodo(V1); V2.insertarNodo(V3); RESULT = V2;*/
              CUP$ParserGk$result = new java_cup.runtime.Symbol(49/*VALORES2*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // VALORES ::= NT$2 aL VALORES2 cL 
            {
              Nodo RESULT = null;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).value != null )
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).value;
		Nodo VA = new Nodo("VALORES"); for(Nodo nodo1: listaLlaValor){
                                                                    VA.insertarNodo(nodo1);
                                                                } RESULT = VA;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(46/*VALORES*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NT$2 ::= 
            {
              Object RESULT = null;
listaLlaValor.clear();
              CUP$ParserGk$result = new java_cup.runtime.Symbol(57/*NT$2*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // DIME ::= aC cC 
            {
              Nodo RESULT = null;
		listaDime.clear(); listaDime.add(new Nodo("UNA"));
              CUP$ParserGk$result = new java_cup.runtime.Symbol(45/*DIME*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // DIME ::= aC E cC 
            {
              Nodo RESULT = null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo E = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		listaDime.clear(); listaDime.add(E);
              CUP$ParserGk$result = new java_cup.runtime.Symbol(45/*DIME*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // DIME ::= DIME aC cC 
            {
              Nodo RESULT = null;
		 listaDime.add(new Nodo("UNA"));
              CUP$ParserGk$result = new java_cup.runtime.Symbol(45/*DIME*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // DIME ::= DIME aC E cC 
            {
              Nodo RESULT = null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo E = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		listaDime.add(E);
              CUP$ParserGk$result = new java_cup.runtime.Symbol(45/*DIME*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ARREGLOS ::= var TIPO id DIME asignacion VALORES 
            {
              Nodo RESULT = null;
		int Tleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).right;
		Nodo T = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).value;
		int V1left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo V1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo V = new Nodo("ARREGLOS"); 
                                                                V.insertarNodo(T); 
                                                                V.insertarNodo(new Nodo(i,"id",ileft,iright)); 
                                                                Nodo D = new Nodo("DIME");
                                                                for(Nodo nodo1: listaDime){
                                                                    D.insertarNodo(nodo1);
                                                                }
                                                                V.insertarNodo(D);
                                                                V.insertarNodo(V1);
                                                                RESULT = V;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(18/*ARREGLOS*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ARREGLOS ::= var TIPO id DIME dosPuntos VISIBILIDAD asignacion VALORES 
            {
              Nodo RESULT = null;
		int Tleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).right;
		Nodo T = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).value;
		int V1left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).right;
		Nodo V1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value;
		int VALleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int VALright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo VAL = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo V = new Nodo("ARREGLOS"); 
                                                                V.insertarNodo(T); 
                                                                V.insertarNodo(new Nodo(i,"id",ileft,iright)); 
                                                                Nodo D = new Nodo("DIME");
                                                                for(Nodo nodo1: listaDime){
                                                                    D.insertarNodo(nodo1);
                                                                }
                                                                V.insertarNodo(D);
                                                                V.insertarNodo(V1);
                                                                V.insertarNodo(VAL);
                                                                RESULT = V;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(18/*ARREGLOS*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ARREGLOS ::= var TIPO id DIME 
            {
              Nodo RESULT = null;
		int Tleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).right;
		Nodo T = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		Nodo V = new Nodo("ARREGLOS"); 
                                                                V.insertarNodo(T); 
                                                                V.insertarNodo(new Nodo(i,"id",ileft,iright));
                                                                Nodo D = new Nodo("DIME");
                                                                for(Nodo nodo1: listaDime){
                                                                    D.insertarNodo(nodo1);
                                                                }
                                                                V.insertarNodo(D);
                                                                RESULT = V;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(18/*ARREGLOS*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ARREGLOS ::= var TIPO id DIME dosPuntos VISIBILIDAD 
            {
              Nodo RESULT = null;
		int Tleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).right;
		Nodo T = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).value;
		int V1left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo V1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo V = new Nodo("ARREGLOS"); 
                                                                V.insertarNodo(T); 
                                                                V.insertarNodo(new Nodo(i,"id",ileft,iright)); 
                                                                Nodo D = new Nodo("DIME");
                                                                for(Nodo nodo1: listaDime){
                                                                    D.insertarNodo(nodo1);
                                                                }
                                                                V.insertarNodo(D);
                                                                V.insertarNodo(V1);
                                                                RESULT = V;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(18/*ARREGLOS*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CASOS3LOOP ::= caso cadena dosPuntos SENTLOOP 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value;
		int Sleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo S = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo CA = new Nodo("CASOS3LOOP"); CA.insertarNodo(new Nodo(i,"cadena",ileft,iright)); CA.insertarNodo(S); RESULT = CA;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(43/*CASOS3LOOP*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CASOS3LOOP ::= caso entero dosPuntos SENTLOOP 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value;
		int Sleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo S = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo CA = new Nodo("CASOS3LOOP"); CA.insertarNodo(new Nodo(i,"entero",ileft,iright)); CA.insertarNodo(S); RESULT = CA;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(43/*CASOS3LOOP*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CASOSLOOP ::= CASOS3LOOP 
            {
              Nodo RESULT = null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo C = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		listaCasos.clear(); listaCasos.add(C);
              CUP$ParserGk$result = new java_cup.runtime.Symbol(42/*CASOSLOOP*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CASOSLOOP ::= CASOSLOOP CASOS3LOOP 
            {
              Nodo RESULT = null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo C = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		 listaCasos.add(C);
              CUP$ParserGk$result = new java_cup.runtime.Symbol(42/*CASOSLOOP*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SELECCIONALOOP ::= seleccion aP E cP aL CASOSLOOP defecto dosPuntos SENTLOOP cL 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-9)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).right;
		Nodo E = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).value;
		int S1left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo S1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		Nodo S = new Nodo("SELECCIONALOOP"); S.insertarNodo(new Nodo(i,ileft,iright));S.insertarNodo(E); Nodo C = new Nodo("CASOSLOOP"); for(Nodo nodo1: listaCasos){C.insertarNodo(nodo1); S.insertarNodo(C); S.insertarNodo(S1); RESULT = S;}
              CUP$ParserGk$result = new java_cup.runtime.Symbol(41/*SELECCIONALOOP*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-9)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SELECCIONALOOP ::= seleccion aP E cP aL CASOSLOOP cL 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).right;
		Nodo E = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).value;
		Nodo S = new Nodo("SELECCIONALOOP"); S.insertarNodo(new Nodo(i,ileft,iright)); S.insertarNodo(E); Nodo C = new Nodo("CASOSLOOP"); for(Nodo nodo1: listaCasos){C.insertarNodo(nodo1); S.insertarNodo(C);RESULT = S;}
              CUP$ParserGk$result = new java_cup.runtime.Symbol(41/*SELECCIONALOOP*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // IFLOOP ::= si aP E cP aL SENTLOOP cL sino aL cL 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-9)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).right;
		Nodo E = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).value;
		int CSleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).left;
		int CSright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).right;
		Nodo CS = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value;
		Nodo I = new Nodo("IFLOOP"); I.insertarNodo(new Nodo(i,ileft,iright)); I.insertarNodo(E); I.insertarNodo(CS); I.insertarNodo(new Nodo(s,sleft,sright)); RESULT= I;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(40/*IFLOOP*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-9)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // IFLOOP ::= si aP E cP aL cL sino aL SENTLOOP cL 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-9)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).right;
		Nodo E = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).value;
		int CS1left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int CS1right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo CS1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		Nodo I = new Nodo("IFLOOP"); I.insertarNodo(new Nodo(i,ileft,iright)); I.insertarNodo(E); I.insertarNodo(CS1); RESULT= I;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(40/*IFLOOP*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-9)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // IFLOOP ::= si aP E cP aL cL 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).right;
		Nodo E = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).value;
		Nodo I = new Nodo("IFLOOP"); I.insertarNodo(new Nodo(i,ileft,iright)); I.insertarNodo(E); RESULT= I;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(40/*IFLOOP*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // IFLOOP ::= si aP E cP aL SENTLOOP cL sino aL SENTLOOP cL 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-10)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-10)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-8)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-8)).right;
		Nodo E = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-8)).value;
		int CSleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).left;
		int CSright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).right;
		Nodo CS = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).value;
		int CS1left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int CS1right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo CS1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		Nodo I = new Nodo("IFLOOP"); I.insertarNodo(new Nodo(i,ileft,iright)); I.insertarNodo(E); I.insertarNodo(CS); I.insertarNodo(CS1); RESULT= I;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(40/*IFLOOP*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-10)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // IFLOOP ::= si aP E cP aL SENTLOOP cL 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).right;
		Nodo E = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).value;
		int CSleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int CSright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo CS = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		Nodo I = new Nodo("IFLOOP"); I.insertarNodo(new Nodo(i,ileft,iright)); I.insertarNodo(E); I.insertarNodo(CS); RESULT= I;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(40/*IFLOOP*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CONTROLESLOOP ::= HACERR 
            {
              Nodo RESULT = null;
		int Hleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Hright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo H = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		RESULT = H;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(39/*CONTROLESLOOP*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CONTROLESLOOP ::= MIENTRASS 
            {
              Nodo RESULT = null;
		int Mleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Mright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo M = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		RESULT = M;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(39/*CONTROLESLOOP*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CONTROLESLOOP ::= PARAA 
            {
              Nodo RESULT = null;
		int Pleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo P = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		RESULT = P;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(39/*CONTROLESLOOP*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CONTROLESLOOP ::= SELECCIONALOOP 
            {
              Nodo RESULT = null;
		int Sleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo S = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		RESULT = S;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(39/*CONTROLESLOOP*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CONTROLESLOOP ::= IFLOOP 
            {
              Nodo RESULT = null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo I = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		RESULT = I;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(39/*CONTROLESLOOP*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CUERPOSENTLOOP ::= terminar interrogacion 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		Nodo CF = new Nodo("CUERPOSENTLOOP"); CF.insertarNodo(new Nodo(i,"id",ileft,iright));RESULT =CF;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(38/*CUERPOSENTLOOP*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CUERPOSENTLOOP ::= continuar interrogacion 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		Nodo CF = new Nodo("CUERPOSENTLOOP"); CF.insertarNodo(new Nodo(i,"id",ileft,iright));RESULT =CF;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(38/*CUERPOSENTLOOP*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CUERPOSENTLOOP ::= CONTROLESLOOP 
            {
              Nodo RESULT = null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo C = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo CF = new Nodo("CUERPOSENTLOOP"); CF.insertarNodo(C); RESULT =CF;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(38/*CUERPOSENTLOOP*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CUERPOSENTLOOP ::= SINLOOP 
            {
              Nodo RESULT = null;
		int SLleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int SLright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo SL = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo CF = new Nodo("CUERPOSENTLOOP"); CF.insertarNodo(SL); RESULT =CF;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(38/*CUERPOSENTLOOP*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SENTLOOP ::= CUERPOSENTLOOP 
            {
              Nodo RESULT = null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo C = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo S=new Nodo("SENTLOOP");S.insertarNodo(C); RESULT = S;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(44/*SENTLOOP*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SENTLOOP ::= SENTLOOP CUERPOSENTLOOP 
            {
              Nodo RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo S1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo C = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo S=new Nodo("SENTLOOP"); S.insertarNodo(S1); S.insertarNodo(C); RESULT = S;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(44/*SENTLOOP*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // MIENTRASS ::= mientras aP E cP aL cL 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).value;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).value;

              CUP$ParserGk$result = new java_cup.runtime.Symbol(27/*MIENTRASS*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // MIENTRASS ::= mientras aP E cP aL SENTLOOP cL 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).value;
		int E1left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).right;
		Nodo E1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).value;
		int Sleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo S = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		Nodo H = new Nodo("MIENTRAS"); H.insertarNodo(new Nodo(i,ileft,iright));H.insertarNodo(E1); H.insertarNodo(S); RESULT = H;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(27/*MIENTRASS*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // HACERR ::= hacer aL cL mientras aP E cP interrogacion 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).right;
		Nodo E2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value;

              CUP$ParserGk$result = new java_cup.runtime.Symbol(28/*HACERR*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // HACERR ::= hacer aL SENTLOOP cL mientras aP E cP interrogacion 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-8)).value;
		int Sleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).right;
		Nodo S = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).right;
		Nodo E2 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value;
		Nodo H = new Nodo("HACER"); H.insertarNodo(new Nodo(i,ileft,iright)); H.insertarNodo(S); H.insertarNodo(E2); RESULT = H;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(28/*HACERR*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-8)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // VARPARA ::= LLAMAROBJ asignacion E 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo E = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo VP = new Nodo("VARPARA"); VP.insertarNodo(i); VP.insertarNodo(E); RESULT=VP;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(35/*VARPARA*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // VARPARA ::= tipoEntero id asignacion E 
            {
              Nodo RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo E = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo VP = new Nodo("VARPARA"); VP.insertarNodo(new Nodo(e,eleft,eright)); VP.insertarNodo(new Nodo(i,"id",ileft,iright)); VP.insertarNodo(E); RESULT=VP;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(35/*VARPARA*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PARAA ::= para aP VARPARA dosPuntos E dosPuntos E cP aL SENTLOOP cL 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-10)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-10)).value;
		int VPleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-8)).left;
		int VPright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-8)).right;
		Nodo VP = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-8)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).right;
		Nodo E = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).value;
		int OPleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).left;
		int OPright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).right;
		Nodo OP = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).value;
		int Sleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo S = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		Nodo P = new Nodo("PARAA"); P.insertarNodo(new Nodo(i,ileft,iright));
                                                                            P.insertarNodo(VP);
                                                                            P.insertarNodo(E);
                                                                            P.insertarNodo(OP);
                                                                            P.insertarNodo(S);
                                                                            RESULT = P;
                                                                            
              CUP$ParserGk$result = new java_cup.runtime.Symbol(26/*PARAA*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-10)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CASOS3 ::= caso cadena dosPuntos SENT 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value;
		int Sleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo S = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo CA = new Nodo("CASOS3"); CA.insertarNodo(new Nodo(i,"cadena",ileft,iright)); CA.insertarNodo(S); RESULT = CA;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(31/*CASOS3*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CASOS3 ::= caso entero dosPuntos SENT 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value;
		int Sleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo S = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo CA = new Nodo("CASOS3"); CA.insertarNodo(new Nodo(i,"entero",ileft,iright)); CA.insertarNodo(S); RESULT = CA;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(31/*CASOS3*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CASOS ::= CASOS3 
            {
              Nodo RESULT = null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo C = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		listaCasos.clear(); listaCasos.add(C);
              CUP$ParserGk$result = new java_cup.runtime.Symbol(29/*CASOS*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CASOS ::= CASOS CASOS3 
            {
              Nodo RESULT = null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo C = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		 listaCasos.add(C);
              CUP$ParserGk$result = new java_cup.runtime.Symbol(29/*CASOS*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SELECCIONA ::= seleccion aP E cP aL CASOS defecto dosPuntos SENT cL 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-9)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).right;
		Nodo E = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).value;
		int S1left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo S1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		Nodo S = new Nodo("SELECCIONA"); S.insertarNodo(new Nodo(i,ileft,iright));S.insertarNodo(E); Nodo C = new Nodo("CASOS"); for(Nodo nodo1: listaCasos){C.insertarNodo(nodo1);} S.insertarNodo(C); S.insertarNodo(S1); RESULT = S;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(25/*SELECCIONA*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-9)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SELECCIONA ::= seleccion aP E cP aL CASOS cL 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).right;
		Nodo E = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).value;
		Nodo S = new Nodo("SELECCIONA"); S.insertarNodo(new Nodo(i,ileft,iright)); S.insertarNodo(E); Nodo C = new Nodo("CASOS"); for(Nodo nodo1: listaCasos){C.insertarNodo(nodo1);} S.insertarNodo(C);RESULT = S;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(25/*SELECCIONA*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // IF ::= si aP E cP aL SENT cL sino aL cL 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-9)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).right;
		Nodo E = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).value;
		int CSleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).left;
		int CSright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).right;
		Nodo CS = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value;
		Nodo I = new Nodo("IF"); I.insertarNodo(new Nodo(i,ileft,iright)); I.insertarNodo(E); I.insertarNodo(CS); I.insertarNodo(new Nodo(s,sleft,sright)); RESULT= I;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(24/*IF*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-9)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // IF ::= si aP E cP aL cL sino aL SENT cL 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-9)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).right;
		Nodo E = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).value;
		int CS1left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int CS1right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo CS1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		Nodo I = new Nodo("IF"); I.insertarNodo(new Nodo(i,ileft,iright)); I.insertarNodo(E); I.insertarNodo(new Nodo(s,sleft,sright));I.insertarNodo(CS1); RESULT= I;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(24/*IF*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-9)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // IF ::= si aP E cP aL cL 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).right;
		Nodo E = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).value;
		Nodo I = new Nodo("IF"); I.insertarNodo(new Nodo(i,ileft,iright)); I.insertarNodo(E); RESULT= I;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(24/*IF*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // IF ::= si aP E cP aL SENT cL sino aL SENT cL 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-10)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-10)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-8)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-8)).right;
		Nodo E = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-8)).value;
		int CSleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).left;
		int CSright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).right;
		Nodo CS = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).value;
		int CS1left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int CS1right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo CS1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		Nodo I = new Nodo("IF"); I.insertarNodo(new Nodo(i,ileft,iright)); I.insertarNodo(E); I.insertarNodo(CS); I.insertarNodo(new Nodo(s,sleft,sright));I.insertarNodo(CS1); RESULT= I;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(24/*IF*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-10)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // IF ::= si aP E cP aL SENT cL 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).right;
		Nodo E = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).value;
		int CSleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int CSright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo CS = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		Nodo I = new Nodo("IF"); I.insertarNodo(new Nodo(i,ileft,iright)); I.insertarNodo(E); I.insertarNodo(CS); RESULT= I;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(24/*IF*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ASIGNACION ::= LLAMAROBJ DIME NT$1 asignacion E 
            {
              Nodo RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value != null )
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo E = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		 RESULT.insertarNodo(E); RESULT = RESULT;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(19/*ASIGNACION*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$1 ::= 
            {
              Object RESULT = null;
Nodo A = new Nodo("ASIGNACION"); Nodo I = new Nodo("LLAMAROBJ"); for(Nodo nodo1: listaObj){I.insertarNodo(nodo1);}A.insertarNodo(I);  Nodo D = new Nodo("DIME");
                                                                for(Nodo nodo1: listaDime){
                                                                    D.insertarNodo(nodo1);
                                                                }
                                                                A.insertarNodo(D); RESULT =A; 
              CUP$ParserGk$result = new java_cup.runtime.Symbol(56/*NT$1*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ASIGNACION ::= LLAMAROBJ menosMenos 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo A = new Nodo("ASIGNACION"); Nodo I = new Nodo("LLAMAROBJ"); for(Nodo nodo1: listaObj){I.insertarNodo(nodo1);}A.insertarNodo(I); A.insertarNodo(new Nodo(i,ileft,iright));  RESULT =A;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(19/*ASIGNACION*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ASIGNACION ::= LLAMAROBJ masMas 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo A = new Nodo("ASIGNACION"); Nodo I = new Nodo("LLAMAROBJ"); for(Nodo nodo1: listaObj){I.insertarNodo(nodo1);}A.insertarNodo(I); A.insertarNodo(new Nodo(i,ileft,iright));  RESULT =A;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(19/*ASIGNACION*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ASIGNACION ::= LLAMAROBJ NT$0 asignacion E 
            {
              Nodo RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value != null )
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo E = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		 RESULT.insertarNodo(E); RESULT = RESULT;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(19/*ASIGNACION*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$0 ::= 
            {
              Object RESULT = null;
Nodo A = new Nodo("ASIGNACION"); Nodo I = new Nodo("LLAMAROBJ"); for(Nodo nodo1: listaObj){I.insertarNodo(nodo1);}A.insertarNodo(I); RESULT =A; 
              CUP$ParserGk$result = new java_cup.runtime.Symbol(55/*NT$0*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CONTROLES ::= HACERR 
            {
              Nodo RESULT = null;
		int Hleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Hright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo H = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		RESULT = H;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(16/*CONTROLES*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CONTROLES ::= MIENTRASS 
            {
              Nodo RESULT = null;
		int Mleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Mright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo M = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		RESULT = M;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(16/*CONTROLES*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CONTROLES ::= PARAA 
            {
              Nodo RESULT = null;
		int Pleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo P = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		RESULT = P;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(16/*CONTROLES*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CONTROLES ::= SELECCIONA 
            {
              Nodo RESULT = null;
		int Sleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo S = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		RESULT = S;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(16/*CONTROLES*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CONTROLES ::= IF 
            {
              Nodo RESULT = null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo I = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		RESULT = I;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(16/*CONTROLES*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PARAENVIAR ::= E 
            {
              Nodo RESULT = null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo E = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		listaValores.clear(); listaValores.add(E);
              CUP$ParserGk$result = new java_cup.runtime.Symbol(23/*PARAENVIAR*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PARAENVIAR ::= PARAENVIAR coma E 
            {
              Nodo RESULT = null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo E = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		listaValores.add(E);
              CUP$ParserGk$result = new java_cup.runtime.Symbol(23/*PARAENVIAR*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LLAMARFUN ::= llamar LLAMAROBJ 
            {
              Nodo RESULT = null;
		Nodo LF = new Nodo("LLAMARFUN"); Nodo I = new Nodo("LLAMAROBJ"); for(Nodo nodo1: listaObj){I.insertarNodo(nodo1);} LF.insertarNodo(I); RESULT = LF;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(17/*LLAMARFUN*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LISTAVAR ::= id 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		listaIds.clear(); listaIds.add(new Nodo(i,"id",ileft,iright));
              CUP$ParserGk$result = new java_cup.runtime.Symbol(22/*LISTAVAR*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LISTAVAR ::= LISTAVAR coma id 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		listaIds.add(new Nodo(i,"id",ileft,iright));
              CUP$ParserGk$result = new java_cup.runtime.Symbol(22/*LISTAVAR*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VARIABLESLOCAL ::= var TIPO LISTAVAR 
            {
              Nodo RESULT = null;
		int Tleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo T = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		Nodo V = new Nodo("VARIABLESLOCAL"); 
                                                                V.insertarNodo(T); 
                                                                Nodo LV =  new Nodo("LISTAVAR");
                                                                for(Nodo nodo1: listaIds){
                                                                    LV.insertarNodo(nodo1);
                                                                }
                                                                V.insertarNodo(LV);
                                                                RESULT = V;
                                                                
              CUP$ParserGk$result = new java_cup.runtime.Symbol(15/*VARIABLESLOCAL*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VARIABLESLOCAL ::= var TIPO id asignacion E 
            {
              Nodo RESULT = null;
		int Tleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).right;
		Nodo T = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo E = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo V = new Nodo("VARIABLESLOCAL"); 
                                                                V.insertarNodo(T); 
                                                                V.insertarNodo(new Nodo(i,"id",ileft,iright));
                                                                
                                                                V.insertarNodo(E);
                                                                RESULT = V;
                                                                
              CUP$ParserGk$result = new java_cup.runtime.Symbol(15/*VARIABLESLOCAL*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FUNNATAS ::= llamarhk id aP PARAENVIAR cP 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).value;
		Nodo F = new Nodo("FUNNATAS"); F.insertarNodo(new Nodo(i,ileft,iright)); F.insertarNodo(new Nodo(i2,i2left,i2right)); Nodo LP = new Nodo("PARAENVIAR");for (Nodo nodo1 : listaValores) {LP.insertarNodo(nodo1);} F.insertarNodo(LP); RESULT = F;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(20/*FUNNATAS*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FUNNATAS ::= llamarhk id aP cP 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value;
		Nodo F = new Nodo("FUNNATAS"); F.insertarNodo(new Nodo(i,ileft,iright)); F.insertarNodo(new Nodo(i2,i2left,i2right));RESULT = F;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(20/*FUNNATAS*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FUNNATAS ::= imprimir aP E cP 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo E = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		Nodo F = new Nodo("FUNNATAS"); F.insertarNodo(new Nodo(i,ileft,iright)); F.insertarNodo(E); RESULT = F;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(20/*FUNNATAS*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FUNNATAS ::= graphikar aP E cP 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo E = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		Nodo F = new Nodo("FUNNATAS"); F.insertarNodo(new Nodo(i,ileft,iright)); F.insertarNodo(E); RESULT = F;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(20/*FUNNATAS*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SINLOOP ::= INSTANCIA interrogacion 
            {
              Nodo RESULT = null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo I = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		Nodo C= new Nodo("SINLOOP"); C.insertarNodo(I); RESULT = C;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(32/*SINLOOP*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SINLOOP ::= retornar E interrogacion 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo E = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		Nodo CF = new Nodo("SINLOOP"); CF.insertarNodo(new Nodo(i,"id",ileft,iright)); CF.insertarNodo(E); RESULT =CF;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(32/*SINLOOP*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SINLOOP ::= retornar interrogacion 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		Nodo CF = new Nodo("SINLOOP"); CF.insertarNodo(new Nodo(i,"id",ileft,iright));RESULT =CF;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(32/*SINLOOP*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SINLOOP ::= FUNNATAS interrogacion 
            {
              Nodo RESULT = null;
		int FNleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int FNright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo FN = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		Nodo CF = new Nodo("SINLOOP"); CF.insertarNodo(FN);RESULT =CF;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(32/*SINLOOP*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SINLOOP ::= ASIGNACION interrogacion 
            {
              Nodo RESULT = null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo A = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		Nodo CF = new Nodo("SINLOOP"); CF.insertarNodo(A);RESULT =CF;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(32/*SINLOOP*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SINLOOP ::= ARREGLOS interrogacion 
            {
              Nodo RESULT = null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo A = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		Nodo CF = new Nodo("SINLOOP"); CF.insertarNodo(A);RESULT =CF;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(32/*SINLOOP*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SINLOOP ::= LLAMARFUN interrogacion 
            {
              Nodo RESULT = null;
		int LLFleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int LLFright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo LLF = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		Nodo CF = new Nodo("SINLOOP"); CF.insertarNodo(LLF);RESULT =CF;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(32/*SINLOOP*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SINLOOP ::= VARIABLESLOCAL interrogacion 
            {
              Nodo RESULT = null;
		int Vleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int Vright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo V = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		Nodo CF = new Nodo("SINLOOP"); CF.insertarNodo(V);RESULT =CF;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(32/*SINLOOP*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CUERPOSENT ::= CONTROLES 
            {
              Nodo RESULT = null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo C = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo CF = new Nodo("CUERPOSENT"); CF.insertarNodo(C);RESULT =CF;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(11/*CUERPOSENT*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CUERPOSENT ::= SINLOOP 
            {
              Nodo RESULT = null;
		int SLleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int SLright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo SL = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo CF = new Nodo("CUERPOSENT"); CF.insertarNodo(SL); RESULT =CF;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(11/*CUERPOSENT*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENT ::= CUERPOSENT 
            {
              Nodo RESULT = null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo C = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo S=new Nodo("SENT"); S.insertarNodo(C); RESULT = S;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(10/*SENT*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENT ::= SENT CUERPOSENT 
            {
              Nodo RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo S1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo C = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo S=new Nodo("SENT"); S.insertarNodo(S1); S.insertarNodo(C); RESULT = S;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(10/*SENT*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INSTANCIA ::= var id id 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo I = new Nodo("INSTANCIA"); I.insertarNodo(new Nodo(i,"id",ileft,iright));I.insertarNodo(new Nodo(i2,"id",i2left,i2right)); RESULT = I;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(47/*INSTANCIA*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INSTANCIA ::= var id id dosPuntos VISIBILIDAD 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value;
		int Vleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Vright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo V = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo I = new Nodo("INSTANCIA"); I.insertarNodo(new Nodo(i,"id",ileft,iright));I.insertarNodo(new Nodo(i2,"id",i2left,i2right)); I.insertarNodo(V); RESULT = I;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(47/*INSTANCIA*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INSTANCIA ::= var id id asignacion nuevo id aP cP 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).value;
		int i3left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).right;
		String i3 = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value;
		Nodo I = new Nodo("INSTANCIA"); I.insertarNodo(new Nodo(i,"id",ileft,iright));I.insertarNodo(new Nodo(i2,"id",i2left,i2right)); I.insertarNodo(new Nodo(n,nleft,nright)); I.insertarNodo(new Nodo(i3,"id",i3left,i3right)); RESULT = I;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(47/*INSTANCIA*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INSTANCIA ::= var id id dosPuntos VISIBILIDAD asignacion nuevo id aP cP 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-8)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).value;
		int Vleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).left;
		int Vright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).right;
		Nodo V = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).value;
		int i3left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).right;
		String i3 = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value;
		Nodo I = new Nodo("INSTANCIA"); I.insertarNodo(new Nodo(i,"id",ileft,iright));I.insertarNodo(new Nodo(i2,"id",i2left,i2right)); I.insertarNodo(V); I.insertarNodo(new Nodo(n,nleft,nright)); I.insertarNodo(new Nodo(i3,"id",i3left,i3right));RESULT = I;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(47/*INSTANCIA*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-9)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LISTAPAR ::= TIPO id 
            {
              Nodo RESULT = null;
		int Tleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo T = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		listaPar.clear(); Nodo LP =  new Nodo("LISTAPAR"); LP.insertarNodo(T); LP.insertarNodo(new Nodo(i,"id",ileft,iright)); listaPar.add(LP);
              CUP$ParserGk$result = new java_cup.runtime.Symbol(14/*LISTAPAR*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LISTAPAR ::= LISTAPAR coma TIPO id 
            {
              Nodo RESULT = null;
		int Tleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo T = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo LP =  new Nodo("LISTAPAR"); LP.insertarNodo(T); LP.insertarNodo(new Nodo(i,"id",ileft,iright)); listaPar.add(LP);
              CUP$ParserGk$result = new java_cup.runtime.Symbol(14/*LISTAPAR*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VACIOID ::= id 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		RESULT = new Nodo(i,"id",ileft,iright);
              CUP$ParserGk$result = new java_cup.runtime.Symbol(54/*VACIOID*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VACIOID ::= vacio 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		RESULT = new Nodo(i,"vacio",ileft,iright);
              CUP$ParserGk$result = new java_cup.runtime.Symbol(54/*VACIOID*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FUNCIONES ::= vacio inicio aP cP aL SENT cL 
            {
              Nodo RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).value;
		int Sleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo S = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		Nodo F = new Nodo("FUNCIONES"); F.insertarNodo(new Nodo(i,"id",ileft,iright)); F.insertarNodo(S); RESULT =F;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(12/*FUNCIONES*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FUNCIONES ::= VACIOID id aP cP dosPuntos VISIBILIDAD aL SENT cL 
            {
              Nodo RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-8)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-8)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).value;
		int Vleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).left;
		int Vright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).right;
		Nodo V = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).value;
		int Sleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo S = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		Nodo F = new Nodo("FUNCIONES"); F.insertarNodo(v); F.insertarNodo(new Nodo(i,"id",ileft,iright)); F.insertarNodo(V); F.insertarNodo(S);RESULT =F;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(12/*FUNCIONES*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-8)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FUNCIONES ::= VACIOID id aP cP aL SENT cL 
            {
              Nodo RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).value;
		int Sleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo S = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		Nodo F = new Nodo("FUNCIONES"); F.insertarNodo(v); F.insertarNodo(new Nodo(i,"id",ileft,iright));  F.insertarNodo(S);RESULT =F;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(12/*FUNCIONES*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FUNCIONES ::= VACIOID id aP LISTAPAR cP dosPuntos VISIBILIDAD aL SENT cL 
            {
              Nodo RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-9)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-9)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-8)).value;
		int Vleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).left;
		int Vright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).right;
		Nodo V = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).value;
		int Sleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo S = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		Nodo F = new Nodo("FUNCIONES"); F.insertarNodo(v); F.insertarNodo(new Nodo(i,"id",ileft,iright)); Nodo LP = new Nodo("LISTAPAR");for (Nodo nodo1 : listaPar) {LP.insertarNodo(nodo1);} F.insertarNodo(LP); F.insertarNodo(V); F.insertarNodo(S);RESULT =F;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(12/*FUNCIONES*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-9)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FUNCIONES ::= VACIOID id aP LISTAPAR cP aL SENT cL 
            {
              Nodo RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).value;
		int Sleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo S = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		Nodo F = new Nodo("FUNCIONES"); F.insertarNodo(v); F.insertarNodo(new Nodo(i,"id",ileft,iright));Nodo LP = new Nodo("LISTAPAR");for (Nodo nodo1 : listaPar) {LP.insertarNodo(nodo1);}  F.insertarNodo(LP);  F.insertarNodo(S); RESULT =F;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(12/*FUNCIONES*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FUNCIONES ::= TIPO id aP cP dosPuntos VISIBILIDAD aL SENT cL 
            {
              Nodo RESULT = null;
		int Tleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-8)).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-8)).right;
		Nodo T = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).value;
		int Vleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).left;
		int Vright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).right;
		Nodo V = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).value;
		int Sleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo S = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		Nodo F = new Nodo("FUNCIONES"); F.insertarNodo(T); F.insertarNodo(new Nodo(i,"id",ileft,iright)); F.insertarNodo(V); F.insertarNodo(S);RESULT =F;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(12/*FUNCIONES*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-8)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FUNCIONES ::= TIPO id aP cP aL SENT cL 
            {
              Nodo RESULT = null;
		int Tleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).right;
		Nodo T = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).value;
		int Sleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo S = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		Nodo F = new Nodo("FUNCIONES"); F.insertarNodo(T); F.insertarNodo(new Nodo(i,"id",ileft,iright));  F.insertarNodo(S);RESULT =F;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(12/*FUNCIONES*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FUNCIONES ::= TIPO id aP LISTAPAR cP dosPuntos VISIBILIDAD aL SENT cL 
            {
              Nodo RESULT = null;
		int Tleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-9)).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-9)).right;
		Nodo T = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-8)).value;
		int Vleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).left;
		int Vright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).right;
		Nodo V = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).value;
		int Sleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo S = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		Nodo F = new Nodo("FUNCIONES"); F.insertarNodo(T); F.insertarNodo(new Nodo(i,"id",ileft,iright)); Nodo LP = new Nodo("LISTAPAR");for (Nodo nodo1 : listaPar) {LP.insertarNodo(nodo1);} F.insertarNodo(LP); F.insertarNodo(V);  F.insertarNodo(S); RESULT =F;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(12/*FUNCIONES*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-9)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FUNCIONES ::= TIPO id aP LISTAPAR cP aL SENT cL 
            {
              Nodo RESULT = null;
		int Tleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).right;
		Nodo T = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).value;
		int Sleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo S = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		Nodo F = new Nodo("FUNCIONES"); F.insertarNodo(T); F.insertarNodo(new Nodo(i,"id",ileft,iright));Nodo LP = new Nodo("LISTAPAR");for (Nodo nodo1 : listaPar) {LP.insertarNodo(nodo1);}                         F.insertarNodo(LP); F.insertarNodo(S); RESULT =F;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(12/*FUNCIONES*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CUERPOALS ::= ARREGLOS interrogacion 
            {
              Nodo RESULT = null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo A = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		Nodo CF = new Nodo("CUERPOALS"); CF.insertarNodo(A);RESULT =CF;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(13/*CUERPOALS*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CUERPOALS ::= INSTANCIA interrogacion 
            {
              Nodo RESULT = null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo I = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		Nodo C= new Nodo("CUERPOALS"); C.insertarNodo(I); RESULT = C;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(13/*CUERPOALS*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CUERPOALS ::= FUNCIONES 
            {
              Nodo RESULT = null;
		int Fleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Fright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo F = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo C= new Nodo("CUERPOALS"); C.insertarNodo(F); RESULT = C;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(13/*CUERPOALS*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CUERPOALS ::= VARIABLESGLO interrogacion 
            {
              Nodo RESULT = null;
		int Vleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int Vright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo V = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		Nodo C= new Nodo("CUERPOALS"); C.insertarNodo(V); RESULT = C;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(13/*CUERPOALS*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CUERPOALSRECUR ::= CUERPOALS 
            {
              Nodo RESULT = null;
		int CAleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int CAright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo CA = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo C = new Nodo("CUERPOALSRECUR"); C.insertarNodo(CA); RESULT = C;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(51/*CUERPOALSRECUR*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CUERPOALSRECUR ::= CUERPOALSRECUR CUERPOALS 
            {
              Nodo RESULT = null;
		int CA1left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int CA1right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo CA1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		int CAleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int CAright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo CA = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo C = new Nodo("CUERPOALSRECUR"); C.insertarNodo(CA1); C.insertarNodo(CA); RESULT = C;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(51/*CUERPOALSRECUR*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DEFALS ::= als id aL CUERPOALSRECUR cL 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).value;
		int CAleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int CAright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo CA = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		Nodo DA = new Nodo("DEFALS"); DA.insertarNodo(new Nodo(i,"id",ileft,iright)); DA.insertarNodo(CA); RESULT = DA;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(8/*DEFALS*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DEFALS ::= als id hereda id aL CUERPOALSRECUR cL 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).value;
		int CAleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int CAright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo CA = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		Nodo DA = new Nodo("DEFALS"); DA.insertarNodo(new Nodo(i,"id",ileft,iright));  DA.insertarNodo(new Nodo(h,hleft,hright)); DA.insertarNodo(CA); RESULT = DA;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(8/*DEFALS*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DEFALS ::= als id dosPuntos VISIBILIDAD hereda id aL CUERPOALSRECUR cL 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-7)).value;
		int Vleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).left;
		int Vright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).right;
		Nodo V = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).value;
		int CAleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int CAright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo CA = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		Nodo DA = new Nodo("DEFALS"); DA.insertarNodo(new Nodo(i,"id",ileft,iright)); DA.insertarNodo(V); DA.insertarNodo(new Nodo(h,hleft,hright)); DA.insertarNodo(CA); RESULT = DA;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(8/*DEFALS*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-8)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DEFALS ::= als id dosPuntos VISIBILIDAD aL CUERPOALSRECUR cL 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).value;
		int Vleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).left;
		int Vright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).right;
		Nodo V = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).value;
		int CAleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int CAright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo CA = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		Nodo DA = new Nodo("DEFALS"); DA.insertarNodo(new Nodo(i,"id",ileft,iright)); DA.insertarNodo(V); DA.insertarNodo(CA); RESULT = DA;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(8/*DEFALS*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPO ::= tipoCadena 
            {
              Nodo RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		RESULT = new Nodo(t,tleft,tright);
              CUP$ParserGk$result = new java_cup.runtime.Symbol(6/*TIPO*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPO ::= tipoBool 
            {
              Nodo RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		RESULT = new Nodo(t,tleft,tright);
              CUP$ParserGk$result = new java_cup.runtime.Symbol(6/*TIPO*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPO ::= tipoCaracter 
            {
              Nodo RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		RESULT = new Nodo(t,tleft,tright);
              CUP$ParserGk$result = new java_cup.runtime.Symbol(6/*TIPO*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPO ::= tipoDecimal 
            {
              Nodo RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		RESULT = new Nodo(t,tleft,tright);
              CUP$ParserGk$result = new java_cup.runtime.Symbol(6/*TIPO*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPO ::= tipoEntero 
            {
              Nodo RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		RESULT = new Nodo(t,tleft,tright);
              CUP$ParserGk$result = new java_cup.runtime.Symbol(6/*TIPO*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VISIBILIDAD ::= privado 
            {
              Nodo RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo V = new Nodo("VISIBILIDAD"); V.insertarNodo(new Nodo(p,pleft,pright)); RESULT = V;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(7/*VISIBILIDAD*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VISIBILIDAD ::= protegido 
            {
              Nodo RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo V = new Nodo("VISIBILIDAD"); V.insertarNodo(new Nodo(p,pleft,pright)); RESULT = V;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(7/*VISIBILIDAD*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VISIBILIDAD ::= publico 
            {
              Nodo RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo V = new Nodo("VISIBILIDAD"); V.insertarNodo(new Nodo(p,pleft,pright)); RESULT = V;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(7/*VISIBILIDAD*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VARIABLESGLO ::= var TIPO id dosPuntos VISIBILIDAD asignacion E 
            {
              Nodo RESULT = null;
		int Tleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).right;
		Nodo T = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).value;
		int V1left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).right;
		Nodo V1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo E = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		
                                                                Nodo V = new Nodo("VARIABLESGLO"); 
                                                                V.insertarNodo(T); 
                                                                V.insertarNodo(new Nodo(i,"id",ileft,iright)); 
                                                                V.insertarNodo(V1); 
                                                                V.insertarNodo(E);
                                                                RESULT = V;
                                                                
              CUP$ParserGk$result = new java_cup.runtime.Symbol(5/*VARIABLESGLO*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-6)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VARIABLESGLO ::= var TIPO id dosPuntos VISIBILIDAD 
            {
              Nodo RESULT = null;
		int Tleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).right;
		Nodo T = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value;
		int V1left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo V1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo V = new Nodo("VARIABLESGLO"); 
                                                                V.insertarNodo(T); 
                                                                V.insertarNodo(new Nodo(i,"id",ileft,iright)); 
                                                                V.insertarNodo(V1); 
                                                                RESULT = V;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(5/*VARIABLESGLO*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VARIABLESGLO ::= var TIPO id 
            {
              Nodo RESULT = null;
		int Tleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo T = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo V = new Nodo("VARIABLESGLO"); 
                                                                V.insertarNodo(T); 
                                                                V.insertarNodo(new Nodo(i,"id",ileft,iright)); 
                                                                RESULT = V;
                                                                
              CUP$ParserGk$result = new java_cup.runtime.Symbol(5/*VARIABLESGLO*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VARIABLESGLO ::= var TIPO id asignacion E 
            {
              Nodo RESULT = null;
		int Tleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).right;
		Nodo T = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo E = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo V = new Nodo("VARIABLESGLO"); 
                                                                V.insertarNodo(T); 
                                                                V.insertarNodo(new Nodo(i,"id",ileft,iright)); 
                                                                V.insertarNodo(E);
                                                                RESULT = V;
                                                                
              CUP$ParserGk$result = new java_cup.runtime.Symbol(5/*VARIABLESGLO*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CUERPOGK ::= DEFALS 
            {
              Nodo RESULT = null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo D = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo C= new Nodo("CUERPOGK"); C.insertarNodo(D); RESULT = C;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(4/*CUERPOGK*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // I ::= CUERPOGK 
            {
              Nodo RESULT = null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo C = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo I = new Nodo("I"); I.insertarNodo(C); RESULT = I;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(3/*I*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // I ::= I CUERPOGK 
            {
              Nodo RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo I1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo C = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		Nodo I = new Nodo("I"); I.insertarNodo(I1); I.insertarNodo(C); RESULT = I;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(3/*I*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPORT ::= importar archivogk interrogacion 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		listaIds.clear();Nodo IM = new Nodo("IMPORT"); 
                                IM.insertarNodo(new Nodo(i,ileft,iright)); IM.insertarNodo(new Nodo(a,aleft,aright)); listaIds.add(IM);
              CUP$ParserGk$result = new java_cup.runtime.Symbol(2/*IMPORT*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPORT ::= incluirhk id interrogacion 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		listaIds.clear();Nodo IM = new Nodo("IMPORT"); 
                                IM.insertarNodo(new Nodo(i,ileft,iright)); IM.insertarNodo(new Nodo(a,"id",aleft,aright)); listaIds.add(IM);
              CUP$ParserGk$result = new java_cup.runtime.Symbol(2/*IMPORT*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IMPORTACIONES ::= IMPORT 
            {
              Nodo RESULT = null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo I = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		listaImp.clear(); listaImp.add(I);
              CUP$ParserGk$result = new java_cup.runtime.Symbol(52/*IMPORTACIONES*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IMPORTACIONES ::= IMPORTACIONES IMPORT 
            {
              Nodo RESULT = null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo I = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		listaImp.add(I);
              CUP$ParserGk$result = new java_cup.runtime.Symbol(52/*IMPORTACIONES*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= I 
            {
              Nodo RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo I1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		javax.swing.JOptionPane.showMessageDialog(null,"todo bien  Graphik");
                Nodo I = new Nodo("INICIO"); I.insertarNodo(I1); I.graficarAst(I,"GRAPHIK");
                RecoleccionGraphik reco = new RecoleccionGraphik();
                reco.recoleccion(I);
                
            
              CUP$ParserGk$result = new java_cup.runtime.Symbol(1/*INICIO*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= IMPORTACIONES I 
            {
              Nodo RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right;
		Nodo I1 = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).value;
		javax.swing.JOptionPane.showMessageDialog(null,"todo bien  Graphik");Nodo I = new Nodo("INICIO"); Nodo IM = new Nodo("IMPORTACIONES"); for(Nodo nodo1:listaImp){IM.insertarNodo(nodo1);}I.insertarNodo(IM); I.insertarNodo(I1); I.graficarAst(I,"GRAPHIK"); RecoleccionGraphik reco = new RecoleccionGraphik();
                reco.recoleccion(I);
              CUP$ParserGk$result = new java_cup.runtime.Symbol(1/*INICIO*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          return CUP$ParserGk$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).value;
		RESULT = start_val;
              CUP$ParserGk$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserGk$stack.elementAt(CUP$ParserGk$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$ParserGk$parser.done_parsing();
          return CUP$ParserGk$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

