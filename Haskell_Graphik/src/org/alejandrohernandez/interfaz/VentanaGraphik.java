/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.alejandrohernandez.interfaz;

import jaco.swing.autocomplete.Autocomplete;
import java.awt.BorderLayout;
import java.awt.HeadlessException;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JEditorPane;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.KeyStroke;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import javax.swing.text.Utilities;
import jsyntaxpane.DefaultSyntaxKit;
import org.alejandrohernandez.analizadorHaskell.EjecucionHaskell;
import org.alejandrohernandez.analizadorgraphik.EjecucionGraphik;
import org.alejandrohernandez.manejadores.TablaSimbolosGraphik;
import org.alejandrohernandez.analizadorgraphik.*;
import org.alejandrohernandez.beans.Als;
import org.alejandrohernandez.manejadores.ManejadorErrores;
import org.alejandrohernandez.manejadores.ManejadorHaskellLenguaje;
import org.alejandrohernandez.reportes.ReporteErroresGraphik;
import org.alejandrohernandez.reportes.ReporteSimbolosGraphik;

/**
 *
 * @author oscar
 */
public class VentanaGraphik extends javax.swing.JFrame {

    private ArrayList<listaTabs> ALlistaTabs;
    private ArrayList<listaTabs> temporal;//-----
    private ArrayList<cuerpo> ALlista;
    private ArrayList<listaTabs> ALlistaTabsH;
    private ArrayList<listaTabs> temporalH;//-----
    private ArrayList<cuerpo> ALlistaH;
    public static String lenguajeActivo = "";
    private int contadorPestanias;
    private String ruta;
    private String txtPrincipal1;

    /**
     * Creates new form VentanaGraphik
     */
    public VentanaGraphik() {
        temporal = new ArrayList<>();
        ALlista = new ArrayList<>();
        ALlistaTabs = new ArrayList<>();
        contadorPestanias = 1;
        initComponents();

    }

    public static void analizar(String texto) throws IOException, Exception {
        texto = texto.toLowerCase();
        StringReader miReader = new StringReader(texto);
        Scanner scn = new Scanner(miReader);
        ParserGk par = new ParserGk(scn);
        par.parse();

//        Symbol s = (Symbol) scn.next_token();
//        while (s.sym != 0) {
//            System.out.println("Lexema: " + s.value + "         Token: " + s.sym);
//            s = (Symbol) scn.next_token();
//
//        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtConsola = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        btnEjecutarGk = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        btnCambiar = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jmAbrir = new javax.swing.JMenuItem();
        jmGuardar = new javax.swing.JMenuItem();
        jmGuardarComo = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(875, 610));

        txtConsola.setColumns(20);
        txtConsola.setRows(5);
        jScrollPane1.setViewportView(txtConsola);

        jLabel1.setText("Consola");

        btnEjecutarGk.setText("Ejecutar");
        btnEjecutarGk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEjecutarGkActionPerformed(evt);
            }
        });

        jButton1.setText("Reporte Errores");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Tabla de simbolos");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        btnCambiar.setText("Cambiar lenguaje");
        btnCambiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCambiarActionPerformed(evt);
            }
        });

        jMenu1.setText("Archivo");

        jMenuItem1.setText("Crear");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jmAbrir.setText("Abrir");
        jmAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmAbrirActionPerformed(evt);
            }
        });
        jMenu1.add(jmAbrir);

        jmGuardar.setText("Guardar");
        jmGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmGuardarActionPerformed(evt);
            }
        });
        jMenu1.add(jmGuardar);

        jmGuardarComo.setText("Guardar como");
        jmGuardarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmGuardarComoActionPerformed(evt);
            }
        });
        jMenu1.add(jmGuardarComo);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 721, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnEjecutarGk, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2)
                            .addComponent(btnCambiar)))
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(btnEjecutarGk, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCambiar, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        agregar("Nuevo " + contadorPestanias, "", "");
        contadorPestanias++;
    }//GEN-LAST:event_jMenuItem1ActionPerformed
    public void limpiarHaskell() {

    }

    public void limpiarGraphik() {
        TablaSimbolosGraphik.getInstancia().limpiarInstancia();
        ManejadorErrores.getInstancia().limpiarInstancia();
        EjecucionGraphik.resultadoFinalGk = "";
    }
    private void btnEjecutarGkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEjecutarGkActionPerformed
        // TODO add your handling code here:

        txtConsola.setText("");
        if (lenguajeActivo.equals("haskell")) {
            //TablaSimbolosHaskell.getInstancia().limpiarInstancia();
            EjecucionHaskell.resultadoFinalHaskell = "";
            for (int k = 0; k < ALlistaTabs.size(); k++) {

                try {
                    ManejadorHaskellLenguaje.analizar(ALlistaTabs.get(k).panel.getText());
                    txtConsola.setText(txtConsola.getText() + EjecucionHaskell.resultadoFinalHaskell);
                } catch (Exception ex) {
                    Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else if (lenguajeActivo.equals("graphik")) {
            for (int k = 0; k < ALlistaTabs.size(); k++) {

                try {
                    analizar(ALlistaTabs.get(k).panel.getText());
                    buscarPrincipal();
                    txtConsola.setText(txtConsola.getText() + EjecucionGraphik.resultadoFinalGk);

                } catch (Exception ex) {
                    Logger.getLogger(VentanaGraphik.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }


    }//GEN-LAST:event_btnEjecutarGkActionPerformed
    public void look() {
        try {
            JFrame.setDefaultLookAndFeelDecorated(true);
            JDialog.setDefaultLookAndFeelDecorated(true);
            // UIManager.setLookAndFeel("com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel");
            //UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
            // UIManager.setLookAndFeel("com.sun.java.swing.plaf.motif.MotifLookAndFeel");
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaGraphik.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaGraphik.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaGraphik.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaGraphik.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

    }

    public void buscarPrincipal() {
        for (String key : TablaSimbolosGraphik.getInstancia().getListaAls().keySet()) {
            Als principal = TablaSimbolosGraphik.getInstancia().getListaAls().get(key);
            if (principal.getPrincipal() != null) {
                EjecucionGraphik eje = new EjecucionGraphik();
                TablaSimbolosGraphik.getInstancia().setAlsPrincipal(principal);
                TablaSimbolosGraphik.getInstancia().setAlsActivo(principal);
                TablaSimbolosGraphik.getInstancia().agregarAmbito("metodo");
                eje.ejecucion(principal.getPrincipal());
                TablaSimbolosGraphik.getInstancia().quitarAmbito();

                break;
            }
        }

    }

    public JTextArea completadoPalabrasGraphik(JEditorPane jtf) {

        JTextArea jta = new JTextArea();
        jta.setLineWrap(true);
        jta.setWrapStyleWord(true);

        String[] entries = {"si(){\n\n}", "si(){\n\n}sino{\n\n}", "mientras(){\n\n}", "hasta{\n\n}mientras()?",
            "seleccion(){\n\n}", "publico", "privado", "protegido", "var", "importar",
            "als", "hereda", "nuevo", "falso", "vacio", "entero", "decimal",
            "caracter", "cadena", "bool", "retornar", "llamar", "inicio", "incluir_hk",
            "llamarhk", "continuar ?", "terminar ?", "graphikar_funcion",
            "imprimir", "datos", "donde", "procesar", "dondecada",
            "dondetodo", "llamarhk",};

        // create an autocomplete for JTextField
        Autocomplete autocomplete = new Autocomplete(entries, true);
        autocomplete.setMaximumRowCount(10);
        // configure autocomplete to read the token from the beginning of the line
        autocomplete.setDelimiter(Autocomplete.LINE_START_PATTERN);
        // configure autocomplete to read the token up to the newline rather than the caret position
        autocomplete.setCompletionBoundary(Autocomplete.CompletionBoundary.NEWLINE);
        // ATTENTION: the following methods whose comment is marked with ** are not available in the binary version
        // make autocomplete select/ highlight a menu item when the mouse pointer rolls over it**
        // autocomplete.setSelectedOnRollover(true);
        // make autocomplete pre-insert a completion into the document immediately as it is selected**
        //autocomplete.setCompleteImmediately(true);
        // allow the menu to clear its selection when user navigates past the first/ last item using the keyboard keys**
        //autocomplete.setListNavigationMode(ListNavigationMode.EXTENDED);
        // set the visible row count**
        //autocomplete.setVisibleRowCount(5);
        // set the shortcut key to trigger the autocomplete menu**
        //autocomplete.setShortcutKey(KeyStroke.getKeyStroke("pressed DOWN"));
        autocomplete.setTextComponent(jtf);

        // create an autocomplete for JTextArea
        Autocomplete autocomplete2 = new Autocomplete(Arrays.asList(entries), true);
        autocomplete2.setMinimumPrefixLength(1);
        autocomplete2.setMaximumRowCount(10);
        // set the shortcut key to trigger the autocomplete menu**
        // autocomplete2.setShortcutKey(KeyStroke.getKeyStroke("shift pressed TAB"));
        autocomplete2.setTextComponent(jta);

        // add(jtf, BorderLayout.NORTH);
        //   add(jta, BorderLayout.CENTER);
        return jta;
    }

    public JTextArea completadoPalabrasHaskell(JEditorPane jtf) {

        JTextArea jta = new JTextArea();
        jta.setLineWrap(true);
        jta.setWrapStyleWord(true);

        String[] entries = {"if(){\n}", "if()then{\n}else{\n}", "end", "case",
            "length", "desc", "asc", "par", "impr",
            "revers", "product", "sum", "max",
            "min", "decc", "decc", "calcular %", "calcular",
            "succ", "let",};

        // create an autocomplete for JTextField
        Autocomplete autocomplete = new Autocomplete(entries, true);
        autocomplete.setMaximumRowCount(10);
        // configure autocomplete to read the token from the beginning of the line
        autocomplete.setDelimiter(Autocomplete.LINE_START_PATTERN);
        // configure autocomplete to read the token up to the newline rather than the caret position
        autocomplete.setCompletionBoundary(Autocomplete.CompletionBoundary.NEWLINE);
        // ATTENTION: the following methods whose comment is marked with ** are not available in the binary version
        // make autocomplete select/ highlight a menu item when the mouse pointer rolls over it**
        // autocomplete.setSelectedOnRollover(true);
        // make autocomplete pre-insert a completion into the document immediately as it is selected**
        //autocomplete.setCompleteImmediately(true);
        // allow the menu to clear its selection when user navigates past the first/ last item using the keyboard keys**
        //autocomplete.setListNavigationMode(ListNavigationMode.EXTENDED);
        // set the visible row count**
        //autocomplete.setVisibleRowCount(5);
        // set the shortcut key to trigger the autocomplete menu**
        //autocomplete.setShortcutKey(KeyStroke.getKeyStroke("pressed DOWN"));
        autocomplete.setTextComponent(jtf);

        // create an autocomplete for JTextArea
        Autocomplete autocomplete2 = new Autocomplete(Arrays.asList(entries), true);
        autocomplete2.setMinimumPrefixLength(1);
        autocomplete2.setMaximumRowCount(10);
        // set the shortcut key to trigger the autocomplete menu**
        // autocomplete2.setShortcutKey(KeyStroke.getKeyStroke("shift pressed TAB"));
        autocomplete2.setTextComponent(jta);

        // add(jtf, BorderLayout.NORTH);
        //   add(jta, BorderLayout.CENTER);
        return jta;
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        ReporteErroresGraphik reporte = new ReporteErroresGraphik();
        try {
            reporte.crearHtml(0);
        } catch (IOException ex) {
            Logger.getLogger(VentanaGraphik.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        ReporteSimbolosGraphik reporte = new ReporteSimbolosGraphik();
        try {
            reporte.crearHtml();
        } catch (IOException ex) {
            Logger.getLogger(VentanaGraphik.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnCambiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCambiarActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.removeAll();
        this.setVisible(false);
        SeleccionarLenguaje se = new SeleccionarLenguaje();
        se.setVisible(true);
    }//GEN-LAST:event_btnCambiarActionPerformed

    private void jmAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmAbrirActionPerformed
        // TODO add your handling code here:
        String aux = "";
        String texto = "";

        try {
            JFileChooser file = new JFileChooser();
            FileNameExtensionFilter filtro = new FileNameExtensionFilter("TXT o IIA", "txt", "iia");
            file.setFileFilter(filtro);
            file.showOpenDialog(this);
            File abre = file.getSelectedFile();
            ruta = abre.getAbsolutePath();
            //  System.out.println(ruta);

            if (abre != null) {
                FileReader archivos = new FileReader(abre);

                BufferedReader lee = new BufferedReader(archivos);
                while ((aux = lee.readLine()) != null) {
                    texto += aux + "\n";
                }
                lee.close();
                agregar(abre.getName(), ruta, texto);
            }

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, ex + ""
                    + "\nNo se ha encontrado el archivo",
                    "ADVERTENCIA!!!", JOptionPane.WARNING_MESSAGE);
        }

//        txtLog.append(">> Se ha abierto el archivo correctamente.\n");
    }//GEN-LAST:event_jmAbrirActionPerformed

    private void jmGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmGuardarActionPerformed
        // TODO add your handling code here:
        int a = jTabbedPane1.getSelectedIndex();
        String txtPrincipal = ALlistaTabs.get(a).panel.getText();
        System.out.println(ALlista.get(a).path);
        File archivo = new File(ALlista.get(a).path);
        BufferedWriter bw = null;
        try {
            if (archivo.exists()) {
                bw = new BufferedWriter(new FileWriter(archivo));
                bw.write(txtPrincipal);
                //txtLog.append(">> Se ha guardado el archivo correctamente.\n");

                bw.close();
            } else {
                try {
                    String nombre = "";
                    JFileChooser file = new JFileChooser();
                    file.showSaveDialog(this);
                    File guarda = file.getSelectedFile();
                    ruta = guarda.getAbsolutePath();
                    if (guarda != null) {
                        FileWriter save = new FileWriter(guarda + ".iia");
                        save.write(txtPrincipal);
                        save.close();
                        JOptionPane.showMessageDialog(null,
                                "El archivo se guardo exitosamente",
                                "Información", JOptionPane.INFORMATION_MESSAGE);
                    }
                    bw.close();
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null,
                            "Su archivo no se ha guardado",
                            "Advertencia", JOptionPane.WARNING_MESSAGE);
                }
            }
        } catch (IOException | HeadlessException e) {
            //txtLog.append(">> Error al guardar el archivo.\n");
        }
    }//GEN-LAST:event_jmGuardarActionPerformed

    private void jmGuardarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmGuardarComoActionPerformed
        // TODO add your handling code here:
        int a = jTabbedPane1.getSelectedIndex();
        String txtPrincipal = ALlistaTabs.get(a).panel.getText();
        try {
            String nombre = "";
            JFileChooser file = new JFileChooser();
            file.showSaveDialog(this);
            File guarda = file.getSelectedFile();
            ruta = guarda.getAbsolutePath();

            if (guarda != null) {
                FileWriter save = new FileWriter(guarda + ".iia");
                save.write(txtPrincipal);
                save.close();
                JOptionPane.showMessageDialog(null,
                        "El archivo se guardo exitosamente",
                        "Información", JOptionPane.INFORMATION_MESSAGE);

                // txtLog.append(">> Se ha guardado el archivo correctamente.\n");
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null,
                    "Su archivo no se ha guardado",
                    "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jmGuardarComoActionPerformed
    private void agregar(String nombre, String direc, String texto) {
        JPanel panel;
        JScrollPane barra;
        JEditorPane codigo;
        panel = new JPanel();
        barra = new JScrollPane();
        codigo = new JEditorPane();
        barra.setViewportView(codigo);
        javax.swing.GroupLayout layP = new javax.swing.GroupLayout(panel);
        panel.setLayout(layP);
        layP.setHorizontalGroup(layP.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layP.createSequentialGroup()
                        .addComponent(barra))
        );
        layP.setVerticalGroup(layP.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layP.createSequentialGroup()
                        .addComponent(barra))
        );
        jTabbedPane1.add(nombre, panel);
        DefaultSyntaxKit.initKit();
        codigo.setContentType("text/java");

        codigo.addCaretListener(new javax.swing.event.CaretListener() {
            @Override
            public void caretUpdate(javax.swing.event.CaretEvent eva) {
                texCaretUpdate(eva);
            }
        });

        listaTabs nuevo;
        nuevo = new listaTabs(codigo);
        if (lenguajeActivo.equals("graphik")) {
            completadoPalabrasGraphik(codigo);
        } else if (lenguajeActivo.equals("haskell")) {
            completadoPalabrasHaskell(codigo);
        }

        ALlistaTabs.add(nuevo);
        ALlistaTabs.get(ALlistaTabs.size() - 1).panel.setText(texto);
        cuerpo nue = new cuerpo(nombre, direc);
        ALlista.add(nue);

    }

    public void texCaretUpdate(javax.swing.event.CaretEvent evt) {
        int num = jTabbedPane1.getSelectedIndex();
        try {
            int caretPos = ALlistaTabs.get(num).panel.getCaretPosition();
            int rowNum = (caretPos == 0) ? 1 : 0;
            for (int offset = caretPos; offset > 0;) {
                offset = Utilities.getRowStart(ALlistaTabs.get(num).panel, offset) - 1;
                rowNum++;
            }
            int offset = Utilities.getRowStart(ALlistaTabs.get(num).panel, caretPos);
            int colNum = caretPos - offset + 1;
            jLabel1.setText("Linea: " + rowNum + "       Columna: " + colNum);
        } catch (BadLocationException ex) {
            Logger.getLogger(listaTabs.class.getName()).log(Level.SEVERE, null, ex);
        }
        // TODO add your handling code here:
        // TODO add your handling code here:
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            JFrame.setDefaultLookAndFeelDecorated(true);
            JDialog.setDefaultLookAndFeelDecorated(true);
            // UIManager.setLookAndFeel("com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel");
            //UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
            // UIManager.setLookAndFeel("com.sun.java.swing.plaf.motif.MotifLookAndFeel");
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaGraphik.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaGraphik.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaGraphik.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaGraphik.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaGraphik().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCambiar;
    private javax.swing.JButton btnEjecutarGk;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JMenuItem jmAbrir;
    private javax.swing.JMenuItem jmGuardar;
    private javax.swing.JMenuItem jmGuardarComo;
    private javax.swing.JTextArea txtConsola;
    // End of variables declaration//GEN-END:variables
}
